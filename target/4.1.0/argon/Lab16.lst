
/Users/shoubhitsstuff/Desktop/Lab16/target/4.1.0/argon/Lab16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000056d4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b96f0  000b96f0  000096f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9714  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e54c  000b9718  0001e54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000238  2003e5b8  2003e5b8  0002e5b8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9784  000b9784  00029784  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b97ac  000b97ac  000297ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013a43b  00000000  00000000  000297b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014ea7  00000000  00000000  00163beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00042522  00000000  00000000  00178a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032b8  00000000  00000000  001bafb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ab08  00000000  00000000  001be26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ef73  00000000  00000000  001c8d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a89c  00000000  00000000  00207ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135c96  00000000  00000000  00252583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000953c  00000000  00000000  0038821c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 f8f5 	bl	b821c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 f917 	bl	b826c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e54c 	.word	0x2003e54c
   b4048:	000b9718 	.word	0x000b9718
   b404c:	2003e5b8 	.word	0x2003e5b8
   b4050:	2003e5b8 	.word	0x2003e5b8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fe7f 	bl	b7d60 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b96c8 	.word	0x000b96c8
   b407c:	000b96ec 	.word	0x000b96ec

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8e0 	b.w	b4244 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f831 	bl	b40ec <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 be1f 	b.w	b7cd0 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 be45 	b.w	b5d20 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 be43 	b.w	b5d20 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 be49 	b.w	b5d30 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fd96 	bl	b5bd8 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b58d9 	.word	0x000b58d9
   b40b4:	000b8544 	.word	0x000b8544

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_Z14refreshDisplayv>:
        }
    }
}

void refreshDisplay()
{
   b40c8:	b510      	push	{r4, lr}
    display.clearDisplay();
   b40ca:	4c07      	ldr	r4, [pc, #28]	; (b40e8 <_Z14refreshDisplayv+0x20>)
   b40cc:	4620      	mov	r0, r4
   b40ce:	f000 ff63 	bl	b4f98 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   b40d2:	2101      	movs	r1, #1
   b40d4:	4620      	mov	r0, r4
   b40d6:	f000 fda6 	bl	b4c26 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b40da:	2200      	movs	r2, #0
   b40dc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b40e0:	e9c4 2304 	strd	r2, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
   b40e4:	bd10      	pop	{r4, pc}
   b40e6:	bf00      	nop
   b40e8:	2003e620 	.word	0x2003e620

000b40ec <loop>:
{
   b40ec:	b530      	push	{r4, r5, lr}
    display.loop();
   b40ee:	482f      	ldr	r0, [pc, #188]	; (b41ac <loop+0xc0>)
{
   b40f0:	b08b      	sub	sp, #44	; 0x2c
    display.loop();
   b40f2:	f001 fb1c 	bl	b572e <_ZN16OledWingAdafruit4loopEv>
    if (!BLE.connected())
   b40f6:	f002 f9ad 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40fa:	f002 fa12 	bl	b6522 <_ZNK8particle14BleLocalDevice9connectedEv>
   b40fe:	4602      	mov	r2, r0
   b4100:	bb30      	cbnz	r0, b4150 <loop+0x64>
        RGB.color(255, 255, 0);
   b4102:	21ff      	movs	r1, #255	; 0xff
   b4104:	4608      	mov	r0, r1
   b4106:	f003 fac3 	bl	b7690 <_ZN8RGBClass5colorEiii>
    if (DC)
   b410a:	4d29      	ldr	r5, [pc, #164]	; (b41b0 <loop+0xc4>)
    delay(1000);
   b410c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4110:	f001 fe46 	bl	b5da0 <delay>
    if (DC)
   b4114:	782b      	ldrb	r3, [r5, #0]
   b4116:	b1cb      	cbz	r3, b414c <loop+0x60>
        BLE.disconnect();
   b4118:	f002 f99c 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b411c:	f002 fd6a 	bl	b6bf4 <_ZNK8particle14BleLocalDevice10disconnectEv>
        DC = false;
   b4120:	2400      	movs	r4, #0
        RGB.color(255, 255, 0);
   b4122:	21ff      	movs	r1, #255	; 0xff
   b4124:	4622      	mov	r2, r4
   b4126:	4608      	mov	r0, r1
        DC = false;
   b4128:	702c      	strb	r4, [r5, #0]
        RGB.color(255, 255, 0);
   b412a:	f003 fab1 	bl	b7690 <_ZN8RGBClass5colorEiii>
        refreshDisplay();
   b412e:	f7ff ffcb 	bl	b40c8 <_Z14refreshDisplayv>
        display.println("Disconnected");
   b4132:	4920      	ldr	r1, [pc, #128]	; (b41b4 <loop+0xc8>)
   b4134:	481d      	ldr	r0, [pc, #116]	; (b41ac <loop+0xc0>)
   b4136:	f003 fa42 	bl	b75be <_ZN5Print7printlnEPKc>
        display.display();
   b413a:	481c      	ldr	r0, [pc, #112]	; (b41ac <loop+0xc0>)
   b413c:	f001 f99a 	bl	b5474 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4140:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4144:	f001 fe2c 	bl	b5da0 <delay>
        RC = false;
   b4148:	4b1b      	ldr	r3, [pc, #108]	; (b41b8 <loop+0xcc>)
   b414a:	701c      	strb	r4, [r3, #0]
}
   b414c:	b00b      	add	sp, #44	; 0x2c
   b414e:	bd30      	pop	{r4, r5, pc}
    else if(BLE.connected())
   b4150:	f002 f980 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4154:	f002 f9e5 	bl	b6522 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4158:	2800      	cmp	r0, #0
   b415a:	d0d6      	beq.n	b410a <loop+0x1e>
        if (RC == false)
   b415c:	4c16      	ldr	r4, [pc, #88]	; (b41b8 <loop+0xcc>)
   b415e:	7823      	ldrb	r3, [r4, #0]
   b4160:	b943      	cbnz	r3, b4174 <loop+0x88>
            refreshDisplay();
   b4162:	f7ff ffb1 	bl	b40c8 <_Z14refreshDisplayv>
            display.display();
   b4166:	4811      	ldr	r0, [pc, #68]	; (b41ac <loop+0xc0>)
   b4168:	f001 f984 	bl	b5474 <_ZN16Adafruit_SSD13067displayEv>
            RC = !RC;
   b416c:	7823      	ldrb	r3, [r4, #0]
   b416e:	f083 0301 	eor.w	r3, r3, #1
   b4172:	7023      	strb	r3, [r4, #0]
        RGB.color(0, 0, 255);
   b4174:	2100      	movs	r1, #0
   b4176:	22ff      	movs	r2, #255	; 0xff
   b4178:	4608      	mov	r0, r1
   b417a:	f003 fa89 	bl	b7690 <_ZN8RGBClass5colorEiii>
        String message = "Hey!\n";
   b417e:	490f      	ldr	r1, [pc, #60]	; (b41bc <loop+0xd0>)
   b4180:	a801      	add	r0, sp, #4
   b4182:	f003 fb9c 	bl	b78be <_ZN6StringC1EPK19__FlashStringHelper>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4186:	9a03      	ldr	r2, [sp, #12]
   b4188:	a905      	add	r1, sp, #20
   b418a:	a801      	add	r0, sp, #4
   b418c:	2300      	movs	r3, #0
   b418e:	3201      	adds	r2, #1
   b4190:	f003 fbf2 	bl	b7978 <_ZNK6String8getBytesEPhjj>
        txCharacteristic.setValue(txBuf, message.length() + 1);
   b4194:	9a03      	ldr	r2, [sp, #12]
   b4196:	480a      	ldr	r0, [pc, #40]	; (b41c0 <loop+0xd4>)
   b4198:	2300      	movs	r3, #0
   b419a:	3201      	adds	r2, #1
   b419c:	a905      	add	r1, sp, #20
   b419e:	f002 f849 	bl	b6234 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        String message = "Hey!\n";
   b41a2:	a801      	add	r0, sp, #4
   b41a4:	f003 fb40 	bl	b7828 <_ZN6StringD1Ev>
   b41a8:	e7af      	b.n	b410a <loop+0x1e>
   b41aa:	bf00      	nop
   b41ac:	2003e620 	.word	0x2003e620
   b41b0:	2003e5b8 	.word	0x2003e5b8
   b41b4:	000b855f 	.word	0x000b855f
   b41b8:	2003e5b9 	.word	0x2003e5b9
   b41bc:	000b8559 	.word	0x000b8559
   b41c0:	2003e6a4 	.word	0x2003e6a4

000b41c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
{
   b41c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        charToStr = String(data[i]);
   b41c8:	4f1a      	ldr	r7, [pc, #104]	; (b4234 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
            DC = true;
   b41ca:	f8df 8070 	ldr.w	r8, [pc, #112]	; b423c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>
            display.println("1!");
   b41ce:	f8df 9070 	ldr.w	r9, [pc, #112]	; b4240 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>
{
   b41d2:	b085      	sub	sp, #20
   b41d4:	4604      	mov	r4, r0
   b41d6:	1846      	adds	r6, r0, r1
    for (size_t i = 0; i < len; i++)
   b41d8:	42b4      	cmp	r4, r6
   b41da:	d028      	beq.n	b422e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
        charToStr = String(data[i]);
   b41dc:	220a      	movs	r2, #10
   b41de:	7821      	ldrb	r1, [r4, #0]
   b41e0:	4668      	mov	r0, sp
   b41e2:	f003 fbb7 	bl	b7954 <_ZN6StringC1Ehh>
   b41e6:	4669      	mov	r1, sp
   b41e8:	4638      	mov	r0, r7
   b41ea:	f003 fb99 	bl	b7920 <_ZN6StringaSEOS_>
   b41ee:	4668      	mov	r0, sp
   b41f0:	f003 fb1a 	bl	b7828 <_ZN6StringD1Ev>
        int strToInt = charToStr.toInt();
   b41f4:	4638      	mov	r0, r7
   b41f6:	f003 fbd7 	bl	b79a8 <_ZNK6String5toIntEv>
   b41fa:	4605      	mov	r5, r0
        Serial.write(data[i]);
   b41fc:	f003 fca6 	bl	b7b4c <_Z16_fetch_usbserialv>
   b4200:	6803      	ldr	r3, [r0, #0]
   b4202:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4206:	689b      	ldr	r3, [r3, #8]
   b4208:	4798      	blx	r3
        if (strToInt == 49)
   b420a:	2d31      	cmp	r5, #49	; 0x31
   b420c:	d109      	bne.n	b4222 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
            refreshDisplay();
   b420e:	f7ff ff5b 	bl	b40c8 <_Z14refreshDisplayv>
            display.println("1!");
   b4212:	4649      	mov	r1, r9
   b4214:	4808      	ldr	r0, [pc, #32]	; (b4238 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   b4216:	f003 f9d2 	bl	b75be <_ZN5Print7printlnEPKc>
            display.display();
   b421a:	4807      	ldr	r0, [pc, #28]	; (b4238 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   b421c:	f001 f92a 	bl	b5474 <_ZN16Adafruit_SSD13067displayEv>
        if (strToInt == 48)
   b4220:	e7da      	b.n	b41d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
   b4222:	2d30      	cmp	r5, #48	; 0x30
   b4224:	d1d8      	bne.n	b41d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
            DC = true;
   b4226:	2301      	movs	r3, #1
   b4228:	f888 3000 	strb.w	r3, [r8]
    for (size_t i = 0; i < len; i++)
   b422c:	e7d4      	b.n	b41d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
}
   b422e:	b005      	add	sp, #20
   b4230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4234:	2003e604 	.word	0x2003e604
   b4238:	2003e620 	.word	0x2003e620
   b423c:	2003e5b8 	.word	0x2003e5b8
   b4240:	000b856c 	.word	0x000b856c

000b4244 <setup>:
{
   b4244:	b570      	push	{r4, r5, r6, lr}
    display.setup();
   b4246:	482f      	ldr	r0, [pc, #188]	; (b4304 <setup+0xc0>)
   b4248:	4c2f      	ldr	r4, [pc, #188]	; (b4308 <setup+0xc4>)
{
   b424a:	b08e      	sub	sp, #56	; 0x38
    display.setup();
   b424c:	f001 fa46 	bl	b56dc <_ZN16OledWingAdafruit5setupEv>
    BLE.on();
   b4250:	f002 f900 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4254:	f002 f948 	bl	b64e8 <_ZNK8particle14BleLocalDevice2onEv>
    RGB.control(true);
   b4258:	2001      	movs	r0, #1
   b425a:	f003 fa09 	bl	b7670 <_ZN8RGBClass7controlEb>
    Serial.begin(9600);
   b425e:	f003 fc75 	bl	b7b4c <_Z16_fetch_usbserialv>
   b4262:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4266:	f003 fc65 	bl	b7b34 <_ZN9USBSerial5beginEl>
    refreshDisplay();
   b426a:	f7ff ff2d 	bl	b40c8 <_Z14refreshDisplayv>
    BLE.addCharacteristic(txCharacteristic);
   b426e:	f002 f8f1 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4272:	4a26      	ldr	r2, [pc, #152]	; (b430c <setup+0xc8>)
   b4274:	4601      	mov	r1, r0
   b4276:	a809      	add	r0, sp, #36	; 0x24
   b4278:	f002 fe84 	bl	b6f84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b427c:	a809      	add	r0, sp, #36	; 0x24
   b427e:	f002 f9ee 	bl	b665e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b4282:	f002 f8e7 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4286:	4a22      	ldr	r2, [pc, #136]	; (b4310 <setup+0xcc>)
   b4288:	4601      	mov	r1, r0
   b428a:	a809      	add	r0, sp, #36	; 0x24
   b428c:	f002 fe7a 	bl	b6f84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4290:	a809      	add	r0, sp, #36	; 0x24
   b4292:	f002 f9e4 	bl	b665e <_ZN8particle17BleCharacteristicD1Ev>
    txCharacteristic.setValue(txBuf, 10); // here we are sending all 10 bytes
   b4296:	491f      	ldr	r1, [pc, #124]	; (b4314 <setup+0xd0>)
   b4298:	481c      	ldr	r0, [pc, #112]	; (b430c <setup+0xc8>)
   b429a:	2300      	movs	r3, #0
   b429c:	220a      	movs	r2, #10
   b429e:	f001 ffc9 	bl	b6234 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    datas.appendServiceUUID(serviceUuid);
   b42a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b42a4:	ad04      	add	r5, sp, #16
   b42a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b42a8:	ad04      	add	r5, sp, #16
   b42aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b42ac:	6826      	ldr	r6, [r4, #0]
   b42ae:	ac09      	add	r4, sp, #36	; 0x24
   b42b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42b2:	a809      	add	r0, sp, #36	; 0x24
        BleUuid tempUUID(uuid);
   b42b4:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42b6:	f001 fee1 	bl	b607c <_ZNK8particle7BleUuid4typeEv>
   b42ba:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b42bc:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42be:	b9cc      	cbnz	r4, b42f4 <setup+0xb0>
            uint16_t uuid16 = tempUUID.shorted();
   b42c0:	f001 fef8 	bl	b60b4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42c4:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b42c6:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42ca:	2302      	movs	r3, #2
   b42cc:	f10d 020e 	add.w	r2, sp, #14
   b42d0:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b42d2:	4811      	ldr	r0, [pc, #68]	; (b4318 <setup+0xd4>)
   b42d4:	f002 faee 	bl	b68b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&datas);
   b42d8:	f002 f8bc 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42dc:	490e      	ldr	r1, [pc, #56]	; (b4318 <setup+0xd4>)
   b42de:	2200      	movs	r2, #0
   b42e0:	f002 f960 	bl	b65a4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    BLE.setDeviceName("Shoubhit!");
   b42e4:	f002 f8b6 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42e8:	490c      	ldr	r1, [pc, #48]	; (b431c <setup+0xd8>)
}
   b42ea:	b00e      	add	sp, #56	; 0x38
   b42ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BLE.setDeviceName("Shoubhit!");
   b42f0:	f002 b901 	b.w	b64f6 <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>
   b42f4:	f001 fee0 	bl	b60b8 <_ZNK8particle7BleUuid8rawBytesEv>
   b42f8:	2300      	movs	r3, #0
   b42fa:	9300      	str	r3, [sp, #0]
   b42fc:	4602      	mov	r2, r0
   b42fe:	2310      	movs	r3, #16
   b4300:	2107      	movs	r1, #7
   b4302:	e7e6      	b.n	b42d2 <setup+0x8e>
   b4304:	2003e620 	.word	0x2003e620
   b4308:	2003e5c8 	.word	0x2003e5c8
   b430c:	2003e6a4 	.word	0x2003e6a4
   b4310:	2003e690 	.word	0x2003e690
   b4314:	2003e698 	.word	0x2003e698
   b4318:	2003e614 	.word	0x2003e614
   b431c:	000b856f 	.word	0x000b856f

000b4320 <_GLOBAL__sub_I_SystemMode>:
   b4320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4324:	4b40      	ldr	r3, [pc, #256]	; (b4428 <_GLOBAL__sub_I_SystemMode+0x108>)
    SleepResult() {}
   b4326:	4a41      	ldr	r2, [pc, #260]	; (b442c <_GLOBAL__sub_I_SystemMode+0x10c>)
   b4328:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b432a:	2400      	movs	r4, #0
   b432c:	b099      	sub	sp, #100	; 0x64
   b432e:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4332:	2003      	movs	r0, #3
   b4334:	f001 fc60 	bl	b5bf8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4338:	4621      	mov	r1, r4
   b433a:	2001      	movs	r0, #1
   b433c:	f001 fc6c 	bl	b5c18 <system_thread_set_state>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4340:	4d3b      	ldr	r5, [pc, #236]	; (b4430 <_GLOBAL__sub_I_SystemMode+0x110>)
BleAdvertisingData datas;
   b4342:	483c      	ldr	r0, [pc, #240]	; (b4434 <_GLOBAL__sub_I_SystemMode+0x114>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4344:	4e3c      	ldr	r6, [pc, #240]	; (b4438 <_GLOBAL__sub_I_SystemMode+0x118>)
BleAdvertisingData datas;
   b4346:	f002 fac0 	bl	b68ca <_ZN8particle18BleAdvertisingDataC1Ev>
OledWingAdafruit display;
   b434a:	2107      	movs	r1, #7
   b434c:	483b      	ldr	r0, [pc, #236]	; (b443c <_GLOBAL__sub_I_SystemMode+0x11c>)
   b434e:	f001 f997 	bl	b5680 <_ZN16OledWingAdafruitC1Ei>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4352:	493b      	ldr	r1, [pc, #236]	; (b4440 <_GLOBAL__sub_I_SystemMode+0x120>)
   b4354:	4628      	mov	r0, r5
   b4356:	f001 ff2f 	bl	b61b8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b435a:	493a      	ldr	r1, [pc, #232]	; (b4444 <_GLOBAL__sub_I_SystemMode+0x124>)
   b435c:	4630      	mov	r0, r6
   b435e:	f001 ff2b 	bl	b61b8 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4364:	af04      	add	r7, sp, #16
   b4366:	46a8      	mov	r8, r5
   b4368:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b436a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b436e:	f8d6 9000 	ldr.w	r9, [r6]
   b4372:	f8c7 9000 	str.w	r9, [r7]
   b4376:	ae09      	add	r6, sp, #36	; 0x24
   b4378:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b437a:	af04      	add	r7, sp, #16
   b437c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b437e:	f8d8 e000 	ldr.w	lr, [r8]
   b4382:	f8c6 e000 	str.w	lr, [r6]
   b4386:	ae0e      	add	r6, sp, #56	; 0x38
   b4388:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b438a:	f8df c0d8 	ldr.w	ip, [pc, #216]	; b4464 <_GLOBAL__sub_I_SystemMode+0x144>
   b438e:	f8c6 9000 	str.w	r9, [r6]
        BleUuid sUuid(svcUuid);
   b4392:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4394:	e9cc 4400 	strd	r4, r4, [ip]
   b4398:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b439a:	ae13      	add	r6, sp, #76	; 0x4c
   b439c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b439e:	4f2a      	ldr	r7, [pc, #168]	; (b4448 <_GLOBAL__sub_I_SystemMode+0x128>)
   b43a0:	f8c6 e000 	str.w	lr, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b43a4:	4b29      	ldr	r3, [pc, #164]	; (b444c <_GLOBAL__sub_I_SystemMode+0x12c>)
   b43a6:	9301      	str	r3, [sp, #4]
   b43a8:	ae13      	add	r6, sp, #76	; 0x4c
   b43aa:	ab0e      	add	r3, sp, #56	; 0x38
   b43ac:	4660      	mov	r0, ip
   b43ae:	f04f 0204 	mov.w	r2, #4
   b43b2:	4927      	ldr	r1, [pc, #156]	; (b4450 <_GLOBAL__sub_I_SystemMode+0x130>)
   b43b4:	9402      	str	r4, [sp, #8]
   b43b6:	9600      	str	r6, [sp, #0]
   b43b8:	f002 fcba 	bl	b6d30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b43bc:	4925      	ldr	r1, [pc, #148]	; (b4454 <_GLOBAL__sub_I_SystemMode+0x134>)
   b43be:	4638      	mov	r0, r7
   b43c0:	f001 fefa 	bl	b61b8 <_ZN8particle7BleUuidC1EPKc>
   b43c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b43c6:	f10d 0c10 	add.w	ip, sp, #16
   b43ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b43ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b43d0:	f8d7 e000 	ldr.w	lr, [r7]
   b43d4:	f8d8 8000 	ldr.w	r8, [r8]
   b43d8:	f8cc e000 	str.w	lr, [ip]
   b43dc:	af09      	add	r7, sp, #36	; 0x24
   b43de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b43e0:	f8c7 8000 	str.w	r8, [r7]
        BleUuid cUuid(charUuid);
   b43e4:	af04      	add	r7, sp, #16
   b43e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b43e8:	ad0e      	add	r5, sp, #56	; 0x38
   b43ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b43ec:	f8df c078 	ldr.w	ip, [pc, #120]	; b4468 <_GLOBAL__sub_I_SystemMode+0x148>
   b43f0:	f8c5 e000 	str.w	lr, [r5]
        BleUuid sUuid(svcUuid);
   b43f4:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b43f6:	e9cc 4400 	strd	r4, r4, [ip]
   b43fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b43fc:	4635      	mov	r5, r6
   b43fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4400:	4660      	mov	r0, ip
        BleUuid sUuid(svcUuid);
   b4402:	f8c5 8000 	str.w	r8, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4406:	4914      	ldr	r1, [pc, #80]	; (b4458 <_GLOBAL__sub_I_SystemMode+0x138>)
   b4408:	9600      	str	r6, [sp, #0]
   b440a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b440e:	ab0e      	add	r3, sp, #56	; 0x38
   b4410:	f04f 0210 	mov.w	r2, #16
   b4414:	f002 fc8c 	bl	b6d30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
String charToStr;
   b4418:	4910      	ldr	r1, [pc, #64]	; (b445c <_GLOBAL__sub_I_SystemMode+0x13c>)
   b441a:	4811      	ldr	r0, [pc, #68]	; (b4460 <_GLOBAL__sub_I_SystemMode+0x140>)
   b441c:	b019      	add	sp, #100	; 0x64
   b441e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
String charToStr;
   b4422:	f003 ba4c 	b.w	b78be <_ZN6StringC1EPK19__FlashStringHelper>
   b4426:	bf00      	nop
   b4428:	2003e5bc 	.word	0x2003e5bc
   b442c:	ffff0000 	.word	0xffff0000
   b4430:	2003e5c8 	.word	0x2003e5c8
   b4434:	2003e614 	.word	0x2003e614
   b4438:	2003e5dc 	.word	0x2003e5dc
   b443c:	2003e620 	.word	0x2003e620
   b4440:	000b8579 	.word	0x000b8579
   b4444:	000b859e 	.word	0x000b859e
   b4448:	2003e5f0 	.word	0x2003e5f0
   b444c:	000b41c5 	.word	0x000b41c5
   b4450:	000b85c3 	.word	0x000b85c3
   b4454:	000b85c6 	.word	0x000b85c6
   b4458:	000b85eb 	.word	0x000b85eb
   b445c:	000b855e 	.word	0x000b855e
   b4460:	2003e604 	.word	0x2003e604
   b4464:	2003e690 	.word	0x2003e690
   b4468:	2003e6a4 	.word	0x2003e6a4

000b446c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b446c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4470:	b085      	sub	sp, #20
   b4472:	461f      	mov	r7, r3
   b4474:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4478:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b447c:	eba8 0902 	sub.w	r9, r8, r2
   b4480:	eba7 0a01 	sub.w	sl, r7, r1
   b4484:	f1b9 0f00 	cmp.w	r9, #0
   b4488:	bfb8      	it	lt
   b448a:	f1c9 0900 	rsblt	r9, r9, #0
   b448e:	f1ba 0f00 	cmp.w	sl, #0
   b4492:	bfb8      	it	lt
   b4494:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4498:	45d1      	cmp	r9, sl
        uint16_t color) {
   b449a:	4683      	mov	fp, r0
   b449c:	460c      	mov	r4, r1
   b449e:	4615      	mov	r5, r2
    if (steep) {
   b44a0:	dd04      	ble.n	b44ac <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b44a2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b44a4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b44a6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b44a8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b44aa:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b44ac:	42bc      	cmp	r4, r7
   b44ae:	dd05      	ble.n	b44bc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b44b0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b44b2:	4645      	mov	r5, r8
   b44b4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b44b6:	4622      	mov	r2, r4
   b44b8:	463c      	mov	r4, r7
   b44ba:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b44bc:	1b3e      	subs	r6, r7, r4
   b44be:	b2b2      	uxth	r2, r6
   b44c0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b44c2:	eba8 0205 	sub.w	r2, r8, r5
   b44c6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b44ca:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b44ce:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b44d2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b44d6:	4545      	cmp	r5, r8
   b44d8:	bfb4      	ite	lt
   b44da:	2201      	movlt	r2, #1
   b44dc:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b44e0:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b44e2:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b44e4:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b44e6:	42bc      	cmp	r4, r7
   b44e8:	dc1c      	bgt.n	b4524 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b44ea:	f8db 2000 	ldr.w	r2, [fp]
   b44ee:	9303      	str	r3, [sp, #12]
        if (steep) {
   b44f0:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b44f2:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b44f6:	bfc7      	ittee	gt
   b44f8:	4629      	movgt	r1, r5
   b44fa:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b44fc:	462a      	movle	r2, r5
   b44fe:	4621      	movle	r1, r4
   b4500:	4658      	mov	r0, fp
   b4502:	47c0      	blx	r8
        }
        err -= dy;
   b4504:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4506:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4508:	1ab6      	subs	r6, r6, r2
   b450a:	b2b1      	uxth	r1, r6
   b450c:	b236      	sxth	r6, r6
        if (err < 0) {
   b450e:	2e00      	cmp	r6, #0
   b4510:	da05      	bge.n	b451e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4512:	9a02      	ldr	r2, [sp, #8]
   b4514:	4415      	add	r5, r2
            err += dx;
   b4516:	9a00      	ldr	r2, [sp, #0]
   b4518:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b451a:	b22d      	sxth	r5, r5
            err += dx;
   b451c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b451e:	3401      	adds	r4, #1
   b4520:	b224      	sxth	r4, r4
   b4522:	e7e0      	b.n	b44e6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4524:	b005      	add	sp, #20
   b4526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b452a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b452a:	4770      	bx	lr

000b452c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b452c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b452e:	6804      	ldr	r4, [r0, #0]
   b4530:	6924      	ldr	r4, [r4, #16]
   b4532:	46a4      	mov	ip, r4
}
   b4534:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4538:	4760      	bx	ip

000b453a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b453a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b453c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b453e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4542:	9502      	str	r5, [sp, #8]
   b4544:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4546:	46a4      	mov	ip, r4
}
   b4548:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b454a:	4760      	bx	ip

000b454c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b454c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b454e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4550:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4554:	9502      	str	r5, [sp, #8]
   b4556:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4558:	46a4      	mov	ip, r4
}
   b455a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b455c:	4760      	bx	ip

000b455e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b455e:	b470      	push	{r4, r5, r6}
   b4560:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4564:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4568:	6804      	ldr	r4, [r0, #0]
   b456a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b456e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4570:	46a4      	mov	ip, r4
}
   b4572:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4574:	4760      	bx	ip

000b4576 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4576:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b457a:	461c      	mov	r4, r3
    startWrite();
   b457c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b457e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4582:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4584:	4605      	mov	r5, r0
   b4586:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4588:	3c01      	subs	r4, #1
   b458a:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b458c:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b458e:	b224      	sxth	r4, r4
    startWrite();
   b4590:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4592:	682b      	ldr	r3, [r5, #0]
   b4594:	f8cd 8004 	str.w	r8, [sp, #4]
   b4598:	9400      	str	r4, [sp, #0]
   b459a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b459c:	4628      	mov	r0, r5
   b459e:	463b      	mov	r3, r7
   b45a0:	4632      	mov	r2, r6
   b45a2:	4639      	mov	r1, r7
   b45a4:	47a0      	blx	r4
    endWrite();
   b45a6:	682b      	ldr	r3, [r5, #0]
   b45a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45aa:	4628      	mov	r0, r5
}
   b45ac:	b002      	add	sp, #8
   b45ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b45b2:	4718      	bx	r3

000b45b4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b45b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b45b8:	461d      	mov	r5, r3
    startWrite();
   b45ba:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b45bc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b45c0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b45c2:	4604      	mov	r4, r0
   b45c4:	4617      	mov	r7, r2
   b45c6:	460e      	mov	r6, r1
    startWrite();
   b45c8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b45ca:	e9cd 7800 	strd	r7, r8, [sp]
   b45ce:	6822      	ldr	r2, [r4, #0]
   b45d0:	1e6b      	subs	r3, r5, #1
   b45d2:	4433      	add	r3, r6
   b45d4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b45d6:	4620      	mov	r0, r4
   b45d8:	b21b      	sxth	r3, r3
   b45da:	463a      	mov	r2, r7
   b45dc:	4631      	mov	r1, r6
   b45de:	47a8      	blx	r5
    endWrite();
   b45e0:	6823      	ldr	r3, [r4, #0]
   b45e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45e4:	4620      	mov	r0, r4
}
   b45e6:	b002      	add	sp, #8
   b45e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b45ec:	4718      	bx	r3

000b45ee <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b45ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b45f2:	461e      	mov	r6, r3
    startWrite();
   b45f4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b45f6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b45fa:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b45fc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4600:	460c      	mov	r4, r1
   b4602:	4605      	mov	r5, r0
   b4604:	4617      	mov	r7, r2
    startWrite();
   b4606:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4608:	4426      	add	r6, r4
   b460a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b460c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b460e:	da0b      	bge.n	b4628 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4610:	f8cd 8000 	str.w	r8, [sp]
   b4614:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4618:	4621      	mov	r1, r4
   b461a:	464b      	mov	r3, r9
   b461c:	463a      	mov	r2, r7
   b461e:	4628      	mov	r0, r5
   b4620:	3401      	adds	r4, #1
   b4622:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4624:	b224      	sxth	r4, r4
   b4626:	e7f0      	b.n	b460a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b462a:	4628      	mov	r0, r5
}
   b462c:	b002      	add	sp, #8
   b462e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4632:	4718      	bx	r3

000b4634 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4634:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4636:	6802      	ldr	r2, [r0, #0]
   b4638:	9101      	str	r1, [sp, #4]
   b463a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b463e:	9100      	str	r1, [sp, #0]
   b4640:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4642:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4646:	2200      	movs	r2, #0
   b4648:	4611      	mov	r1, r2
   b464a:	47a0      	blx	r4
}
   b464c:	b002      	add	sp, #8
   b464e:	bd10      	pop	{r4, pc}

000b4650 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4654:	4299      	cmp	r1, r3
        uint16_t color) {
   b4656:	4616      	mov	r6, r2
   b4658:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b465c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4660:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4662:	4680      	mov	r8, r0
   b4664:	460d      	mov	r5, r1
   b4666:	461c      	mov	r4, r3
    if(x0 == x1){
   b4668:	d113      	bne.n	b4692 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b466a:	42be      	cmp	r6, r7
   b466c:	bfc8      	it	gt
   b466e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4670:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4674:	bfc4      	itt	gt
   b4676:	463e      	movgt	r6, r7
   b4678:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b467a:	1c7b      	adds	r3, r7, #1
   b467c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b467e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4680:	b21b      	sxth	r3, r3
   b4682:	4632      	mov	r2, r6
   b4684:	4629      	mov	r1, r5
   b4686:	4640      	mov	r0, r8
   b4688:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b468a:	b003      	add	sp, #12
   b468c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4690:	4760      	bx	ip
    } else if(y0 == y1){
   b4692:	42be      	cmp	r6, r7
   b4694:	d10a      	bne.n	b46ac <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4696:	4299      	cmp	r1, r3
   b4698:	bfc2      	ittt	gt
   b469a:	460b      	movgt	r3, r1
   b469c:	4625      	movgt	r5, r4
   b469e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b46a0:	1c63      	adds	r3, r4, #1
   b46a2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b46a6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b46a8:	1b5b      	subs	r3, r3, r5
   b46aa:	e7e9      	b.n	b4680 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b46ac:	6953      	ldr	r3, [r2, #20]
   b46ae:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b46b0:	e9cd 7900 	strd	r7, r9, [sp]
   b46b4:	f8d8 3000 	ldr.w	r3, [r8]
   b46b8:	4640      	mov	r0, r8
   b46ba:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b46bc:	4632      	mov	r2, r6
   b46be:	4623      	mov	r3, r4
   b46c0:	4629      	mov	r1, r5
   b46c2:	47b8      	blx	r7
        endWrite();
   b46c4:	f8d8 3000 	ldr.w	r3, [r8]
   b46c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46ca:	4640      	mov	r0, r8
}
   b46cc:	b003      	add	sp, #12
   b46ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b46d2:	4718      	bx	r3

000b46d4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b46d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b46d8:	461d      	mov	r5, r3
    startWrite();
   b46da:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b46dc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b46e0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b46e2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b46e6:	4604      	mov	r4, r0
   b46e8:	460f      	mov	r7, r1
   b46ea:	4616      	mov	r6, r2
    startWrite();
   b46ec:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b46ee:	6823      	ldr	r3, [r4, #0]
   b46f0:	f8cd 8000 	str.w	r8, [sp]
   b46f4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b46f8:	4632      	mov	r2, r6
   b46fa:	462b      	mov	r3, r5
   b46fc:	4639      	mov	r1, r7
   b46fe:	4620      	mov	r0, r4
   b4700:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4702:	6823      	ldr	r3, [r4, #0]
   b4704:	f8cd 8000 	str.w	r8, [sp]
   b4708:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b470c:	4432      	add	r2, r6
   b470e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4712:	4639      	mov	r1, r7
   b4714:	462b      	mov	r3, r5
   b4716:	4620      	mov	r0, r4
   b4718:	b212      	sxth	r2, r2
   b471a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b471c:	6823      	ldr	r3, [r4, #0]
   b471e:	f8cd 8000 	str.w	r8, [sp]
   b4722:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4726:	4632      	mov	r2, r6
   b4728:	464b      	mov	r3, r9
   b472a:	4639      	mov	r1, r7
   b472c:	4620      	mov	r0, r4
   b472e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4730:	1e6b      	subs	r3, r5, #1
   b4732:	19d9      	adds	r1, r3, r7
   b4734:	6823      	ldr	r3, [r4, #0]
   b4736:	f8cd 8000 	str.w	r8, [sp]
   b473a:	6a1d      	ldr	r5, [r3, #32]
   b473c:	4620      	mov	r0, r4
   b473e:	464b      	mov	r3, r9
   b4740:	4632      	mov	r2, r6
   b4742:	b209      	sxth	r1, r1
   b4744:	47a8      	blx	r5
    endWrite();
   b4746:	6823      	ldr	r3, [r4, #0]
   b4748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b474a:	4620      	mov	r0, r4
}
   b474c:	b002      	add	sp, #8
   b474e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4752:	4718      	bx	r3

000b4754 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4754:	4770      	bx	lr

000b4756 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4756:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b475a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b475e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4760:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4762:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4766:	bf59      	ittee	pl
   b4768:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b476a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b476c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b476e:	81c3      	strhmi	r3, [r0, #14]
}
   b4770:	4770      	bx	lr
	...

000b4774 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4774:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4776:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4778:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b477a:	4a07      	ldr	r2, [pc, #28]	; (b4798 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b477c:	4d07      	ldr	r5, [pc, #28]	; (b479c <_ZN12Adafruit_GFXC1Ess+0x28>)
   b477e:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b4780:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4782:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4788:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b478c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b478e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4790:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4792:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4794:	6204      	str	r4, [r0, #32]
}
   b4796:	bd30      	pop	{r4, r5, pc}
   b4798:	01000101 	.word	0x01000101
   b479c:	000b8af8 	.word	0x000b8af8

000b47a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b47a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47a4:	b089      	sub	sp, #36	; 0x24
   b47a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b47aa:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b47ac:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b47b0:	9304      	str	r3, [sp, #16]
   b47b2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b47b6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b47b8:	9305      	str	r3, [sp, #20]
   b47ba:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b47be:	4604      	mov	r4, r0
    startWrite();
   b47c0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b47c2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b47c6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b47ca:	bf48      	it	mi
   b47cc:	f108 020e 	addmi.w	r2, r8, #14
   b47d0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b47d4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b47d6:	4635      	mov	r5, r6
   b47d8:	9b03      	ldr	r3, [sp, #12]
   b47da:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b47dc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b47e0:	189a      	adds	r2, r3, r2
   b47e2:	9b05      	ldr	r3, [sp, #20]
   b47e4:	428b      	cmp	r3, r1
   b47e6:	b212      	sxth	r2, r2
   b47e8:	dd27      	ble.n	b483a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b47ea:	9b04      	ldr	r3, [sp, #16]
   b47ec:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b47ee:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b47f2:	9306      	str	r3, [sp, #24]
   b47f4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b47f8:	4580      	cmp	r8, r0
   b47fa:	fa1f f189 	uxth.w	r1, r9
   b47fe:	dd17      	ble.n	b4830 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4800:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4802:	bf05      	ittet	eq
   b4804:	9b06      	ldreq	r3, [sp, #24]
   b4806:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4808:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b480a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b480c:	bf18      	it	ne
   b480e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4810:	062b      	lsls	r3, r5, #24
   b4812:	d50a      	bpl.n	b482a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4814:	9b02      	ldr	r3, [sp, #8]
   b4816:	6820      	ldr	r0, [r4, #0]
   b4818:	9207      	str	r2, [sp, #28]
   b481a:	4419      	add	r1, r3
   b481c:	6983      	ldr	r3, [r0, #24]
   b481e:	b209      	sxth	r1, r1
   b4820:	461f      	mov	r7, r3
   b4822:	4620      	mov	r0, r4
   b4824:	4653      	mov	r3, sl
   b4826:	47b8      	blx	r7
   b4828:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b482a:	f109 0901 	add.w	r9, r9, #1
   b482e:	e7e1      	b.n	b47f4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4830:	9b01      	ldr	r3, [sp, #4]
   b4832:	3301      	adds	r3, #1
   b4834:	9301      	str	r3, [sp, #4]
   b4836:	445e      	add	r6, fp
   b4838:	e7ce      	b.n	b47d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b483a:	6823      	ldr	r3, [r4, #0]
   b483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b483e:	4620      	mov	r0, r4
}
   b4840:	b009      	add	sp, #36	; 0x24
   b4842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b4846:	4718      	bx	r3

000b4848 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b484c:	ed2d 8b02 	vpush	{d8}
   b4850:	b091      	sub	sp, #68	; 0x44
   b4852:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4854:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4856:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b485a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b485e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4862:	9103      	str	r1, [sp, #12]
   b4864:	461f      	mov	r7, r3
   b4866:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b486a:	9304      	str	r3, [sp, #16]
   b486c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b486e:	2a00      	cmp	r2, #0
   b4870:	f040 80c5 	bne.w	b49fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4874:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4878:	428b      	cmp	r3, r1
   b487a:	f340 814c 	ble.w	b4b16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b487e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4882:	42b3      	cmp	r3, r6
   b4884:	f340 8147 	ble.w	b4b16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4888:	2306      	movs	r3, #6
   b488a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b488e:	2b00      	cmp	r3, #0
   b4890:	f340 8141 	ble.w	b4b16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4894:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4898:	2b00      	cmp	r3, #0
   b489a:	f340 813c 	ble.w	b4b16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b489e:	7f03      	ldrb	r3, [r0, #28]
   b48a0:	b91b      	cbnz	r3, b48aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b48a2:	2faf      	cmp	r7, #175	; 0xaf
   b48a4:	bf84      	itt	hi
   b48a6:	3701      	addhi	r7, #1
   b48a8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b48aa:	f8db 3000 	ldr.w	r3, [fp]
   b48ae:	4658      	mov	r0, fp
   b48b0:	695b      	ldr	r3, [r3, #20]
   b48b2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b48b4:	2205      	movs	r2, #5
   b48b6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b48b8:	2200      	movs	r2, #0
   b48ba:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b48bc:	4a98      	ldr	r2, [pc, #608]	; (b4b20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b48be:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b48c2:	18d3      	adds	r3, r2, r3
   b48c4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b48c6:	b2b3      	uxth	r3, r6
   b48c8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b48ca:	9a05      	ldr	r2, [sp, #20]
   b48cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b48ce:	5c9b      	ldrb	r3, [r3, r2]
   b48d0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b48d2:	b2ab      	uxth	r3, r5
   b48d4:	930b      	str	r3, [sp, #44]	; 0x2c
   b48d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b48da:	9308      	str	r3, [sp, #32]
   b48dc:	9b03      	ldr	r3, [sp, #12]
   b48de:	fb02 f905 	mul.w	r9, r2, r5
   b48e2:	fa19 f983 	uxtah	r9, r9, r3
   b48e6:	fa0f f389 	sxth.w	r3, r9
   b48ea:	ee08 3a10 	vmov	s16, r3
   b48ee:	2308      	movs	r3, #8
   b48f0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b48f2:	9b03      	ldr	r3, [sp, #12]
   b48f4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b48f8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b48fc:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4900:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4902:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4906:	07d2      	lsls	r2, r2, #31
   b4908:	d552      	bpl.n	b49b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b490a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b490c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4910:	d13e      	bne.n	b4990 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4912:	2c01      	cmp	r4, #1
   b4914:	d13c      	bne.n	b4990 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4916:	699b      	ldr	r3, [r3, #24]
   b4918:	9906      	ldr	r1, [sp, #24]
   b491a:	461f      	mov	r7, r3
   b491c:	9b04      	ldr	r3, [sp, #16]
   b491e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4920:	b212      	sxth	r2, r2
   b4922:	4651      	mov	r1, sl
   b4924:	4658      	mov	r0, fp
   b4926:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4928:	f109 0301 	add.w	r3, r9, #1
   b492c:	fa4f f983 	sxtb.w	r9, r3
   b4930:	9b07      	ldr	r3, [sp, #28]
   b4932:	085b      	lsrs	r3, r3, #1
   b4934:	9307      	str	r3, [sp, #28]
   b4936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4938:	3b01      	subs	r3, #1
   b493a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b493e:	930a      	str	r3, [sp, #40]	; 0x28
   b4940:	d1de      	bne.n	b4900 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4942:	9f05      	ldr	r7, [sp, #20]
   b4944:	3701      	adds	r7, #1
   b4946:	b27b      	sxtb	r3, r7
   b4948:	9305      	str	r3, [sp, #20]
   b494a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b494c:	3b01      	subs	r3, #1
   b494e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4952:	9309      	str	r3, [sp, #36]	; 0x24
   b4954:	d1b9      	bne.n	b48ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4956:	9b04      	ldr	r3, [sp, #16]
   b4958:	4543      	cmp	r3, r8
   b495a:	d00f      	beq.n	b497c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b495c:	2d01      	cmp	r5, #1
   b495e:	f8db 3000 	ldr.w	r3, [fp]
   b4962:	d13b      	bne.n	b49dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4964:	2c01      	cmp	r4, #1
   b4966:	d139      	bne.n	b49dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4968:	9908      	ldr	r1, [sp, #32]
   b496a:	f8cd 8000 	str.w	r8, [sp]
   b496e:	3105      	adds	r1, #5
   b4970:	6a1c      	ldr	r4, [r3, #32]
   b4972:	4632      	mov	r2, r6
   b4974:	2308      	movs	r3, #8
   b4976:	b209      	sxth	r1, r1
   b4978:	4658      	mov	r0, fp
   b497a:	47a0      	blx	r4
        endWrite();
   b497c:	f8db 3000 	ldr.w	r3, [fp]
   b4980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4982:	4658      	mov	r0, fp
}
   b4984:	b011      	add	sp, #68	; 0x44
   b4986:	ecbd 8b02 	vpop	{d8}
   b498a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b498e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4990:	9906      	ldr	r1, [sp, #24]
   b4992:	fb14 f202 	smulbb	r2, r4, r2
   b4996:	440a      	add	r2, r1
   b4998:	9904      	ldr	r1, [sp, #16]
   b499a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b499c:	9400      	str	r4, [sp, #0]
   b499e:	69db      	ldr	r3, [r3, #28]
   b49a0:	ee18 1a10 	vmov	r1, s16
   b49a4:	461f      	mov	r7, r3
   b49a6:	b212      	sxth	r2, r2
   b49a8:	462b      	mov	r3, r5
   b49aa:	4658      	mov	r0, fp
   b49ac:	47b8      	blx	r7
   b49ae:	e7bb      	b.n	b4928 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b49b0:	9a04      	ldr	r2, [sp, #16]
   b49b2:	4542      	cmp	r2, r8
   b49b4:	d0b8      	beq.n	b4928 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b49b6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b49b8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b49bc:	d107      	bne.n	b49ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b49be:	2c01      	cmp	r4, #1
   b49c0:	d105      	bne.n	b49ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b49c2:	699b      	ldr	r3, [r3, #24]
   b49c4:	9906      	ldr	r1, [sp, #24]
   b49c6:	461f      	mov	r7, r3
   b49c8:	440a      	add	r2, r1
   b49ca:	4643      	mov	r3, r8
   b49cc:	e7a8      	b.n	b4920 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b49ce:	9906      	ldr	r1, [sp, #24]
   b49d0:	f8cd 8004 	str.w	r8, [sp, #4]
   b49d4:	fb14 f202 	smulbb	r2, r4, r2
   b49d8:	440a      	add	r2, r1
   b49da:	e7df      	b.n	b499c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b49dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b49de:	f8cd 8004 	str.w	r8, [sp, #4]
   b49e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b49e6:	9a08      	ldr	r2, [sp, #32]
   b49e8:	00e4      	lsls	r4, r4, #3
   b49ea:	440a      	add	r2, r1
   b49ec:	4611      	mov	r1, r2
   b49ee:	9400      	str	r4, [sp, #0]
   b49f0:	69dc      	ldr	r4, [r3, #28]
   b49f2:	4632      	mov	r2, r6
   b49f4:	462b      	mov	r3, r5
   b49f6:	b209      	sxth	r1, r1
   b49f8:	4658      	mov	r0, fp
   b49fa:	47a0      	blx	r4
        endWrite();
   b49fc:	e7be      	b.n	b497c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b49fe:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4a00:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4a02:	6812      	ldr	r2, [r2, #0]
   b4a04:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4a06:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4a08:	b2ff      	uxtb	r7, r7
   b4a0a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4a0e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4a12:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4a14:	789a      	ldrb	r2, [r3, #2]
   b4a16:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4a18:	78da      	ldrb	r2, [r3, #3]
   b4a1a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4a1c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4a1e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4a22:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4a26:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4a28:	d801      	bhi.n	b4a2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4a2a:	2c01      	cmp	r4, #1
   b4a2c:	d957      	bls.n	b4ade <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4a2e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4a32:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4a34:	fa0f f38a 	sxth.w	r3, sl
   b4a38:	9307      	str	r3, [sp, #28]
        startWrite();
   b4a3a:	f8db 3000 	ldr.w	r3, [fp]
   b4a3e:	4658      	mov	r0, fp
   b4a40:	695b      	ldr	r3, [r3, #20]
   b4a42:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a44:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4a46:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a4a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a4c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4a50:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4a52:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a54:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4a58:	429f      	cmp	r7, r3
   b4a5a:	d28f      	bcs.n	b497c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a5c:	9b07      	ldr	r3, [sp, #28]
   b4a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4a60:	443b      	add	r3, r7
   b4a62:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4a66:	2200      	movs	r2, #0
   b4a68:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a6c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a6e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a72:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a76:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a7a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4a7e:	9905      	ldr	r1, [sp, #20]
   b4a80:	4291      	cmp	r1, r2
   b4a82:	d241      	bcs.n	b4b08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4a84:	1c5a      	adds	r2, r3, #1
   b4a86:	b2d2      	uxtb	r2, r2
   b4a88:	075b      	lsls	r3, r3, #29
   b4a8a:	920d      	str	r2, [sp, #52]	; 0x34
   b4a8c:	d107      	bne.n	b4a9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4a8e:	9b06      	ldr	r3, [sp, #24]
   b4a90:	9906      	ldr	r1, [sp, #24]
   b4a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4a94:	3301      	adds	r3, #1
   b4a96:	b29b      	uxth	r3, r3
   b4a98:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4a9c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4a9e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4aa2:	d012      	beq.n	b4aca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4aa4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4aa6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4aaa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4aae:	d11a      	bne.n	b4ae6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4ab0:	2c01      	cmp	r4, #1
   b4ab2:	d118      	bne.n	b4ae6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4ab6:	699b      	ldr	r3, [r3, #24]
   b4ab8:	4411      	add	r1, r2
   b4aba:	9a05      	ldr	r2, [sp, #20]
   b4abc:	4411      	add	r1, r2
   b4abe:	461e      	mov	r6, r3
   b4ac0:	4652      	mov	r2, sl
   b4ac2:	9b04      	ldr	r3, [sp, #16]
   b4ac4:	b209      	sxth	r1, r1
   b4ac6:	4658      	mov	r0, fp
   b4ac8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4aca:	9e05      	ldr	r6, [sp, #20]
   b4acc:	3601      	adds	r6, #1
   b4ace:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4ad0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4ad4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4ad6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4adc:	e7ce      	b.n	b4a7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4ade:	2300      	movs	r3, #0
   b4ae0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4ae4:	e7a9      	b.n	b4a3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4ae6:	9805      	ldr	r0, [sp, #20]
   b4ae8:	9a08      	ldr	r2, [sp, #32]
   b4aea:	4402      	add	r2, r0
   b4aec:	fb02 1105 	mla	r1, r2, r5, r1
   b4af0:	9a04      	ldr	r2, [sp, #16]
   b4af2:	e9cd 4200 	strd	r4, r2, [sp]
   b4af6:	69db      	ldr	r3, [r3, #28]
   b4af8:	ee18 2a10 	vmov	r2, s16
   b4afc:	461e      	mov	r6, r3
   b4afe:	b209      	sxth	r1, r1
   b4b00:	462b      	mov	r3, r5
   b4b02:	4658      	mov	r0, fp
   b4b04:	47b0      	blx	r6
   b4b06:	e7e0      	b.n	b4aca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4b0a:	3701      	adds	r7, #1
   b4b0c:	4498      	add	r8, r3
   b4b0e:	fa5f f888 	uxtb.w	r8, r8
   b4b12:	b2ff      	uxtb	r7, r7
   b4b14:	e79f      	b.n	b4a56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4b16:	b011      	add	sp, #68	; 0x44
   b4b18:	ecbd 8b02 	vpop	{d8}
   b4b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b20:	000b85ee 	.word	0x000b85ee

000b4b24 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4b26:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4b28:	b085      	sub	sp, #20
   b4b2a:	4604      	mov	r4, r0
   b4b2c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4b2e:	2a00      	cmp	r2, #0
   b4b30:	d134      	bne.n	b4b9c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4b32:	290a      	cmp	r1, #10
   b4b34:	d108      	bne.n	b4b48 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4b36:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4b38:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4b3a:	7e42      	ldrb	r2, [r0, #25]
   b4b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4b40:	8263      	strh	r3, [r4, #18]
}
   b4b42:	2001      	movs	r0, #1
   b4b44:	b005      	add	sp, #20
   b4b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4b48:	290d      	cmp	r1, #13
   b4b4a:	d0fa      	beq.n	b4b42 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4b4c:	7ee1      	ldrb	r1, [r4, #27]
   b4b4e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4b50:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4b52:	b171      	cbz	r1, b4b72 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4b54:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4b58:	2106      	movs	r1, #6
   b4b5a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4b5e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4b62:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4b64:	bfc1      	itttt	gt
   b4b66:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4b6a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4b6c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4b70:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4b72:	8ae2      	ldrh	r2, [r4, #22]
   b4b74:	9201      	str	r2, [sp, #4]
   b4b76:	8aa2      	ldrh	r2, [r4, #20]
   b4b78:	9200      	str	r2, [sp, #0]
   b4b7a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4b7e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4b82:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4b86:	4620      	mov	r0, r4
   b4b88:	f7ff fe5e 	bl	b4848 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4b8c:	7e23      	ldrb	r3, [r4, #24]
   b4b8e:	8a22      	ldrh	r2, [r4, #16]
   b4b90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4b94:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4b98:	8223      	strh	r3, [r4, #16]
   b4b9a:	e7d2      	b.n	b4b42 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4b9c:	290a      	cmp	r1, #10
   b4b9e:	d107      	bne.n	b4bb0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4ba0:	2300      	movs	r3, #0
   b4ba2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4ba4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4ba6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4ba8:	8a43      	ldrh	r3, [r0, #18]
   b4baa:	fb01 3302 	mla	r3, r1, r2, r3
   b4bae:	e7c7      	b.n	b4b40 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4bb0:	290d      	cmp	r1, #13
   b4bb2:	d0c6      	beq.n	b4b42 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4bb4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4bb6:	42a9      	cmp	r1, r5
   b4bb8:	d3c3      	bcc.n	b4b42 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4bba:	7a51      	ldrb	r1, [r2, #9]
   b4bbc:	4299      	cmp	r1, r3
   b4bbe:	d3c0      	bcc.n	b4b42 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4bc0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4bc2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4bc4:	b2ed      	uxtb	r5, r5
   b4bc6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4bca:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4bcc:	b328      	cbz	r0, b4c1a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4bce:	78e9      	ldrb	r1, [r5, #3]
   b4bd0:	b319      	cbz	r1, b4c1a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4bd2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4bd4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4bd6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4bd8:	b191      	cbz	r1, b4c00 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4bda:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4bde:	4408      	add	r0, r1
   b4be0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4be4:	fb06 1100 	mla	r1, r6, r0, r1
   b4be8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4bec:	4281      	cmp	r1, r0
   b4bee:	dd07      	ble.n	b4c00 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4bf0:	2000      	movs	r0, #0
   b4bf2:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4bf4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4bf8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4bfa:	fb02 1207 	mla	r2, r2, r7, r1
   b4bfe:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4c00:	8ae2      	ldrh	r2, [r4, #22]
   b4c02:	9201      	str	r2, [sp, #4]
   b4c04:	8aa2      	ldrh	r2, [r4, #20]
   b4c06:	9200      	str	r2, [sp, #0]
   b4c08:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4c0c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4c10:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4c14:	4620      	mov	r0, r4
   b4c16:	f7ff fe17 	bl	b4848 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4c1a:	7929      	ldrb	r1, [r5, #4]
   b4c1c:	7e22      	ldrb	r2, [r4, #24]
   b4c1e:	8a23      	ldrh	r3, [r4, #16]
   b4c20:	fb01 3302 	mla	r3, r1, r2, r3
   b4c24:	e7b8      	b.n	b4b98 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4c26 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4c26:	2901      	cmp	r1, #1
   b4c28:	bf38      	it	cc
   b4c2a:	2101      	movcc	r1, #1
   b4c2c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4c2e:	7641      	strb	r1, [r0, #25]
}
   b4c30:	4770      	bx	lr

000b4c32 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4c32:	4770      	bx	lr

000b4c34 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4c34:	b510      	push	{r4, lr}
  }
   b4c36:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4c38:	4604      	mov	r4, r0
  }
   b4c3a:	f7ff fa2e 	bl	b409a <_ZdlPvj>
   b4c3e:	4620      	mov	r0, r4
   b4c40:	bd10      	pop	{r4, pc}

000b4c42 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c42:	b40e      	push	{r1, r2, r3}
   b4c44:	b503      	push	{r0, r1, lr}
   b4c46:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4c48:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c4a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4c4e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4c50:	f002 fcdd 	bl	b760e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4c54:	b002      	add	sp, #8
   b4c56:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c5a:	b003      	add	sp, #12
   b4c5c:	4770      	bx	lr
	...

000b4c60 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4c60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4c62:	4604      	mov	r4, r0
   b4c64:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4c66:	7922      	ldrb	r2, [r4, #4]
   b4c68:	68a3      	ldr	r3, [r4, #8]
   b4c6a:	b132      	cbz	r2, b4c7a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4c6c:	b9a3      	cbnz	r3, b4c98 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4c6e:	490b      	ldr	r1, [pc, #44]	; (b4c9c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4c70:	b002      	add	sp, #8
   b4c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4c76:	f002 bc8f 	b.w	b7598 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4c7a:	4a09      	ldr	r2, [pc, #36]	; (b4ca0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4c7c:	7b26      	ldrb	r6, [r4, #12]
   b4c7e:	4d09      	ldr	r5, [pc, #36]	; (b4ca4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4c80:	4909      	ldr	r1, [pc, #36]	; (b4ca8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4c82:	7b64      	ldrb	r4, [r4, #13]
   b4c84:	2e01      	cmp	r6, #1
   b4c86:	bf18      	it	ne
   b4c88:	4629      	movne	r1, r5
   b4c8a:	e9cd 1400 	strd	r1, r4, [sp]
   b4c8e:	4907      	ldr	r1, [pc, #28]	; (b4cac <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4c90:	f7ff ffd7 	bl	b4c42 <_ZN5Print6printfEPKcz>
  }
   b4c94:	b002      	add	sp, #8
   b4c96:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4c98:	4a05      	ldr	r2, [pc, #20]	; (b4cb0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4c9a:	e7ef      	b.n	b4c7c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4c9c:	000b8b59 	.word	0x000b8b59
   b4ca0:	000b855e 	.word	0x000b855e
   b4ca4:	000b8b55 	.word	0x000b8b55
   b4ca8:	000b8b51 	.word	0x000b8b51
   b4cac:	000b8b6f 	.word	0x000b8b6f
   b4cb0:	000b8b48 	.word	0x000b8b48

000b4cb4 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4cb4:	b510      	push	{r4, lr}
   b4cb6:	4b04      	ldr	r3, [pc, #16]	; (b4cc8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4cb8:	6003      	str	r3, [r0, #0]
   b4cba:	4604      	mov	r4, r0
  if(buffer) {
   b4cbc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4cbe:	b108      	cbz	r0, b4cc4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4cc0:	f001 f836 	bl	b5d30 <free>
    buffer = NULL;
  }
}
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	bd10      	pop	{r4, pc}
   b4cc8:	000b9048 	.word	0x000b9048

000b4ccc <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4ccc:	b510      	push	{r4, lr}
   b4cce:	4604      	mov	r4, r0
}
   b4cd0:	f7ff fff0 	bl	b4cb4 <_ZN16Adafruit_SSD1306D1Ev>
   b4cd4:	4620      	mov	r0, r4
   b4cd6:	2150      	movs	r1, #80	; 0x50
   b4cd8:	f7ff f9df 	bl	b409a <_ZdlPvj>
   b4cdc:	4620      	mov	r0, r4
   b4cde:	bd10      	pop	{r4, pc}

000b4ce0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4ce0:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4ce2:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4ce4:	db4b      	blt.n	b4d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4ce6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4cea:	428c      	cmp	r4, r1
   b4cec:	dd47      	ble.n	b4d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4cee:	2a00      	cmp	r2, #0
   b4cf0:	db45      	blt.n	b4d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4cf2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4cf6:	4294      	cmp	r4, r2
   b4cf8:	dd41      	ble.n	b4d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4cfa:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4cfc:	2c02      	cmp	r4, #2
   b4cfe:	d01f      	beq.n	b4d40 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4d00:	2c03      	cmp	r4, #3
   b4d02:	d026      	beq.n	b4d52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4d04:	2c01      	cmp	r4, #1
   b4d06:	d104      	bne.n	b4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4d08:	8904      	ldrh	r4, [r0, #8]
   b4d0a:	43d2      	mvns	r2, r2
   b4d0c:	4414      	add	r4, r2
      break;
   b4d0e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4d10:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4d12:	2b01      	cmp	r3, #1
   b4d14:	d023      	beq.n	b4d5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4d16:	2b02      	cmp	r3, #2
   b4d18:	d032      	beq.n	b4d80 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4d1a:	bb83      	cbnz	r3, b4d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4d1c:	2a00      	cmp	r2, #0
   b4d1e:	4613      	mov	r3, r2
   b4d20:	8904      	ldrh	r4, [r0, #8]
   b4d22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4d24:	bfb8      	it	lt
   b4d26:	1dd3      	addlt	r3, r2, #7
   b4d28:	10db      	asrs	r3, r3, #3
   b4d2a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4d2e:	f002 0207 	and.w	r2, r2, #7
   b4d32:	2301      	movs	r3, #1
   b4d34:	4093      	lsls	r3, r2
   b4d36:	5c42      	ldrb	r2, [r0, r1]
   b4d38:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4d3c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4d3e:	e01e      	b.n	b4d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4d40:	8904      	ldrh	r4, [r0, #8]
   b4d42:	3c01      	subs	r4, #1
   b4d44:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4d46:	8944      	ldrh	r4, [r0, #10]
   b4d48:	43d2      	mvns	r2, r2
   b4d4a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4d4c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4d4e:	b212      	sxth	r2, r2
      break;
   b4d50:	e7df      	b.n	b4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4d52:	8944      	ldrh	r4, [r0, #10]
   b4d54:	3c01      	subs	r4, #1
   b4d56:	1a64      	subs	r4, r4, r1
      break;
   b4d58:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4d5a:	b222      	sxth	r2, r4
      break;
   b4d5c:	e7d9      	b.n	b4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4d5e:	2a00      	cmp	r2, #0
   b4d60:	8904      	ldrh	r4, [r0, #8]
   b4d62:	4613      	mov	r3, r2
   b4d64:	bfb8      	it	lt
   b4d66:	1dd3      	addlt	r3, r2, #7
   b4d68:	10db      	asrs	r3, r3, #3
   b4d6a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4d6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4d70:	f002 0007 	and.w	r0, r2, #7
   b4d74:	2201      	movs	r2, #1
   b4d76:	4082      	lsls	r2, r0
   b4d78:	5c58      	ldrb	r0, [r3, r1]
   b4d7a:	4302      	orrs	r2, r0
   b4d7c:	545a      	strb	r2, [r3, r1]
}
   b4d7e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4d80:	2a00      	cmp	r2, #0
   b4d82:	4613      	mov	r3, r2
   b4d84:	8904      	ldrh	r4, [r0, #8]
   b4d86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4d88:	bfb8      	it	lt
   b4d8a:	1dd3      	addlt	r3, r2, #7
   b4d8c:	10db      	asrs	r3, r3, #3
   b4d8e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4d92:	f002 0207 	and.w	r2, r2, #7
   b4d96:	2301      	movs	r3, #1
   b4d98:	fa03 f202 	lsl.w	r2, r3, r2
   b4d9c:	5c43      	ldrb	r3, [r0, r1]
   b4d9e:	405a      	eors	r2, r3
   b4da0:	e7cc      	b.n	b4d3c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4da4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4da4:	b570      	push	{r4, r5, r6, lr}
   b4da6:	4604      	mov	r4, r0
   b4da8:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4daa:	2600      	movs	r6, #0
   b4dac:	f7ff fce2 	bl	b4774 <_ZN12Adafruit_GFXC1Ess>
   b4db0:	4b11      	ldr	r3, [pc, #68]	; (b4df8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4db2:	6023      	str	r3, [r4, #0]
   b4db4:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4db6:	b915      	cbnz	r5, b4dbe <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4db8:	f003 f89a 	bl	b7ef0 <_Z19__fetch_global_Wirev>
   b4dbc:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4dbe:	23ff      	movs	r3, #255	; 0xff
   b4dc0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4dc4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4dc8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4dcc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4dd0:	4b0a      	ldr	r3, [pc, #40]	; (b4dfc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4dd2:	63a3      	str	r3, [r4, #56]	; 0x38
   b4dd4:	2301      	movs	r3, #1
   b4dd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4dda:	9b05      	ldr	r3, [sp, #20]
   b4ddc:	64a3      	str	r3, [r4, #72]	; 0x48
   b4dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4de2:	9b06      	ldr	r3, [sp, #24]
   b4de4:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4de6:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4dea:	6426      	str	r6, [r4, #64]	; 0x40
   b4dec:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4df0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4df2:	4620      	mov	r0, r4
   b4df4:	bd70      	pop	{r4, r5, r6, pc}
   b4df6:	bf00      	nop
   b4df8:	000b9048 	.word	0x000b9048
   b4dfc:	000b8b94 	.word	0x000b8b94

000b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e02:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4e04:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4e06:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4e08:	b190      	cbz	r0, b4e30 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4e0a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4e0e:	f002 fa5f 	bl	b72d0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4e12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e14:	6803      	ldr	r3, [r0, #0]
   b4e16:	2100      	movs	r1, #0
   b4e18:	689b      	ldr	r3, [r3, #8]
   b4e1a:	4798      	blx	r3
    WIRE_WRITE(c);
   b4e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e1e:	6803      	ldr	r3, [r0, #0]
   b4e20:	4629      	mov	r1, r5
   b4e22:	689b      	ldr	r3, [r3, #8]
   b4e24:	4798      	blx	r3
    wire->endTransmission();
   b4e26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4e28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4e2c:	f002 ba57 	b.w	b72de <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4e30:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4e34:	4601      	mov	r1, r0
   b4e36:	b298      	uxth	r0, r3
   b4e38:	f003 f813 	bl	b7e62 <digitalWrite>
  if(spi) {
   b4e3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4e3e:	b120      	cbz	r0, b4e4a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4e40:	4629      	mov	r1, r5
}
   b4e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4e46:	f002 bce9 	b.w	b781c <_ZN8SPIClass8transferEh>
   b4e4a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4e4c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4e4e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4e52:	ea05 0107 	and.w	r1, r5, r7
   b4e56:	b280      	uxth	r0, r0
   b4e58:	f003 f803 	bl	b7e62 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4e5c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4e60:	2101      	movs	r1, #1
   b4e62:	b280      	uxth	r0, r0
   b4e64:	f002 fffd 	bl	b7e62 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4e68:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4e6c:	2100      	movs	r1, #0
   b4e6e:	b280      	uxth	r0, r0
   b4e70:	f002 fff7 	bl	b7e62 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4e74:	3e01      	subs	r6, #1
   b4e76:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4e7a:	d1e8      	bne.n	b4e4e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e7e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4e7e:	b538      	push	{r3, r4, r5, lr}
   b4e80:	4604      	mov	r4, r0
  TRANSACTION_START
   b4e82:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4e84:	460d      	mov	r5, r1
  TRANSACTION_START
   b4e86:	b180      	cbz	r0, b4eaa <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4e88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4e8a:	f002 fa13 	bl	b72b4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4e8e:	2d00      	cmp	r5, #0
   b4e90:	4620      	mov	r0, r4
   b4e92:	bf14      	ite	ne
   b4e94:	21a7      	movne	r1, #167	; 0xa7
   b4e96:	21a6      	moveq	r1, #166	; 0xa6
   b4e98:	f7ff ffb2 	bl	b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4e9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e9e:	b188      	cbz	r0, b4ec4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4ea0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4ea6:	f002 ba05 	b.w	b72b4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4eaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4eac:	b118      	cbz	r0, b4eb6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4eae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4eb2:	f002 fc45 	bl	b7740 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4eb6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4eba:	2100      	movs	r1, #0
   b4ebc:	b280      	uxth	r0, r0
   b4ebe:	f002 ffd0 	bl	b7e62 <digitalWrite>
   b4ec2:	e7e4      	b.n	b4e8e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4ec4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ec8:	2101      	movs	r1, #1
   b4eca:	b280      	uxth	r0, r0
   b4ecc:	f002 ffc9 	bl	b7e62 <digitalWrite>
   b4ed0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4ed2:	b118      	cbz	r0, b4edc <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4ed8:	f002 bc18 	b.w	b770c <_ZN8SPIClass14endTransactionEv>
}
   b4edc:	bd38      	pop	{r3, r4, r5, pc}

000b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4ede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ee2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4ee4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4ee6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4ee8:	188f      	adds	r7, r1, r2
   b4eea:	b340      	cbz	r0, b4f3e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4eec:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4ef0:	f002 f9ee 	bl	b72d0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4ef4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ef6:	6803      	ldr	r3, [r0, #0]
   b4ef8:	2100      	movs	r1, #0
   b4efa:	689b      	ldr	r3, [r3, #8]
   b4efc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4efe:	2601      	movs	r6, #1
    while(n--) {
   b4f00:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4f02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4f04:	d017      	beq.n	b4f36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4f06:	2e1f      	cmp	r6, #31
   b4f08:	d90c      	bls.n	b4f24 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4f0a:	f002 f9e8 	bl	b72de <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4f0e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4f12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f14:	f002 f9dc 	bl	b72d0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4f18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f1a:	6803      	ldr	r3, [r0, #0]
   b4f1c:	2100      	movs	r1, #0
   b4f1e:	689b      	ldr	r3, [r3, #8]
   b4f20:	4798      	blx	r3
        bytesOut = 1;
   b4f22:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4f24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f26:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4f2a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4f2c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4f2e:	689b      	ldr	r3, [r3, #8]
   b4f30:	4798      	blx	r3
      bytesOut++;
   b4f32:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4f34:	e7e4      	b.n	b4f00 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4f36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4f3a:	f002 b9d0 	b.w	b72de <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4f3e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4f42:	4601      	mov	r1, r0
   b4f44:	b298      	uxth	r0, r3
   b4f46:	f002 ff8c 	bl	b7e62 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4f4a:	42bd      	cmp	r5, r7
   b4f4c:	d022      	beq.n	b4f94 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4f50:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4f54:	b118      	cbz	r0, b4f5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4f56:	4649      	mov	r1, r9
   b4f58:	f002 fc60 	bl	b781c <_ZN8SPIClass8transferEh>
   b4f5c:	e7f5      	b.n	b4f4a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4f5e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4f60:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4f64:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4f68:	ea09 0108 	and.w	r1, r9, r8
   b4f6c:	b280      	uxth	r0, r0
   b4f6e:	f002 ff78 	bl	b7e62 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4f72:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f76:	2101      	movs	r1, #1
   b4f78:	b280      	uxth	r0, r0
   b4f7a:	f002 ff72 	bl	b7e62 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4f7e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f82:	2100      	movs	r1, #0
   b4f84:	b280      	uxth	r0, r0
   b4f86:	f002 ff6c 	bl	b7e62 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4f8a:	3e01      	subs	r6, #1
   b4f8c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4f90:	d1e8      	bne.n	b4f64 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4f92:	e7da      	b.n	b4f4a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4f98 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4f98:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4f9c:	1dda      	adds	r2, r3, #7
   b4f9e:	bf48      	it	mi
   b4fa0:	f103 020e 	addmi.w	r2, r3, #14
   b4fa4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4fa8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4faa:	10d2      	asrs	r2, r2, #3
   b4fac:	435a      	muls	r2, r3
   b4fae:	2100      	movs	r1, #0
   b4fb0:	f003 b95c 	b.w	b826c <memset>

000b4fb4 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4fb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4fb8:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4fba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4fbc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4fc0:	4604      	mov	r4, r0
   b4fc2:	460f      	mov	r7, r1
   b4fc4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4fc6:	b1c3      	cbz	r3, b4ffa <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4fc8:	4620      	mov	r0, r4
   b4fca:	f7ff ffe5 	bl	b4f98 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4fce:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4fd2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4fd6:	2820      	cmp	r0, #32
   b4fd8:	dc21      	bgt.n	b501e <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4fda:	2320      	movs	r3, #32
   b4fdc:	2201      	movs	r2, #1
   b4fde:	3820      	subs	r0, #32
   b4fe0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4fe4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4fe8:	2373      	movs	r3, #115	; 0x73
   b4fea:	3973      	subs	r1, #115	; 0x73
   b4fec:	9300      	str	r3, [sp, #0]
   b4fee:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4ff2:	4b89      	ldr	r3, [pc, #548]	; (b5218 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4ff4:	f340 024f 	sbfx	r2, r0, #1, #16
   b4ff8:	e021      	b.n	b503e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4ffa:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4ffe:	1dd8      	adds	r0, r3, #7
   b5000:	bf48      	it	mi
   b5002:	f103 000e 	addmi.w	r0, r3, #14
   b5006:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b500a:	10c0      	asrs	r0, r0, #3
   b500c:	4358      	muls	r0, r3
   b500e:	f000 fe87 	bl	b5d20 <malloc>
   b5012:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5014:	2800      	cmp	r0, #0
   b5016:	d1d7      	bne.n	b4fc8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5018:	b004      	add	sp, #16
   b501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b501e:	3840      	subs	r0, #64	; 0x40
   b5020:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5024:	fa02 f280 	sxtah	r2, r2, r0
   b5028:	2340      	movs	r3, #64	; 0x40
   b502a:	2001      	movs	r0, #1
   b502c:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5030:	2352      	movs	r3, #82	; 0x52
   b5032:	3952      	subs	r1, #82	; 0x52
   b5034:	9300      	str	r3, [sp, #0]
   b5036:	4b79      	ldr	r3, [pc, #484]	; (b521c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5038:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b503c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b503e:	4620      	mov	r0, r4
   b5040:	f341 014f 	sbfx	r1, r1, #1, #16
   b5044:	f7ff fbac 	bl	b47a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5048:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b504a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b504e:	2800      	cmp	r0, #0
   b5050:	d078      	beq.n	b5144 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5052:	2d00      	cmp	r5, #0
   b5054:	d174      	bne.n	b5140 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5056:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b505a:	2b20      	cmp	r3, #32
   b505c:	bf0c      	ite	eq
   b505e:	253c      	moveq	r5, #60	; 0x3c
   b5060:	253d      	movne	r5, #61	; 0x3d
   b5062:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5066:	f1b8 0f00 	cmp.w	r8, #0
   b506a:	d001      	beq.n	b5070 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b506c:	f002 f926 	bl	b72bc <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5070:	b1fe      	cbz	r6, b50b2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5072:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5076:	2800      	cmp	r0, #0
   b5078:	db1b      	blt.n	b50b2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b507a:	2101      	movs	r1, #1
   b507c:	b280      	uxth	r0, r0
   b507e:	f002 fedf 	bl	b7e40 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5082:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5086:	2101      	movs	r1, #1
   b5088:	b280      	uxth	r0, r0
   b508a:	f002 feea 	bl	b7e62 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b508e:	2001      	movs	r0, #1
   b5090:	f000 fe86 	bl	b5da0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5094:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5098:	2100      	movs	r1, #0
   b509a:	b280      	uxth	r0, r0
   b509c:	f002 fee1 	bl	b7e62 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b50a0:	200a      	movs	r0, #10
   b50a2:	f000 fe7d 	bl	b5da0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b50a6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50aa:	2101      	movs	r1, #1
   b50ac:	b280      	uxth	r0, r0
   b50ae:	f002 fed8 	bl	b7e62 <digitalWrite>
  TRANSACTION_START
   b50b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b50b4:	2800      	cmp	r0, #0
   b50b6:	d074      	beq.n	b51a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b50b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b50ba:	f002 f8fb 	bl	b72b4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b50be:	2204      	movs	r2, #4
   b50c0:	4957      	ldr	r1, [pc, #348]	; (b5220 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b50c2:	4620      	mov	r0, r4
   b50c4:	f7ff ff0b 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b50c8:	8961      	ldrh	r1, [r4, #10]
   b50ca:	3901      	subs	r1, #1
   b50cc:	b2c9      	uxtb	r1, r1
   b50ce:	4620      	mov	r0, r4
   b50d0:	f7ff fe96 	bl	b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b50d4:	4953      	ldr	r1, [pc, #332]	; (b5224 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b50d6:	2204      	movs	r2, #4
   b50d8:	4620      	mov	r0, r4
   b50da:	f7ff ff00 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b50de:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b50e2:	2b01      	cmp	r3, #1
   b50e4:	bf0c      	ite	eq
   b50e6:	2110      	moveq	r1, #16
   b50e8:	2114      	movne	r1, #20
   b50ea:	4620      	mov	r0, r4
   b50ec:	f7ff fe88 	bl	b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b50f0:	2204      	movs	r2, #4
   b50f2:	494d      	ldr	r1, [pc, #308]	; (b5228 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b50f4:	4620      	mov	r0, r4
   b50f6:	f7ff fef2 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b50fa:	68a3      	ldr	r3, [r4, #8]
   b50fc:	4a4b      	ldr	r2, [pc, #300]	; (b522c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b50fe:	4293      	cmp	r3, r2
   b5100:	d15c      	bne.n	b51bc <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5102:	494b      	ldr	r1, [pc, #300]	; (b5230 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5104:	2204      	movs	r2, #4
   b5106:	4620      	mov	r0, r4
   b5108:	f7ff fee9 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b510c:	21d9      	movs	r1, #217	; 0xd9
   b510e:	4620      	mov	r0, r4
   b5110:	f7ff fe76 	bl	b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5114:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5118:	2b01      	cmp	r3, #1
   b511a:	bf0c      	ite	eq
   b511c:	2122      	moveq	r1, #34	; 0x22
   b511e:	21f1      	movne	r1, #241	; 0xf1
   b5120:	4620      	mov	r0, r4
   b5122:	f7ff fe6d 	bl	b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5126:	4620      	mov	r0, r4
   b5128:	4942      	ldr	r1, [pc, #264]	; (b5234 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b512a:	2206      	movs	r2, #6
   b512c:	f7ff fed7 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5130:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5132:	2800      	cmp	r0, #0
   b5134:	d063      	beq.n	b51fe <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5136:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5138:	f002 f8bc 	bl	b72b4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b513c:	2001      	movs	r0, #1
   b513e:	e76b      	b.n	b5018 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5140:	b26d      	sxtb	r5, r5
   b5142:	e78e      	b.n	b5062 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5144:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5148:	2101      	movs	r1, #1
   b514a:	b280      	uxth	r0, r0
   b514c:	f002 fe78 	bl	b7e40 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5150:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5154:	2101      	movs	r1, #1
   b5156:	b280      	uxth	r0, r0
   b5158:	f002 fe72 	bl	b7e40 <pinMode>
    SSD1306_DESELECT
   b515c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5160:	2101      	movs	r1, #1
   b5162:	b280      	uxth	r0, r0
   b5164:	f002 fe7d 	bl	b7e62 <digitalWrite>
    if(spi) { // Hardware SPI
   b5168:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b516a:	b13d      	cbz	r5, b517c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b516c:	f1b8 0f00 	cmp.w	r8, #0
   b5170:	f43f af7e 	beq.w	b5070 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5174:	4628      	mov	r0, r5
   b5176:	f002 fab5 	bl	b76e4 <_ZN8SPIClass5beginEv>
   b517a:	e779      	b.n	b5070 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b517c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5180:	2101      	movs	r1, #1
   b5182:	b280      	uxth	r0, r0
   b5184:	f002 fe5c 	bl	b7e40 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5188:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b518c:	2101      	movs	r1, #1
   b518e:	b280      	uxth	r0, r0
   b5190:	f002 fe56 	bl	b7e40 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5194:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5198:	4629      	mov	r1, r5
   b519a:	b280      	uxth	r0, r0
   b519c:	f002 fe61 	bl	b7e62 <digitalWrite>
   b51a0:	e766      	b.n	b5070 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b51a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b51a4:	b118      	cbz	r0, b51ae <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b51a6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b51aa:	f002 fac9 	bl	b7740 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b51ae:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b51b2:	2100      	movs	r1, #0
   b51b4:	b280      	uxth	r0, r0
   b51b6:	f002 fe54 	bl	b7e62 <digitalWrite>
   b51ba:	e780      	b.n	b50be <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b51bc:	4a1e      	ldr	r2, [pc, #120]	; (b5238 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b51be:	4293      	cmp	r3, r2
   b51c0:	d10e      	bne.n	b51e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b51c2:	491e      	ldr	r1, [pc, #120]	; (b523c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b51c4:	2203      	movs	r2, #3
   b51c6:	4620      	mov	r0, r4
   b51c8:	f7ff fe89 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b51cc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b51d0:	2b01      	cmp	r3, #1
   b51d2:	bf0c      	ite	eq
   b51d4:	219f      	moveq	r1, #159	; 0x9f
   b51d6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b51d8:	4620      	mov	r0, r4
   b51da:	f7ff fe11 	bl	b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b51de:	e795      	b.n	b510c <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b51e0:	4a17      	ldr	r2, [pc, #92]	; (b5240 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b51e2:	4293      	cmp	r3, r2
   b51e4:	d192      	bne.n	b510c <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b51e6:	4917      	ldr	r1, [pc, #92]	; (b5244 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b51e8:	2203      	movs	r2, #3
   b51ea:	4620      	mov	r0, r4
   b51ec:	f7ff fe77 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b51f0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b51f4:	2b01      	cmp	r3, #1
   b51f6:	bf0c      	ite	eq
   b51f8:	2110      	moveq	r1, #16
   b51fa:	21af      	movne	r1, #175	; 0xaf
   b51fc:	e7ec      	b.n	b51d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b51fe:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5202:	2101      	movs	r1, #1
   b5204:	b280      	uxth	r0, r0
   b5206:	f002 fe2c 	bl	b7e62 <digitalWrite>
   b520a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b520c:	2800      	cmp	r0, #0
   b520e:	d095      	beq.n	b513c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5210:	f002 fa7c 	bl	b770c <_ZN8SPIClass14endTransactionEv>
   b5214:	e792      	b.n	b513c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5216:	bf00      	nop
   b5218:	000b8e60 	.word	0x000b8e60
   b521c:	000b8ba0 	.word	0x000b8ba0
   b5220:	000b90a8 	.word	0x000b90a8
   b5224:	000b90ac 	.word	0x000b90ac
   b5228:	000b90b0 	.word	0x000b90b0
   b522c:	00200080 	.word	0x00200080
   b5230:	000b90ba 	.word	0x000b90ba
   b5234:	000b90b4 	.word	0x000b90b4
   b5238:	00400080 	.word	0x00400080
   b523c:	000b90be 	.word	0x000b90be
   b5240:	00100060 	.word	0x00100060
   b5244:	000b90c1 	.word	0x000b90c1

000b5248 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5248:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b524a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b524c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5250:	db3d      	blt.n	b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5252:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5256:	4294      	cmp	r4, r2
   b5258:	dd39      	ble.n	b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b525a:	2900      	cmp	r1, #0
      w += x;
   b525c:	bfbe      	ittt	lt
   b525e:	185b      	addlt	r3, r3, r1
   b5260:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5262:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5264:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5268:	18ce      	adds	r6, r1, r3
   b526a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b526c:	bfc4      	itt	gt
   b526e:	1a63      	subgt	r3, r4, r1
   b5270:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5272:	2b00      	cmp	r3, #0
   b5274:	dd2b      	ble.n	b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5276:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5278:	10d6      	asrs	r6, r2, #3
   b527a:	fb14 1106 	smlabb	r1, r4, r6, r1
   b527e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5280:	f002 0007 	and.w	r0, r2, #7
   b5284:	2201      	movs	r2, #1
   b5286:	4082      	lsls	r2, r0
      switch(color) {
   b5288:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b528a:	b2d2      	uxtb	r2, r2
      switch(color) {
   b528c:	d016      	beq.n	b52bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b528e:	2d02      	cmp	r5, #2
   b5290:	d00b      	beq.n	b52aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5292:	b9e5      	cbnz	r5, b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5294:	43d2      	mvns	r2, r2
   b5296:	b2d2      	uxtb	r2, r2
   b5298:	440b      	add	r3, r1
   b529a:	4299      	cmp	r1, r3
   b529c:	d017      	beq.n	b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b529e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52a2:	4010      	ands	r0, r2
   b52a4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52a8:	e7f7      	b.n	b529a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b52aa:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b52ac:	4299      	cmp	r1, r3
   b52ae:	d00e      	beq.n	b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52b0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52b4:	4050      	eors	r0, r2
   b52b6:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52ba:	e7f7      	b.n	b52ac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b52bc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b52be:	4299      	cmp	r1, r3
   b52c0:	d005      	beq.n	b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52c6:	4310      	orrs	r0, r2
   b52c8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52cc:	e7f7      	b.n	b52be <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b52ce:	bd70      	pop	{r4, r5, r6, pc}

000b52d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b52d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b52d2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b52d4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b52d8:	db76      	blt.n	b53c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b52da:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b52de:	42b1      	cmp	r1, r6
   b52e0:	da72      	bge.n	b53c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b52e2:	2a00      	cmp	r2, #0
      __h += __y;
   b52e4:	bfbe      	ittt	lt
   b52e6:	189b      	addlt	r3, r3, r2
   b52e8:	b21b      	sxthlt	r3, r3
      __y = 0;
   b52ea:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b52ec:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b52f0:	18d7      	adds	r7, r2, r3
   b52f2:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b52f4:	bfc4      	itt	gt
   b52f6:	1aa3      	subgt	r3, r4, r2
   b52f8:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b52fa:	2b00      	cmp	r3, #0
   b52fc:	dd64      	ble.n	b53c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b52fe:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5302:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5304:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5308:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b530c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b530e:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5312:	d023      	beq.n	b535c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5314:	f1c2 0208 	rsb	r2, r2, #8
   b5318:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b531a:	492d      	ldr	r1, [pc, #180]	; (b53d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b531c:	4293      	cmp	r3, r2
   b531e:	bf3c      	itt	cc
   b5320:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5324:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5328:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b532a:	bf3c      	itt	cc
   b532c:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5330:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5334:	2d01      	cmp	r5, #1
   b5336:	d007      	beq.n	b5348 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5338:	2d02      	cmp	r5, #2
   b533a:	d02e      	beq.n	b539a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b533c:	b94d      	cbnz	r5, b5352 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b533e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5342:	ea2c 0101 	bic.w	r1, ip, r1
   b5346:	e003      	b.n	b5350 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5348:	f817 c006 	ldrb.w	ip, [r7, r6]
   b534c:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5350:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5352:	4293      	cmp	r3, r2
   b5354:	d338      	bcc.n	b53c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5356:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b535a:	440c      	add	r4, r1
        h -= mod;
   b535c:	1a9a      	subs	r2, r3, r2
   b535e:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5360:	2a07      	cmp	r2, #7
   b5362:	d90e      	bls.n	b5382 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5364:	2d02      	cmp	r5, #2
   b5366:	d11d      	bne.n	b53a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5368:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b536a:	7821      	ldrb	r1, [r4, #0]
   b536c:	43c9      	mvns	r1, r1
   b536e:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5370:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5372:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5376:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5378:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b537a:	440c      	add	r4, r1
            } while(h >= 8);
   b537c:	d8f5      	bhi.n	b536a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b537e:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5382:	b30a      	cbz	r2, b53c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5384:	4b13      	ldr	r3, [pc, #76]	; (b53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5386:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5388:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b538a:	d01a      	beq.n	b53c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b538c:	2d02      	cmp	r5, #2
   b538e:	d01c      	beq.n	b53ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5390:	b9d5      	cbnz	r5, b53c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5392:	7822      	ldrb	r2, [r4, #0]
   b5394:	ea22 0303 	bic.w	r3, r2, r3
   b5398:	e015      	b.n	b53c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b539a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b539e:	ea81 010c 	eor.w	r1, r1, ip
   b53a2:	e7d5      	b.n	b5350 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b53a4:	1e29      	subs	r1, r5, #0
   b53a6:	bf18      	it	ne
   b53a8:	2101      	movne	r1, #1
   b53aa:	4249      	negs	r1, r1
   b53ac:	b2c9      	uxtb	r1, r1
   b53ae:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b53b0:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b53b2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b53b4:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b53b8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b53ba:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b53bc:	4434      	add	r4, r6
            } while(h >= 8);
   b53be:	d8f7      	bhi.n	b53b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b53c0:	e7dd      	b.n	b537e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b53c2:	7822      	ldrb	r2, [r4, #0]
   b53c4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b53c6:	7023      	strb	r3, [r4, #0]
}
   b53c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b53ca:	7822      	ldrb	r2, [r4, #0]
   b53cc:	4053      	eors	r3, r2
   b53ce:	e7fa      	b.n	b53c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b53d0:	000b9098 	.word	0x000b9098
   b53d4:	000b90a0 	.word	0x000b90a0

000b53d8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b53d8:	b470      	push	{r4, r5, r6}
   b53da:	4614      	mov	r4, r2
  switch(rotation) {
   b53dc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b53de:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b53e2:	2a02      	cmp	r2, #2
   b53e4:	d00d      	beq.n	b5402 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b53e6:	2a03      	cmp	r2, #3
   b53e8:	d018      	beq.n	b541c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b53ea:	2a01      	cmp	r2, #1
   b53ec:	d111      	bne.n	b5412 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b53ee:	8902      	ldrh	r2, [r0, #8]
   b53f0:	43e4      	mvns	r4, r4
   b53f2:	4414      	add	r4, r2
   b53f4:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b53f6:	9603      	str	r6, [sp, #12]
   b53f8:	460a      	mov	r2, r1
   b53fa:	4621      	mov	r1, r4
}
   b53fc:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b53fe:	f7ff bf67 	b.w	b52d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5402:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5404:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5406:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5408:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b540a:	4414      	add	r4, r2
    x -= (w-1);
   b540c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b540e:	b224      	sxth	r4, r4
    x -= (w-1);
   b5410:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5412:	9603      	str	r6, [sp, #12]
   b5414:	4622      	mov	r2, r4
}
   b5416:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5418:	f7ff bf16 	b.w	b5248 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b541c:	8945      	ldrh	r5, [r0, #10]
   b541e:	4419      	add	r1, r3
   b5420:	1a69      	subs	r1, r5, r1
   b5422:	b209      	sxth	r1, r1
    break;
   b5424:	e7e7      	b.n	b53f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5426 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5426:	b430      	push	{r4, r5}
   b5428:	4614      	mov	r4, r2
  switch(rotation) {
   b542a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b542c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5430:	2a02      	cmp	r2, #2
   b5432:	d00d      	beq.n	b5450 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5434:	2a03      	cmp	r2, #3
   b5436:	d018      	beq.n	b546a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5438:	2a01      	cmp	r2, #1
   b543a:	d111      	bne.n	b5460 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b543c:	18e2      	adds	r2, r4, r3
   b543e:	8904      	ldrh	r4, [r0, #8]
   b5440:	1aa4      	subs	r4, r4, r2
   b5442:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5444:	9502      	str	r5, [sp, #8]
   b5446:	460a      	mov	r2, r1
   b5448:	4621      	mov	r1, r4
}
   b544a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b544c:	f7ff befc 	b.w	b5248 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5450:	8902      	ldrh	r2, [r0, #8]
   b5452:	43c9      	mvns	r1, r1
   b5454:	4411      	add	r1, r2
    y -= (h-1);
   b5456:	18e2      	adds	r2, r4, r3
   b5458:	8944      	ldrh	r4, [r0, #10]
   b545a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b545c:	b209      	sxth	r1, r1
    y -= (h-1);
   b545e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5460:	9502      	str	r5, [sp, #8]
   b5462:	4622      	mov	r2, r4
}
   b5464:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5466:	f7ff bf33 	b.w	b52d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b546a:	8942      	ldrh	r2, [r0, #10]
   b546c:	43c9      	mvns	r1, r1
   b546e:	4411      	add	r1, r2
   b5470:	b209      	sxth	r1, r1
    break;
   b5472:	e7e7      	b.n	b5444 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5474 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5478:	4604      	mov	r4, r0
  TRANSACTION_START
   b547a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b547c:	2800      	cmp	r0, #0
   b547e:	d042      	beq.n	b5506 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5480:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5482:	f001 ff17 	bl	b72b4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5486:	4947      	ldr	r1, [pc, #284]	; (b55a4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5488:	2205      	movs	r2, #5
   b548a:	4620      	mov	r0, r4
   b548c:	f7ff fd27 	bl	b4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5490:	8921      	ldrh	r1, [r4, #8]
   b5492:	3901      	subs	r1, #1
   b5494:	4620      	mov	r0, r4
   b5496:	b2c9      	uxtb	r1, r1
   b5498:	f7ff fcb2 	bl	b4e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b549c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b54a0:	1dde      	adds	r6, r3, #7
   b54a2:	bf48      	it	mi
   b54a4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b54a8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b54ac:	8923      	ldrh	r3, [r4, #8]
   b54ae:	10f6      	asrs	r6, r6, #3
   b54b0:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b54b4:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b54b8:	2800      	cmp	r0, #0
   b54ba:	d03a      	beq.n	b5532 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b54bc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b54c0:	f001 ff06 	bl	b72d0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b54c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b54c6:	6803      	ldr	r3, [r0, #0]
   b54c8:	2140      	movs	r1, #64	; 0x40
   b54ca:	689b      	ldr	r3, [r3, #8]
   b54cc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b54ce:	2701      	movs	r7, #1
    while(count--) {
   b54d0:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b54d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b54d4:	d024      	beq.n	b5520 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b54d6:	2f1f      	cmp	r7, #31
   b54d8:	d90c      	bls.n	b54f4 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b54da:	f001 ff00 	bl	b72de <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b54de:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b54e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b54e4:	f001 fef4 	bl	b72d0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b54e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b54ea:	6803      	ldr	r3, [r0, #0]
   b54ec:	2140      	movs	r1, #64	; 0x40
   b54ee:	689b      	ldr	r3, [r3, #8]
   b54f0:	4798      	blx	r3
        bytesOut = 1;
   b54f2:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b54f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b54f6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b54fa:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b54fc:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b54fe:	689b      	ldr	r3, [r3, #8]
   b5500:	4798      	blx	r3
      bytesOut++;
   b5502:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5504:	e7e4      	b.n	b54d0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5506:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5508:	b118      	cbz	r0, b5512 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b550a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b550e:	f002 f917 	bl	b7740 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5512:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5516:	2100      	movs	r1, #0
   b5518:	b280      	uxth	r0, r0
   b551a:	f002 fca2 	bl	b7e62 <digitalWrite>
   b551e:	e7b2      	b.n	b5486 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5520:	f001 fedd 	bl	b72de <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5524:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5526:	b378      	cbz	r0, b5588 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5528:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b552a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b552e:	f001 bec1 	b.w	b72b4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5532:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5536:	2101      	movs	r1, #1
   b5538:	b280      	uxth	r0, r0
   b553a:	f002 fc92 	bl	b7e62 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b553e:	42ae      	cmp	r6, r5
   b5540:	d0f0      	beq.n	b5524 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5542:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5544:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5548:	b118      	cbz	r0, b5552 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b554a:	4649      	mov	r1, r9
   b554c:	f002 f966 	bl	b781c <_ZN8SPIClass8transferEh>
   b5550:	e7f5      	b.n	b553e <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5552:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5554:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5558:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b555c:	ea09 0108 	and.w	r1, r9, r8
   b5560:	b280      	uxth	r0, r0
   b5562:	f002 fc7e 	bl	b7e62 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5566:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b556a:	2101      	movs	r1, #1
   b556c:	b280      	uxth	r0, r0
   b556e:	f002 fc78 	bl	b7e62 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5572:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5576:	2100      	movs	r1, #0
   b5578:	b280      	uxth	r0, r0
   b557a:	f002 fc72 	bl	b7e62 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b557e:	3f01      	subs	r7, #1
   b5580:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5584:	d1e8      	bne.n	b5558 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5586:	e7da      	b.n	b553e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5588:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b558c:	2101      	movs	r1, #1
   b558e:	b280      	uxth	r0, r0
   b5590:	f002 fc67 	bl	b7e62 <digitalWrite>
   b5594:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5596:	b118      	cbz	r0, b55a0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5598:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b559c:	f002 b8b6 	b.w	b770c <_ZN8SPIClass14endTransactionEv>
}
   b55a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b55a4:	000b90c4 	.word	0x000b90c4

000b55a8 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b55a8:	2100      	movs	r1, #0
   b55aa:	220a      	movs	r2, #10
   b55ac:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b55b0:	4770      	bx	lr

000b55b2 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b55b2:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b55b4:	b510      	push	{r4, lr}
   b55b6:	4604      	mov	r4, r0
    this->pin = pin;
   b55b8:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b55ba:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b55bc:	b288      	uxth	r0, r1
   b55be:	f002 fc69 	bl	b7e94 <digitalRead>
   b55c2:	b108      	cbz	r0, b55c8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b55c4:	2303      	movs	r3, #3
   b55c6:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b55c8:	f000 f98e 	bl	b58e8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b55cc:	6020      	str	r0, [r4, #0]
#endif
}
   b55ce:	bd10      	pop	{r4, pc}

000b55d0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b55d0:	b538      	push	{r3, r4, r5, lr}
   b55d2:	460c      	mov	r4, r1
   b55d4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b55d6:	4611      	mov	r1, r2
   b55d8:	b2a0      	uxth	r0, r4
   b55da:	f002 fc31 	bl	b7e40 <pinMode>
  
  this->attach(pin);
   b55de:	4621      	mov	r1, r4
   b55e0:	4628      	mov	r0, r5
}
   b55e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b55e6:	f7ff bfe4 	b.w	b55b2 <_ZN8Debounce6attachEi>

000b55ea <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b55ea:	b538      	push	{r3, r4, r5, lr}
   b55ec:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b55ee:	79c0      	ldrb	r0, [r0, #7]
   b55f0:	f002 fc50 	bl	b7e94 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b55f4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b55f6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b55f8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b55fc:	bf18      	it	ne
   b55fe:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5600:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5604:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5606:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5608:	d00a      	beq.n	b5620 <_ZN8Debounce6updateEv+0x36>
   b560a:	f000 f96d 	bl	b58e8 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b560e:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5610:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5612:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5616:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5618:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b561a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b561e:	bd38      	pop	{r3, r4, r5, pc}
   b5620:	f000 f962 	bl	b58e8 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5624:	6823      	ldr	r3, [r4, #0]
   b5626:	1ac0      	subs	r0, r0, r3
   b5628:	88a3      	ldrh	r3, [r4, #4]
   b562a:	4298      	cmp	r0, r3
   b562c:	d3f4      	bcc.n	b5618 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b562e:	79a3      	ldrb	r3, [r4, #6]
   b5630:	f003 0301 	and.w	r3, r3, #1
   b5634:	42ab      	cmp	r3, r5
   b5636:	d0ef      	beq.n	b5618 <_ZN8Debounce6updateEv+0x2e>
   b5638:	f000 f956 	bl	b58e8 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b563c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b563e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5640:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5644:	f043 0308 	orr.w	r3, r3, #8
   b5648:	e7e5      	b.n	b5616 <_ZN8Debounce6updateEv+0x2c>
	...

000b564c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b564c:	b510      	push	{r4, lr}
   b564e:	4b06      	ldr	r3, [pc, #24]	; (b5668 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5650:	6003      	str	r3, [r0, #0]
   b5652:	4604      	mov	r4, r0
	if (mutex) {
   b5654:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5656:	b108      	cbz	r0, b565c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5658:	f000 f916 	bl	b5888 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b565c:	4620      	mov	r0, r4
   b565e:	f7ff fb29 	bl	b4cb4 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5662:	4620      	mov	r0, r4
   b5664:	bd10      	pop	{r4, pc}
   b5666:	bf00      	nop
   b5668:	000b90d4 	.word	0x000b90d4

000b566c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b566c:	b510      	push	{r4, lr}
   b566e:	4604      	mov	r4, r0
}
   b5670:	f7ff ffec 	bl	b564c <_ZN16OledWingAdafruitD1Ev>
   b5674:	4620      	mov	r0, r4
   b5676:	2170      	movs	r1, #112	; 0x70
   b5678:	f7fe fd0f 	bl	b409a <_ZdlPvj>
   b567c:	4620      	mov	r0, r4
   b567e:	bd10      	pop	{r4, pc}

000b5680 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5680:	b530      	push	{r4, r5, lr}
   b5682:	b085      	sub	sp, #20
   b5684:	4604      	mov	r4, r0
   b5686:	460d      	mov	r5, r1
   b5688:	f002 fc32 	bl	b7ef0 <_Z19__fetch_global_Wirev>
   b568c:	4a10      	ldr	r2, [pc, #64]	; (b56d0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b568e:	4911      	ldr	r1, [pc, #68]	; (b56d4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5690:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5698:	2180      	movs	r1, #128	; 0x80
   b569a:	4603      	mov	r3, r0
   b569c:	9200      	str	r2, [sp, #0]
   b569e:	4620      	mov	r0, r4
   b56a0:	2220      	movs	r2, #32
   b56a2:	f7ff fb7f 	bl	b4da4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b56a6:	4b0c      	ldr	r3, [pc, #48]	; (b56d8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b56a8:	6023      	str	r3, [r4, #0]
   b56aa:	2300      	movs	r3, #0
   b56ac:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b56b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b56b4:	f7ff ff78 	bl	b55a8 <_ZN8DebounceC1Ev>
   b56b8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b56bc:	f7ff ff74 	bl	b55a8 <_ZN8DebounceC1Ev>
   b56c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b56c4:	f7ff ff70 	bl	b55a8 <_ZN8DebounceC1Ev>
}
   b56c8:	4620      	mov	r0, r4
   b56ca:	b005      	add	sp, #20
   b56cc:	bd30      	pop	{r4, r5, pc}
   b56ce:	bf00      	nop
   b56d0:	00061a80 	.word	0x00061a80
   b56d4:	000186a0 	.word	0x000186a0
   b56d8:	000b90d4 	.word	0x000b90d4

000b56dc <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b56dc:	b513      	push	{r0, r1, r4, lr}
   b56de:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b56e0:	3050      	adds	r0, #80	; 0x50
   b56e2:	f000 f8c9 	bl	b5878 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b56e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b56e8:	07d9      	lsls	r1, r3, #31
   b56ea:	d505      	bpl.n	b56f8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b56ec:	2202      	movs	r2, #2
   b56ee:	2104      	movs	r1, #4
   b56f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b56f4:	f7ff ff6c 	bl	b55d0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b56f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b56fa:	079a      	lsls	r2, r3, #30
   b56fc:	d505      	bpl.n	b570a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b56fe:	2200      	movs	r2, #0
   b5700:	2103      	movs	r1, #3
   b5702:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5706:	f7ff ff63 	bl	b55d0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b570a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b570c:	075b      	lsls	r3, r3, #29
   b570e:	d505      	bpl.n	b571c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5710:	2202      	movs	r2, #2
   b5712:	4611      	mov	r1, r2
   b5714:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5718:	f7ff ff5a 	bl	b55d0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b571c:	2301      	movs	r3, #1
   b571e:	9300      	str	r3, [sp, #0]
   b5720:	223c      	movs	r2, #60	; 0x3c
   b5722:	2102      	movs	r1, #2
   b5724:	4620      	mov	r0, r4
   b5726:	f7ff fc45 	bl	b4fb4 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b572a:	b002      	add	sp, #8
   b572c:	bd10      	pop	{r4, pc}

000b572e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b572e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5730:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5732:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5734:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5736:	d502      	bpl.n	b573e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5738:	3058      	adds	r0, #88	; 0x58
   b573a:	f7ff ff56 	bl	b55ea <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b573e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5740:	079a      	lsls	r2, r3, #30
   b5742:	d503      	bpl.n	b574c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5744:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5748:	f7ff ff4f 	bl	b55ea <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b574c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b574e:	075b      	lsls	r3, r3, #29
   b5750:	d505      	bpl.n	b575e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5752:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b575a:	f7ff bf46 	b.w	b55ea <_ZN8Debounce6updateEv>
}
   b575e:	bd10      	pop	{r4, pc}

000b5760 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <hal_ble_stack_init+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	689b      	ldr	r3, [r3, #8]
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	00030278 	.word	0x00030278

000b5770 <hal_ble_gap_set_device_name>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
DYNALIB_FN(8, hal_ble, hal_ble_gap_set_device_name, int(const char*, size_t, void*))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <hal_ble_gap_set_device_name+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	6a1b      	ldr	r3, [r3, #32]
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	00030278 	.word	0x00030278

000b5780 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <hal_ble_gap_set_advertising_data+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	00030278 	.word	0x00030278

000b5790 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <hal_ble_gap_set_scan_response_data+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	00030278 	.word	0x00030278

000b57a0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b02      	ldr	r3, [pc, #8]	; (b57ac <hal_ble_gap_start_advertising+0xc>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b57a8:	9301      	str	r3, [sp, #4]
   b57aa:	bd08      	pop	{r3, pc}
   b57ac:	00030278 	.word	0x00030278

000b57b0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b57b0:	b508      	push	{r3, lr}
   b57b2:	4b03      	ldr	r3, [pc, #12]	; (b57c0 <hal_ble_gap_disconnect+0x10>)
   b57b4:	681b      	ldr	r3, [r3, #0]
   b57b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b57ba:	9301      	str	r3, [sp, #4]
   b57bc:	bd08      	pop	{r3, pc}
   b57be:	0000      	.short	0x0000
   b57c0:	00030278 	.word	0x00030278

000b57c4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b03      	ldr	r3, [pc, #12]	; (b57d4 <hal_ble_gatt_server_add_service+0x10>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b57ce:	9301      	str	r3, [sp, #4]
   b57d0:	bd08      	pop	{r3, pc}
   b57d2:	0000      	.short	0x0000
   b57d4:	00030278 	.word	0x00030278

000b57d8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b03      	ldr	r3, [pc, #12]	; (b57e8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b57e2:	9301      	str	r3, [sp, #4]
   b57e4:	bd08      	pop	{r3, pc}
   b57e6:	0000      	.short	0x0000
   b57e8:	00030278 	.word	0x00030278

000b57ec <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b57ec:	b508      	push	{r3, lr}
   b57ee:	4b03      	ldr	r3, [pc, #12]	; (b57fc <hal_ble_gatt_client_write_with_response+0x10>)
   b57f0:	681b      	ldr	r3, [r3, #0]
   b57f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b57f6:	9301      	str	r3, [sp, #4]
   b57f8:	bd08      	pop	{r3, pc}
   b57fa:	0000      	.short	0x0000
   b57fc:	00030278 	.word	0x00030278

000b5800 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5800:	b508      	push	{r3, lr}
   b5802:	4b03      	ldr	r3, [pc, #12]	; (b5810 <hal_ble_gatt_client_write_without_response+0x10>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b580a:	9301      	str	r3, [sp, #4]
   b580c:	bd08      	pop	{r3, pc}
   b580e:	0000      	.short	0x0000
   b5810:	00030278 	.word	0x00030278

000b5814 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b03      	ldr	r3, [pc, #12]	; (b5824 <hal_ble_gap_get_connection_info+0x10>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b581e:	9301      	str	r3, [sp, #4]
   b5820:	bd08      	pop	{r3, pc}
   b5822:	0000      	.short	0x0000
   b5824:	00030278 	.word	0x00030278

000b5828 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b03      	ldr	r3, [pc, #12]	; (b5838 <hal_ble_gatt_server_add_characteristic+0x10>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5832:	9301      	str	r3, [sp, #4]
   b5834:	bd08      	pop	{r3, pc}
   b5836:	0000      	.short	0x0000
   b5838:	00030278 	.word	0x00030278

000b583c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b583c:	b508      	push	{r3, lr}
   b583e:	4b03      	ldr	r3, [pc, #12]	; (b584c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5840:	681b      	ldr	r3, [r3, #0]
   b5842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5846:	9301      	str	r3, [sp, #4]
   b5848:	bd08      	pop	{r3, pc}
   b584a:	0000      	.short	0x0000
   b584c:	00030278 	.word	0x00030278

000b5850 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5850:	b508      	push	{r3, lr}
   b5852:	4b03      	ldr	r3, [pc, #12]	; (b5860 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5854:	681b      	ldr	r3, [r3, #0]
   b5856:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b585a:	9301      	str	r3, [sp, #4]
   b585c:	bd08      	pop	{r3, pc}
   b585e:	0000      	.short	0x0000
   b5860:	00030278 	.word	0x00030278

000b5864 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5864:	b508      	push	{r3, lr}
   b5866:	4b03      	ldr	r3, [pc, #12]	; (b5874 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5868:	681b      	ldr	r3, [r3, #0]
   b586a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b586e:	9301      	str	r3, [sp, #4]
   b5870:	bd08      	pop	{r3, pc}
   b5872:	0000      	.short	0x0000
   b5874:	00030278 	.word	0x00030278

000b5878 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <os_mutex_create+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030248 	.word	0x00030248

000b5888 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <os_mutex_destroy+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030248 	.word	0x00030248

000b5898 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <os_mutex_recursive_create+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	00030248 	.word	0x00030248

000b58a8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <os_mutex_recursive_lock+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	00030248 	.word	0x00030248

000b58b8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <os_mutex_recursive_unlock+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	00030248 	.word	0x00030248

000b58c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <HAL_RNG_GetRandomNumber+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	685b      	ldr	r3, [r3, #4]
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	00030218 	.word	0x00030218

000b58d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <HAL_Delay_Microseconds+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	68db      	ldr	r3, [r3, #12]
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	00030218 	.word	0x00030218

000b58e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	695b      	ldr	r3, [r3, #20]
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	00030218 	.word	0x00030218

000b58f8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <HAL_Pin_Mode+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	689b      	ldr	r3, [r3, #8]
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	0003022c 	.word	0x0003022c

000b5908 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <HAL_Get_Pin_Mode+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	68db      	ldr	r3, [r3, #12]
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	0003022c 	.word	0x0003022c

000b5918 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <HAL_GPIO_Write+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	691b      	ldr	r3, [r3, #16]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	0003022c 	.word	0x0003022c

000b5928 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <HAL_GPIO_Read+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	695b      	ldr	r3, [r3, #20]
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	0003022c 	.word	0x0003022c

000b5938 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <hal_i2c_set_speed+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	681b      	ldr	r3, [r3, #0]
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	00030228 	.word	0x00030228

000b5948 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <hal_i2c_begin+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	68db      	ldr	r3, [r3, #12]
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	00030228 	.word	0x00030228

000b5958 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <hal_i2c_begin_transmission+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	699b      	ldr	r3, [r3, #24]
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	00030228 	.word	0x00030228

000b5968 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b02      	ldr	r3, [pc, #8]	; (b5974 <hal_i2c_end_transmission+0xc>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	69db      	ldr	r3, [r3, #28]
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	bd08      	pop	{r3, pc}
   b5974:	00030228 	.word	0x00030228

000b5978 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5978:	b508      	push	{r3, lr}
   b597a:	4b02      	ldr	r3, [pc, #8]	; (b5984 <hal_i2c_write+0xc>)
   b597c:	681b      	ldr	r3, [r3, #0]
   b597e:	6a1b      	ldr	r3, [r3, #32]
   b5980:	9301      	str	r3, [sp, #4]
   b5982:	bd08      	pop	{r3, pc}
   b5984:	00030228 	.word	0x00030228

000b5988 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5988:	b508      	push	{r3, lr}
   b598a:	4b02      	ldr	r3, [pc, #8]	; (b5994 <hal_i2c_available+0xc>)
   b598c:	681b      	ldr	r3, [r3, #0]
   b598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5990:	9301      	str	r3, [sp, #4]
   b5992:	bd08      	pop	{r3, pc}
   b5994:	00030228 	.word	0x00030228

000b5998 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <hal_i2c_read+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	00030228 	.word	0x00030228

000b59a8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b59a8:	b508      	push	{r3, lr}
   b59aa:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <hal_i2c_peek+0xc>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59b0:	9301      	str	r3, [sp, #4]
   b59b2:	bd08      	pop	{r3, pc}
   b59b4:	00030228 	.word	0x00030228

000b59b8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b59b8:	b508      	push	{r3, lr}
   b59ba:	4b02      	ldr	r3, [pc, #8]	; (b59c4 <hal_i2c_flush+0xc>)
   b59bc:	681b      	ldr	r3, [r3, #0]
   b59be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b59c0:	9301      	str	r3, [sp, #4]
   b59c2:	bd08      	pop	{r3, pc}
   b59c4:	00030228 	.word	0x00030228

000b59c8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b59c8:	b508      	push	{r3, lr}
   b59ca:	4b02      	ldr	r3, [pc, #8]	; (b59d4 <hal_i2c_is_enabled+0xc>)
   b59cc:	681b      	ldr	r3, [r3, #0]
   b59ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b59d0:	9301      	str	r3, [sp, #4]
   b59d2:	bd08      	pop	{r3, pc}
   b59d4:	00030228 	.word	0x00030228

000b59d8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b59d8:	b508      	push	{r3, lr}
   b59da:	4b02      	ldr	r3, [pc, #8]	; (b59e4 <hal_i2c_init+0xc>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b59e0:	9301      	str	r3, [sp, #4]
   b59e2:	bd08      	pop	{r3, pc}
   b59e4:	00030228 	.word	0x00030228

000b59e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b59e8:	b508      	push	{r3, lr}
   b59ea:	4b02      	ldr	r3, [pc, #8]	; (b59f4 <inet_inet_ntop+0xc>)
   b59ec:	681b      	ldr	r3, [r3, #0]
   b59ee:	695b      	ldr	r3, [r3, #20]
   b59f0:	9301      	str	r3, [sp, #4]
   b59f2:	bd08      	pop	{r3, pc}
   b59f4:	00030264 	.word	0x00030264

000b59f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b59f8:	b508      	push	{r3, lr}
   b59fa:	4b02      	ldr	r3, [pc, #8]	; (b5a04 <netdb_freeaddrinfo+0xc>)
   b59fc:	681b      	ldr	r3, [r3, #0]
   b59fe:	689b      	ldr	r3, [r3, #8]
   b5a00:	9301      	str	r3, [sp, #4]
   b5a02:	bd08      	pop	{r3, pc}
   b5a04:	00030268 	.word	0x00030268

000b5a08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a08:	b508      	push	{r3, lr}
   b5a0a:	4b02      	ldr	r3, [pc, #8]	; (b5a14 <netdb_getaddrinfo+0xc>)
   b5a0c:	681b      	ldr	r3, [r3, #0]
   b5a0e:	68db      	ldr	r3, [r3, #12]
   b5a10:	9301      	str	r3, [sp, #4]
   b5a12:	bd08      	pop	{r3, pc}
   b5a14:	00030268 	.word	0x00030268

000b5a18 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5a18:	b508      	push	{r3, lr}
   b5a1a:	4b02      	ldr	r3, [pc, #8]	; (b5a24 <hal_spi_begin+0xc>)
   b5a1c:	681b      	ldr	r3, [r3, #0]
   b5a1e:	681b      	ldr	r3, [r3, #0]
   b5a20:	9301      	str	r3, [sp, #4]
   b5a22:	bd08      	pop	{r3, pc}
   b5a24:	00030230 	.word	0x00030230

000b5a28 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5a28:	b508      	push	{r3, lr}
   b5a2a:	4b02      	ldr	r3, [pc, #8]	; (b5a34 <hal_spi_transfer+0xc>)
   b5a2c:	681b      	ldr	r3, [r3, #0]
   b5a2e:	695b      	ldr	r3, [r3, #20]
   b5a30:	9301      	str	r3, [sp, #4]
   b5a32:	bd08      	pop	{r3, pc}
   b5a34:	00030230 	.word	0x00030230

000b5a38 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5a38:	b508      	push	{r3, lr}
   b5a3a:	4b02      	ldr	r3, [pc, #8]	; (b5a44 <hal_spi_init+0xc>)
   b5a3c:	681b      	ldr	r3, [r3, #0]
   b5a3e:	69db      	ldr	r3, [r3, #28]
   b5a40:	9301      	str	r3, [sp, #4]
   b5a42:	bd08      	pop	{r3, pc}
   b5a44:	00030230 	.word	0x00030230

000b5a48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5a48:	b508      	push	{r3, lr}
   b5a4a:	4b02      	ldr	r3, [pc, #8]	; (b5a54 <hal_spi_is_enabled+0xc>)
   b5a4c:	681b      	ldr	r3, [r3, #0]
   b5a4e:	6a1b      	ldr	r3, [r3, #32]
   b5a50:	9301      	str	r3, [sp, #4]
   b5a52:	bd08      	pop	{r3, pc}
   b5a54:	00030230 	.word	0x00030230

000b5a58 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b02      	ldr	r3, [pc, #8]	; (b5a64 <hal_spi_info+0xc>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5a60:	9301      	str	r3, [sp, #4]
   b5a62:	bd08      	pop	{r3, pc}
   b5a64:	00030230 	.word	0x00030230

000b5a68 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5a68:	b508      	push	{r3, lr}
   b5a6a:	4b02      	ldr	r3, [pc, #8]	; (b5a74 <hal_spi_set_settings+0xc>)
   b5a6c:	681b      	ldr	r3, [r3, #0]
   b5a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5a70:	9301      	str	r3, [sp, #4]
   b5a72:	bd08      	pop	{r3, pc}
   b5a74:	00030230 	.word	0x00030230

000b5a78 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5a78:	b508      	push	{r3, lr}
   b5a7a:	4b02      	ldr	r3, [pc, #8]	; (b5a84 <hal_spi_acquire+0xc>)
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a80:	9301      	str	r3, [sp, #4]
   b5a82:	bd08      	pop	{r3, pc}
   b5a84:	00030230 	.word	0x00030230

000b5a88 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5a88:	b508      	push	{r3, lr}
   b5a8a:	4b02      	ldr	r3, [pc, #8]	; (b5a94 <hal_spi_release+0xc>)
   b5a8c:	681b      	ldr	r3, [r3, #0]
   b5a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a90:	9301      	str	r3, [sp, #4]
   b5a92:	bd08      	pop	{r3, pc}
   b5a94:	00030230 	.word	0x00030230

000b5a98 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5a98:	b508      	push	{r3, lr}
   b5a9a:	4b02      	ldr	r3, [pc, #8]	; (b5aa4 <hal_usart_write+0xc>)
   b5a9c:	681b      	ldr	r3, [r3, #0]
   b5a9e:	68db      	ldr	r3, [r3, #12]
   b5aa0:	9301      	str	r3, [sp, #4]
   b5aa2:	bd08      	pop	{r3, pc}
   b5aa4:	0003023c 	.word	0x0003023c

000b5aa8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5aa8:	b508      	push	{r3, lr}
   b5aaa:	4b02      	ldr	r3, [pc, #8]	; (b5ab4 <hal_usart_available+0xc>)
   b5aac:	681b      	ldr	r3, [r3, #0]
   b5aae:	691b      	ldr	r3, [r3, #16]
   b5ab0:	9301      	str	r3, [sp, #4]
   b5ab2:	bd08      	pop	{r3, pc}
   b5ab4:	0003023c 	.word	0x0003023c

000b5ab8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5ab8:	b508      	push	{r3, lr}
   b5aba:	4b02      	ldr	r3, [pc, #8]	; (b5ac4 <hal_usart_read+0xc>)
   b5abc:	681b      	ldr	r3, [r3, #0]
   b5abe:	695b      	ldr	r3, [r3, #20]
   b5ac0:	9301      	str	r3, [sp, #4]
   b5ac2:	bd08      	pop	{r3, pc}
   b5ac4:	0003023c 	.word	0x0003023c

000b5ac8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5ac8:	b508      	push	{r3, lr}
   b5aca:	4b02      	ldr	r3, [pc, #8]	; (b5ad4 <hal_usart_peek+0xc>)
   b5acc:	681b      	ldr	r3, [r3, #0]
   b5ace:	699b      	ldr	r3, [r3, #24]
   b5ad0:	9301      	str	r3, [sp, #4]
   b5ad2:	bd08      	pop	{r3, pc}
   b5ad4:	0003023c 	.word	0x0003023c

000b5ad8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5ad8:	b508      	push	{r3, lr}
   b5ada:	4b02      	ldr	r3, [pc, #8]	; (b5ae4 <hal_usart_flush+0xc>)
   b5adc:	681b      	ldr	r3, [r3, #0]
   b5ade:	69db      	ldr	r3, [r3, #28]
   b5ae0:	9301      	str	r3, [sp, #4]
   b5ae2:	bd08      	pop	{r3, pc}
   b5ae4:	0003023c 	.word	0x0003023c

000b5ae8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5ae8:	b508      	push	{r3, lr}
   b5aea:	4b02      	ldr	r3, [pc, #8]	; (b5af4 <hal_usart_is_enabled+0xc>)
   b5aec:	681b      	ldr	r3, [r3, #0]
   b5aee:	6a1b      	ldr	r3, [r3, #32]
   b5af0:	9301      	str	r3, [sp, #4]
   b5af2:	bd08      	pop	{r3, pc}
   b5af4:	0003023c 	.word	0x0003023c

000b5af8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5af8:	b508      	push	{r3, lr}
   b5afa:	4b02      	ldr	r3, [pc, #8]	; (b5b04 <hal_usart_available_data_for_write+0xc>)
   b5afc:	681b      	ldr	r3, [r3, #0]
   b5afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b00:	9301      	str	r3, [sp, #4]
   b5b02:	bd08      	pop	{r3, pc}
   b5b04:	0003023c 	.word	0x0003023c

000b5b08 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5b08:	b508      	push	{r3, lr}
   b5b0a:	4b02      	ldr	r3, [pc, #8]	; (b5b14 <hal_usart_init_ex+0xc>)
   b5b0c:	681b      	ldr	r3, [r3, #0]
   b5b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b10:	9301      	str	r3, [sp, #4]
   b5b12:	bd08      	pop	{r3, pc}
   b5b14:	0003023c 	.word	0x0003023c

000b5b18 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5b18:	b508      	push	{r3, lr}
   b5b1a:	4b02      	ldr	r3, [pc, #8]	; (b5b24 <HAL_USB_USART_Init+0xc>)
   b5b1c:	681b      	ldr	r3, [r3, #0]
   b5b1e:	681b      	ldr	r3, [r3, #0]
   b5b20:	9301      	str	r3, [sp, #4]
   b5b22:	bd08      	pop	{r3, pc}
   b5b24:	0003024c 	.word	0x0003024c

000b5b28 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5b28:	b508      	push	{r3, lr}
   b5b2a:	4b02      	ldr	r3, [pc, #8]	; (b5b34 <HAL_USB_USART_Begin+0xc>)
   b5b2c:	681b      	ldr	r3, [r3, #0]
   b5b2e:	685b      	ldr	r3, [r3, #4]
   b5b30:	9301      	str	r3, [sp, #4]
   b5b32:	bd08      	pop	{r3, pc}
   b5b34:	0003024c 	.word	0x0003024c

000b5b38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <HAL_USB_USART_Available_Data+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	691b      	ldr	r3, [r3, #16]
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	0003024c 	.word	0x0003024c

000b5b48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	695b      	ldr	r3, [r3, #20]
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	0003024c 	.word	0x0003024c

000b5b58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <HAL_USB_USART_Receive_Data+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	699b      	ldr	r3, [r3, #24]
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	0003024c 	.word	0x0003024c

000b5b68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5b68:	b508      	push	{r3, lr}
   b5b6a:	4b02      	ldr	r3, [pc, #8]	; (b5b74 <HAL_USB_USART_Send_Data+0xc>)
   b5b6c:	681b      	ldr	r3, [r3, #0]
   b5b6e:	69db      	ldr	r3, [r3, #28]
   b5b70:	9301      	str	r3, [sp, #4]
   b5b72:	bd08      	pop	{r3, pc}
   b5b74:	0003024c 	.word	0x0003024c

000b5b78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5b78:	b508      	push	{r3, lr}
   b5b7a:	4b02      	ldr	r3, [pc, #8]	; (b5b84 <HAL_USB_USART_Flush_Data+0xc>)
   b5b7c:	681b      	ldr	r3, [r3, #0]
   b5b7e:	6a1b      	ldr	r3, [r3, #32]
   b5b80:	9301      	str	r3, [sp, #4]
   b5b82:	bd08      	pop	{r3, pc}
   b5b84:	0003024c 	.word	0x0003024c

000b5b88 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b5b88:	b508      	push	{r3, lr}
   b5b8a:	4b02      	ldr	r3, [pc, #8]	; (b5b94 <LED_SetSignalingColor+0xc>)
   b5b8c:	681b      	ldr	r3, [r3, #0]
   b5b8e:	685b      	ldr	r3, [r3, #4]
   b5b90:	9301      	str	r3, [sp, #4]
   b5b92:	bd08      	pop	{r3, pc}
   b5b94:	00030260 	.word	0x00030260

000b5b98 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b5b98:	b508      	push	{r3, lr}
   b5b9a:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <LED_Signaling_Start+0xc>)
   b5b9c:	681b      	ldr	r3, [r3, #0]
   b5b9e:	689b      	ldr	r3, [r3, #8]
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	bd08      	pop	{r3, pc}
   b5ba4:	00030260 	.word	0x00030260

000b5ba8 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b5ba8:	b508      	push	{r3, lr}
   b5baa:	4b02      	ldr	r3, [pc, #8]	; (b5bb4 <LED_Signaling_Stop+0xc>)
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	68db      	ldr	r3, [r3, #12]
   b5bb0:	9301      	str	r3, [sp, #4]
   b5bb2:	bd08      	pop	{r3, pc}
   b5bb4:	00030260 	.word	0x00030260

000b5bb8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <LED_RGB_IsOverRidden+0xc>)
   b5bbc:	681b      	ldr	r3, [r3, #0]
   b5bbe:	699b      	ldr	r3, [r3, #24]
   b5bc0:	9301      	str	r3, [sp, #4]
   b5bc2:	bd08      	pop	{r3, pc}
   b5bc4:	00030260 	.word	0x00030260

000b5bc8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <LED_On+0xc>)
   b5bcc:	681b      	ldr	r3, [r3, #0]
   b5bce:	69db      	ldr	r3, [r3, #28]
   b5bd0:	9301      	str	r3, [sp, #4]
   b5bd2:	bd08      	pop	{r3, pc}
   b5bd4:	00030260 	.word	0x00030260

000b5bd8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5bd8:	b508      	push	{r3, lr}
   b5bda:	4b02      	ldr	r3, [pc, #8]	; (b5be4 <panic_+0xc>)
   b5bdc:	681b      	ldr	r3, [r3, #0]
   b5bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5be0:	9301      	str	r3, [sp, #4]
   b5be2:	bd08      	pop	{r3, pc}
   b5be4:	00030260 	.word	0x00030260

000b5be8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <log_message+0xc>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5bf0:	9301      	str	r3, [sp, #4]
   b5bf2:	bd08      	pop	{r3, pc}
   b5bf4:	00030260 	.word	0x00030260

000b5bf8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5bf8:	b508      	push	{r3, lr}
   b5bfa:	4b02      	ldr	r3, [pc, #8]	; (b5c04 <set_system_mode+0xc>)
   b5bfc:	681b      	ldr	r3, [r3, #0]
   b5bfe:	685b      	ldr	r3, [r3, #4]
   b5c00:	9301      	str	r3, [sp, #4]
   b5c02:	bd08      	pop	{r3, pc}
   b5c04:	00030220 	.word	0x00030220

000b5c08 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5c08:	b508      	push	{r3, lr}
   b5c0a:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <system_delay_ms+0xc>)
   b5c0c:	681b      	ldr	r3, [r3, #0]
   b5c0e:	695b      	ldr	r3, [r3, #20]
   b5c10:	9301      	str	r3, [sp, #4]
   b5c12:	bd08      	pop	{r3, pc}
   b5c14:	00030220 	.word	0x00030220

000b5c18 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5c18:	b508      	push	{r3, lr}
   b5c1a:	4b02      	ldr	r3, [pc, #8]	; (b5c24 <system_thread_set_state+0xc>)
   b5c1c:	681b      	ldr	r3, [r3, #0]
   b5c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c20:	9301      	str	r3, [sp, #4]
   b5c22:	bd08      	pop	{r3, pc}
   b5c24:	00030220 	.word	0x00030220

000b5c28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5c28:	b508      	push	{r3, lr}
   b5c2a:	4b03      	ldr	r3, [pc, #12]	; (b5c38 <system_ctrl_set_app_request_handler+0x10>)
   b5c2c:	681b      	ldr	r3, [r3, #0]
   b5c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5c32:	9301      	str	r3, [sp, #4]
   b5c34:	bd08      	pop	{r3, pc}
   b5c36:	0000      	.short	0x0000
   b5c38:	00030220 	.word	0x00030220

000b5c3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b03      	ldr	r3, [pc, #12]	; (b5c4c <system_ctrl_set_result+0x10>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5c46:	9301      	str	r3, [sp, #4]
   b5c48:	bd08      	pop	{r3, pc}
   b5c4a:	0000      	.short	0x0000
   b5c4c:	00030220 	.word	0x00030220

000b5c50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	00030244 	.word	0x00030244

000b5c60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <network_connect+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	685b      	ldr	r3, [r3, #4]
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	00030240 	.word	0x00030240

000b5c70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <network_connecting+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	689b      	ldr	r3, [r3, #8]
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	00030240 	.word	0x00030240

000b5c80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <network_disconnect+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	68db      	ldr	r3, [r3, #12]
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030240 	.word	0x00030240

000b5c90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <network_ready+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	691b      	ldr	r3, [r3, #16]
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	00030240 	.word	0x00030240

000b5ca0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <network_on+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	695b      	ldr	r3, [r3, #20]
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	00030240 	.word	0x00030240

000b5cb0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <network_off+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	699b      	ldr	r3, [r3, #24]
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	00030240 	.word	0x00030240

000b5cc0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <network_listen+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	69db      	ldr	r3, [r3, #28]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	00030240 	.word	0x00030240

000b5cd0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <network_listening+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	6a1b      	ldr	r3, [r3, #32]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	00030240 	.word	0x00030240

000b5ce0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <network_set_listen_timeout+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	00030240 	.word	0x00030240

000b5cf0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <network_get_listen_timeout+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	00030240 	.word	0x00030240

000b5d00 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <network_is_on+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	00030240 	.word	0x00030240

000b5d10 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <network_is_off+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	00030240 	.word	0x00030240

000b5d20 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <malloc+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	681b      	ldr	r3, [r3, #0]
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	0003021c 	.word	0x0003021c

000b5d30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <free+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	685b      	ldr	r3, [r3, #4]
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	0003021c 	.word	0x0003021c

000b5d40 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <realloc+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	689b      	ldr	r3, [r3, #8]
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	0003021c 	.word	0x0003021c

000b5d50 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <vsnprintf+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	0003021c 	.word	0x0003021c

000b5d60 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <abort+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	0003021c 	.word	0x0003021c

000b5d70 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <__errno+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	0003021c 	.word	0x0003021c

000b5d80 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <__assert_func+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	0003021c 	.word	0x0003021c

000b5d90 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <newlib_impure_ptr_callback+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	0003021c 	.word	0x0003021c

000b5da0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5da0:	2100      	movs	r1, #0
   b5da2:	f7ff bf31 	b.w	b5c08 <system_delay_ms>

000b5da6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5da6:	4770      	bx	lr

000b5da8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5da8:	4770      	bx	lr

000b5daa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5daa:	4770      	bx	lr

000b5dac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5dac:	4770      	bx	lr
	...

000b5db0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5db0:	4b06      	ldr	r3, [pc, #24]	; (b5dcc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5db2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5db4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5db6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5dba:	d005      	beq.n	b5dc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5dbc:	4608      	mov	r0, r1
   b5dbe:	f002 f901 	bl	b7fc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	bf08      	it	eq
   b5dc6:	2400      	moveq	r4, #0
      }
   b5dc8:	4620      	mov	r0, r4
   b5dca:	bd10      	pop	{r4, pc}
   b5dcc:	000b92a8 	.word	0x000b92a8

000b5dd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5dd0:	4b06      	ldr	r3, [pc, #24]	; (b5dec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5dd2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5dd4:	b510      	push	{r4, lr}
   b5dd6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5dda:	d005      	beq.n	b5de8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5ddc:	4608      	mov	r0, r1
   b5dde:	f002 f8f1 	bl	b7fc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5de2:	2800      	cmp	r0, #0
   b5de4:	bf08      	it	eq
   b5de6:	2400      	moveq	r4, #0
      }
   b5de8:	4620      	mov	r0, r4
   b5dea:	bd10      	pop	{r4, pc}
   b5dec:	000b92a8 	.word	0x000b92a8

000b5df0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5df0:	4b06      	ldr	r3, [pc, #24]	; (b5e0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5df2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5df4:	b510      	push	{r4, lr}
   b5df6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5dfa:	d005      	beq.n	b5e08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5dfc:	4608      	mov	r0, r1
   b5dfe:	f002 f8e1 	bl	b7fc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5e02:	2800      	cmp	r0, #0
   b5e04:	bf08      	it	eq
   b5e06:	2400      	moveq	r4, #0
      }
   b5e08:	4620      	mov	r0, r4
   b5e0a:	bd10      	pop	{r4, pc}
   b5e0c:	000b92a8 	.word	0x000b92a8

000b5e10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5e10:	b510      	push	{r4, lr}
   b5e12:	2168      	movs	r1, #104	; 0x68
   b5e14:	4604      	mov	r4, r0
   b5e16:	f7fe f940 	bl	b409a <_ZdlPvj>
   b5e1a:	4620      	mov	r0, r4
   b5e1c:	bd10      	pop	{r4, pc}

000b5e1e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5e1e:	b510      	push	{r4, lr}
   b5e20:	2128      	movs	r1, #40	; 0x28
   b5e22:	4604      	mov	r4, r0
   b5e24:	f7fe f939 	bl	b409a <_ZdlPvj>
   b5e28:	4620      	mov	r0, r4
   b5e2a:	bd10      	pop	{r4, pc}

000b5e2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5e2c:	b510      	push	{r4, lr}
   b5e2e:	2130      	movs	r1, #48	; 0x30
   b5e30:	4604      	mov	r4, r0
   b5e32:	f7fe f932 	bl	b409a <_ZdlPvj>
   b5e36:	4620      	mov	r0, r4
   b5e38:	bd10      	pop	{r4, pc}

000b5e3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5e3a:	2168      	movs	r1, #104	; 0x68
   b5e3c:	f7fe b92d 	b.w	b409a <_ZdlPvj>

000b5e40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5e40:	2128      	movs	r1, #40	; 0x28
   b5e42:	f7fe b92a 	b.w	b409a <_ZdlPvj>

000b5e46 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5e46:	2130      	movs	r1, #48	; 0x30
   b5e48:	f7fe b927 	b.w	b409a <_ZdlPvj>

000b5e4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5e4e:	2500      	movs	r5, #0
   b5e50:	1cec      	adds	r4, r5, #3
   b5e52:	428c      	cmp	r4, r1
   b5e54:	d80d      	bhi.n	b5e72 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b5e56:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5e58:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5e5a:	5d87      	ldrb	r7, [r0, r6]
   b5e5c:	4297      	cmp	r7, r2
   b5e5e:	d105      	bne.n	b5e6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5e60:	4426      	add	r6, r4
   b5e62:	42b1      	cmp	r1, r6
   b5e64:	d305      	bcc.n	b5e72 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b5e66:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5e68:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5e6c:	3401      	adds	r4, #1
   b5e6e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5e70:	e7ee      	b.n	b5e50 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5e72:	2000      	movs	r0, #0
   b5e74:	e7f9      	b.n	b5e6a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5e78 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5e78:	4a02      	ldr	r2, [pc, #8]	; (b5e84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b5e7a:	4903      	ldr	r1, [pc, #12]	; (b5e88 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b5e7c:	200a      	movs	r0, #10
   b5e7e:	f7ff beab 	b.w	b5bd8 <panic_>
   b5e82:	bf00      	nop
   b5e84:	000b58d9 	.word	0x000b58d9
   b5e88:	000b9124 	.word	0x000b9124

000b5e8c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5e8c:	b430      	push	{r4, r5}
   b5e8e:	460d      	mov	r5, r1
   b5e90:	4611      	mov	r1, r2
   b5e92:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b5e94:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5e96:	6809      	ldr	r1, [r1, #0]
   b5e98:	6828      	ldr	r0, [r5, #0]
   b5e9a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5e9e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5ea0:	bc30      	pop	{r4, r5}
   b5ea2:	4760      	bx	ip

000b5ea4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b5ea4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5ea6:	b538      	push	{r3, r4, r5, lr}
   b5ea8:	4604      	mov	r4, r0
	switch (__op)
   b5eaa:	d102      	bne.n	b5eb2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5eac:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5eae:	6023      	str	r3, [r4, #0]
	}
   b5eb0:	e003      	b.n	b5eba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b5eb2:	2a02      	cmp	r2, #2
   b5eb4:	d003      	beq.n	b5ebe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b5eb6:	2a03      	cmp	r2, #3
   b5eb8:	d00d      	beq.n	b5ed6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5eba:	2000      	movs	r0, #0
   b5ebc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5ebe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5ec0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5ec2:	f7fe f8e6 	bl	b4092 <_Znwj>
   b5ec6:	4603      	mov	r3, r0
   b5ec8:	2800      	cmp	r0, #0
   b5eca:	d0f0      	beq.n	b5eae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5ecc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5ed0:	e883 0003 	stmia.w	r3, {r0, r1}
   b5ed4:	e7eb      	b.n	b5eae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5ed6:	6800      	ldr	r0, [r0, #0]
   b5ed8:	2800      	cmp	r0, #0
   b5eda:	d0ee      	beq.n	b5eba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5edc:	2108      	movs	r1, #8
   b5ede:	f7fe f8dc 	bl	b409a <_ZdlPvj>
   b5ee2:	e7ea      	b.n	b5eba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5ee4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5ee4:	b510      	push	{r4, lr}
      if (_M_manager)
   b5ee6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5ee8:	4604      	mov	r4, r0
      if (_M_manager)
   b5eea:	b113      	cbz	r3, b5ef2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5eec:	2203      	movs	r2, #3
   b5eee:	4601      	mov	r1, r0
   b5ef0:	4798      	blx	r3
    }
   b5ef2:	4620      	mov	r0, r4
   b5ef4:	bd10      	pop	{r4, pc}

000b5ef6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5ef6:	b510      	push	{r4, lr}
   b5ef8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5efa:	3058      	adds	r0, #88	; 0x58
   b5efc:	f7ff fff2 	bl	b5ee4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5f00:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5f08:	f001 bc8e 	b.w	b7828 <_ZN6StringD1Ev>

000b5f0c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5f0c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5f0e:	6843      	ldr	r3, [r0, #4]
   b5f10:	3b01      	subs	r3, #1
    {
   b5f12:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5f14:	6043      	str	r3, [r0, #4]
   b5f16:	b963      	cbnz	r3, b5f32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5f18:	6803      	ldr	r3, [r0, #0]
   b5f1a:	689b      	ldr	r3, [r3, #8]
   b5f1c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5f1e:	68a3      	ldr	r3, [r4, #8]
   b5f20:	3b01      	subs	r3, #1
   b5f22:	60a3      	str	r3, [r4, #8]
   b5f24:	b92b      	cbnz	r3, b5f32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5f26:	6823      	ldr	r3, [r4, #0]
   b5f28:	4620      	mov	r0, r4
   b5f2a:	68db      	ldr	r3, [r3, #12]
    }
   b5f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5f30:	4718      	bx	r3
    }
   b5f32:	bd10      	pop	{r4, pc}

000b5f34 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5f34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5f38:	b2da      	uxtb	r2, r3
   b5f3a:	2a09      	cmp	r2, #9
   b5f3c:	d801      	bhi.n	b5f42 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b5f3e:	4618      	mov	r0, r3
   b5f40:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5f42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5f46:	2b05      	cmp	r3, #5
   b5f48:	d801      	bhi.n	b5f4e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b5f4a:	3857      	subs	r0, #87	; 0x57
   b5f4c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b5f4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5f52:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5f54:	bf94      	ite	ls
   b5f56:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5f58:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b5f5c:	4770      	bx	lr
	...

000b5f60 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5f60:	b510      	push	{r4, lr}
            locked_(false) {
   b5f62:	2300      	movs	r3, #0
   b5f64:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5f66:	4b04      	ldr	r3, [pc, #16]	; (b5f78 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5f68:	4604      	mov	r4, r0
   b5f6a:	6818      	ldr	r0, [r3, #0]
   b5f6c:	f7ff fc9c 	bl	b58a8 <os_mutex_recursive_lock>
        locked_ = true;
   b5f70:	2301      	movs	r3, #1
   b5f72:	7023      	strb	r3, [r4, #0]
    }
   b5f74:	4620      	mov	r0, r4
   b5f76:	bd10      	pop	{r4, pc}
   b5f78:	2003e6c0 	.word	0x2003e6c0

000b5f7c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5f7c:	b510      	push	{r4, lr}
        if (locked_) {
   b5f7e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5f80:	4604      	mov	r4, r0
        if (locked_) {
   b5f82:	b11b      	cbz	r3, b5f8c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5f84:	4b02      	ldr	r3, [pc, #8]	; (b5f90 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5f86:	6818      	ldr	r0, [r3, #0]
   b5f88:	f7ff fc96 	bl	b58b8 <os_mutex_recursive_unlock>
    }
   b5f8c:	4620      	mov	r0, r4
   b5f8e:	bd10      	pop	{r4, pc}
   b5f90:	2003e6c0 	.word	0x2003e6c0

000b5f94 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5f94:	b082      	sub	sp, #8
   b5f96:	4603      	mov	r3, r0
    address_ = addr;
   b5f98:	6808      	ldr	r0, [r1, #0]
   b5f9a:	6849      	ldr	r1, [r1, #4]
   b5f9c:	466a      	mov	r2, sp
   b5f9e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5fa0:	466a      	mov	r2, sp
   b5fa2:	ca03      	ldmia	r2!, {r0, r1}
   b5fa4:	6018      	str	r0, [r3, #0]
}
   b5fa6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5fa8:	6059      	str	r1, [r3, #4]
}
   b5faa:	b002      	add	sp, #8
   b5fac:	4770      	bx	lr

000b5fae <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5fae:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5fb0:	7982      	ldrb	r2, [r0, #6]
   b5fb2:	798b      	ldrb	r3, [r1, #6]
   b5fb4:	429a      	cmp	r2, r3
   b5fb6:	d106      	bne.n	b5fc6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5fb8:	2206      	movs	r2, #6
   b5fba:	f002 f91f 	bl	b81fc <memcmp>
   b5fbe:	fab0 f080 	clz	r0, r0
   b5fc2:	0940      	lsrs	r0, r0, #5
}
   b5fc4:	bd08      	pop	{r3, pc}
    return false;
   b5fc6:	2000      	movs	r0, #0
   b5fc8:	e7fc      	b.n	b5fc4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5fca <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5fce:	6003      	str	r3, [r0, #0]
   b5fd0:	8083      	strh	r3, [r0, #4]
}
   b5fd2:	2000      	movs	r0, #0
   b5fd4:	4770      	bx	lr

000b5fd6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5fd6:	b508      	push	{r3, lr}
   b5fd8:	4602      	mov	r2, r0
        : address_{} {
   b5fda:	2100      	movs	r1, #0
   b5fdc:	6001      	str	r1, [r0, #0]
   b5fde:	6041      	str	r1, [r0, #4]
    clear();
   b5fe0:	f7ff fff3 	bl	b5fca <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5fe4:	7191      	strb	r1, [r2, #6]
}
   b5fe6:	4610      	mov	r0, r2
   b5fe8:	bd08      	pop	{r3, pc}
	...

000b5fec <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5fec:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5fee:	2301      	movs	r3, #1
   b5ff0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5ff2:	4b05      	ldr	r3, [pc, #20]	; (b6008 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5ff4:	4602      	mov	r2, r0
   b5ff6:	f103 0110 	add.w	r1, r3, #16
   b5ffa:	f853 4b04 	ldr.w	r4, [r3], #4
   b5ffe:	f842 4b04 	str.w	r4, [r2], #4
   b6002:	428b      	cmp	r3, r1
   b6004:	d1f9      	bne.n	b5ffa <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6006:	bd10      	pop	{r4, pc}
   b6008:	000b92b6 	.word	0x000b92b6

000b600c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b600c:	b510      	push	{r4, lr}
    if (uuid128) {
   b600e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6010:	4604      	mov	r4, r0
    if (uuid128) {
   b6012:	b1b1      	cbz	r1, b6042 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6014:	2a01      	cmp	r2, #1
   b6016:	f101 0210 	add.w	r2, r1, #16
   b601a:	d10a      	bne.n	b6032 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b601c:	4601      	mov	r1, r0
   b601e:	f853 0b04 	ldr.w	r0, [r3], #4
   b6022:	f841 0b04 	str.w	r0, [r1], #4
   b6026:	4293      	cmp	r3, r2
   b6028:	d1f9      	bne.n	b601e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b602a:	2301      	movs	r3, #1
   b602c:	6123      	str	r3, [r4, #16]
}
   b602e:	4620      	mov	r0, r4
   b6030:	bd10      	pop	{r4, pc}
   b6032:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6034:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6038:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b603c:	429a      	cmp	r2, r3
   b603e:	d1f9      	bne.n	b6034 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6040:	e7f3      	b.n	b602a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6042:	2210      	movs	r2, #16
   b6044:	f002 f912 	bl	b826c <memset>
   b6048:	e7f1      	b.n	b602e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b604a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b604a:	b538      	push	{r3, r4, r5, lr}
   b604c:	4604      	mov	r4, r0
   b604e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6050:	461a      	mov	r2, r3
   b6052:	f7ff ffdb 	bl	b600c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6056:	81a5      	strh	r5, [r4, #12]
}
   b6058:	4620      	mov	r0, r4
   b605a:	bd38      	pop	{r3, r4, r5, pc}

000b605c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b605c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b605e:	6902      	ldr	r2, [r0, #16]
   b6060:	b922      	cbnz	r2, b606c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6062:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6064:	3800      	subs	r0, #0
   b6066:	bf18      	it	ne
   b6068:	2001      	movne	r0, #1
}
   b606a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b606c:	4902      	ldr	r1, [pc, #8]	; (b6078 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b606e:	2210      	movs	r2, #16
   b6070:	f002 f8c4 	bl	b81fc <memcmp>
   b6074:	e7f6      	b.n	b6064 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6076:	bf00      	nop
   b6078:	000b92d6 	.word	0x000b92d6

000b607c <_ZNK8particle7BleUuid4typeEv>:
}
   b607c:	6900      	ldr	r0, [r0, #16]
   b607e:	4770      	bx	lr

000b6080 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6080:	b538      	push	{r3, r4, r5, lr}
   b6082:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6084:	2214      	movs	r2, #20
   b6086:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6088:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b608a:	f002 f8ef 	bl	b826c <memset>
    if (type_ == BleUuidType::SHORT) {
   b608e:	6923      	ldr	r3, [r4, #16]
   b6090:	b91b      	cbnz	r3, b609a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6092:	89a3      	ldrh	r3, [r4, #12]
   b6094:	802b      	strh	r3, [r5, #0]
}
   b6096:	4628      	mov	r0, r5
   b6098:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b609a:	2301      	movs	r3, #1
   b609c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b609e:	4621      	mov	r1, r4
   b60a0:	462b      	mov	r3, r5
   b60a2:	f104 0210 	add.w	r2, r4, #16
   b60a6:	f851 0b04 	ldr.w	r0, [r1], #4
   b60aa:	f843 0b04 	str.w	r0, [r3], #4
   b60ae:	4291      	cmp	r1, r2
   b60b0:	d1f9      	bne.n	b60a6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b60b2:	e7f0      	b.n	b6096 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b60b4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b60b4:	8980      	ldrh	r0, [r0, #12]
   b60b6:	4770      	bx	lr

000b60b8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b60b8:	4770      	bx	lr

000b60ba <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b60ba:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b60bc:	6902      	ldr	r2, [r0, #16]
   b60be:	690b      	ldr	r3, [r1, #16]
   b60c0:	429a      	cmp	r2, r3
   b60c2:	d106      	bne.n	b60d2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b60c4:	2210      	movs	r2, #16
   b60c6:	f002 f899 	bl	b81fc <memcmp>
   b60ca:	fab0 f080 	clz	r0, r0
   b60ce:	0940      	lsrs	r0, r0, #5
}
   b60d0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b60d2:	2000      	movs	r0, #0
   b60d4:	e7fc      	b.n	b60d0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b60d8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b60d8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b60da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b60de:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b60e0:	4b34      	ldr	r3, [pc, #208]	; (b61b4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b60e2:	460c      	mov	r4, r1
   b60e4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b60e6:	4602      	mov	r2, r0
   b60e8:	f103 0110 	add.w	r1, r3, #16
   b60ec:	f853 0b04 	ldr.w	r0, [r3], #4
   b60f0:	f842 0b04 	str.w	r0, [r2], #4
   b60f4:	428b      	cmp	r3, r1
   b60f6:	d1f9      	bne.n	b60ec <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b60f8:	b344      	cbz	r4, b614c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b60fa:	2124      	movs	r1, #36	; 0x24
   b60fc:	4620      	mov	r0, r4
   b60fe:	f002 f918 	bl	b8332 <strnlen>
   b6102:	2804      	cmp	r0, #4
   b6104:	f04f 0500 	mov.w	r5, #0
   b6108:	d123      	bne.n	b6152 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b610a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b610e:	af01      	add	r7, sp, #4
   b6110:	1ca5      	adds	r5, r4, #2
   b6112:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6114:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6118:	f7ff ff0c 	bl	b5f34 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b611c:	f1b0 0800 	subs.w	r8, r0, #0
   b6120:	db12      	blt.n	b6148 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6122:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6126:	f7ff ff05 	bl	b5f34 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b612a:	2800      	cmp	r0, #0
   b612c:	db0c      	blt.n	b6148 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b612e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6130:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6134:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6136:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b613a:	d1eb      	bne.n	b6114 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b613c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6140:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6142:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6146:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6148:	2300      	movs	r3, #0
   b614a:	6133      	str	r3, [r6, #16]
}
   b614c:	b002      	add	sp, #8
   b614e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6152:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6156:	2124      	movs	r1, #36	; 0x24
   b6158:	4620      	mov	r0, r4
   b615a:	f002 f8ea 	bl	b8332 <strnlen>
   b615e:	42a8      	cmp	r0, r5
   b6160:	d807      	bhi.n	b6172 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6162:	4642      	mov	r2, r8
   b6164:	2100      	movs	r1, #0
   b6166:	4630      	mov	r0, r6
}
   b6168:	b002      	add	sp, #8
   b616a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b616e:	f002 b87d 	b.w	b826c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6172:	f1b8 0f00 	cmp.w	r8, #0
   b6176:	d0e9      	beq.n	b614c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6178:	5d60      	ldrb	r0, [r4, r5]
   b617a:	f7ff fedb 	bl	b5f34 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b617e:	0603      	lsls	r3, r0, #24
   b6180:	d415      	bmi.n	b61ae <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6182:	0100      	lsls	r0, r0, #4
   b6184:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6188:	b2c7      	uxtb	r7, r0
   b618a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b618e:	2124      	movs	r1, #36	; 0x24
   b6190:	4620      	mov	r0, r4
   b6192:	f002 f8ce 	bl	b8332 <strnlen>
   b6196:	3501      	adds	r5, #1
   b6198:	42a8      	cmp	r0, r5
   b619a:	d908      	bls.n	b61ae <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b619c:	5d60      	ldrb	r0, [r4, r5]
   b619e:	f7ff fec9 	bl	b5f34 <_ZN8particle11hexToNibbleEc>
   b61a2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b61a4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b61a6:	bfa4      	itt	ge
   b61a8:	4338      	orrge	r0, r7
   b61aa:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b61ae:	3501      	adds	r5, #1
   b61b0:	e7d1      	b.n	b6156 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b61b2:	bf00      	nop
   b61b4:	000b92b6 	.word	0x000b92b6

000b61b8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b61b8:	b513      	push	{r0, r1, r4, lr}
   b61ba:	4604      	mov	r4, r0
   b61bc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b61be:	f7ff ff15 	bl	b5fec <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b61c2:	4620      	mov	r0, r4
   b61c4:	9901      	ldr	r1, [sp, #4]
   b61c6:	f7ff ff87 	bl	b60d8 <_ZN8particle7BleUuid9constructEPKc>
}
   b61ca:	4620      	mov	r0, r4
   b61cc:	b002      	add	sp, #8
   b61ce:	bd10      	pop	{r4, pc}

000b61d0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b61d0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b61d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b61d6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b61d8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b61da:	8043      	strh	r3, [r0, #2]
   b61dc:	220e      	movs	r2, #14
   b61de:	4629      	mov	r1, r5
   b61e0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b61e2:	7105      	strb	r5, [r0, #4]
   b61e4:	3006      	adds	r0, #6
   b61e6:	f002 f841 	bl	b826c <memset>
   b61ea:	f104 0014 	add.w	r0, r4, #20
   b61ee:	f7ff fefd 	bl	b5fec <_ZN8particle7BleUuidC1Ev>
   b61f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b61f6:	f7ff fef9 	bl	b5fec <_ZN8particle7BleUuidC1Ev>
   b61fa:	4904      	ldr	r1, [pc, #16]	; (b620c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b61fc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6200:	f001 fb5d 	bl	b78be <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6204:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6206:	4620      	mov	r0, r4
   b6208:	bd38      	pop	{r3, r4, r5, pc}
   b620a:	bf00      	nop
   b620c:	000b855e 	.word	0x000b855e

000b6210 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6210:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6212:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6216:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b621a:	4293      	cmp	r3, r2
   b621c:	4618      	mov	r0, r3
   b621e:	d006      	beq.n	b622e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6220:	6804      	ldr	r4, [r0, #0]
   b6222:	8824      	ldrh	r4, [r4, #0]
   b6224:	428c      	cmp	r4, r1
   b6226:	f103 0308 	add.w	r3, r3, #8
   b622a:	d1f6      	bne.n	b621a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b622c:	bd10      	pop	{r4, pc}
        return nullptr;
   b622e:	2000      	movs	r0, #0
   b6230:	e7fc      	b.n	b622c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6234 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6234:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6236:	4606      	mov	r6, r0
   b6238:	b085      	sub	sp, #20
   b623a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b623c:	460d      	mov	r5, r1
   b623e:	2900      	cmp	r1, #0
   b6240:	d050      	beq.n	b62e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6242:	2a00      	cmp	r2, #0
   b6244:	d04e      	beq.n	b62e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6246:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6248:	7823      	ldrb	r3, [r4, #0]
   b624a:	2af4      	cmp	r2, #244	; 0xf4
   b624c:	bf28      	it	cs
   b624e:	22f4      	movcs	r2, #244	; 0xf4
   b6250:	b343      	cbz	r3, b62a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6252:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6254:	0798      	lsls	r0, r3, #30
   b6256:	d509      	bpl.n	b626c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6258:	89a0      	ldrh	r0, [r4, #12]
   b625a:	9203      	str	r2, [sp, #12]
   b625c:	2300      	movs	r3, #0
   b625e:	f7ff fabb 	bl	b57d8 <hal_ble_gatt_server_set_characteristic_value>
   b6262:	2800      	cmp	r0, #0
   b6264:	9a03      	ldr	r2, [sp, #12]
   b6266:	da03      	bge.n	b6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6268:	b005      	add	sp, #20
   b626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b626c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6270:	6834      	ldr	r4, [r6, #0]
   b6272:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6274:	06d9      	lsls	r1, r3, #27
   b6276:	d509      	bpl.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6278:	2f01      	cmp	r7, #1
   b627a:	d007      	beq.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b627c:	89a0      	ldrh	r0, [r4, #12]
   b627e:	2300      	movs	r3, #0
   b6280:	4629      	mov	r1, r5
}
   b6282:	b005      	add	sp, #20
   b6284:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6288:	f7ff bae2 	b.w	b5850 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b628c:	069b      	lsls	r3, r3, #26
   b628e:	d5eb      	bpl.n	b6268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6290:	2f02      	cmp	r7, #2
   b6292:	d0e9      	beq.n	b6268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6294:	89a0      	ldrh	r0, [r4, #12]
   b6296:	2300      	movs	r3, #0
   b6298:	4629      	mov	r1, r5
}
   b629a:	b005      	add	sp, #20
   b629c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b62a0:	f7ff bae0 	b.w	b5864 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b62a4:	8860      	ldrh	r0, [r4, #2]
   b62a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b62aa:	4288      	cmp	r0, r1
   b62ac:	d01c      	beq.n	b62e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b62ae:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b62b0:	074e      	lsls	r6, r1, #29
   b62b2:	d501      	bpl.n	b62b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b62b4:	2f01      	cmp	r7, #1
   b62b6:	d104      	bne.n	b62c2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b62b8:	070b      	lsls	r3, r1, #28
   b62ba:	d409      	bmi.n	b62d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b62bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b62c0:	e7d2      	b.n	b6268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b62c2:	89a1      	ldrh	r1, [r4, #12]
   b62c4:	9300      	str	r3, [sp, #0]
   b62c6:	4613      	mov	r3, r2
   b62c8:	462a      	mov	r2, r5
   b62ca:	f7ff fa99 	bl	b5800 <hal_ble_gatt_client_write_without_response>
   b62ce:	e7cb      	b.n	b6268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b62d0:	2f02      	cmp	r7, #2
   b62d2:	d0f3      	beq.n	b62bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b62d4:	2300      	movs	r3, #0
   b62d6:	89a1      	ldrh	r1, [r4, #12]
   b62d8:	9300      	str	r3, [sp, #0]
   b62da:	4613      	mov	r3, r2
   b62dc:	462a      	mov	r2, r5
   b62de:	f7ff fa85 	bl	b57ec <hal_ble_gatt_client_write_with_response>
   b62e2:	e7c1      	b.n	b6268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b62e4:	4802      	ldr	r0, [pc, #8]	; (b62f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b62e6:	e7bf      	b.n	b6268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b62e8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b62ec:	e7bc      	b.n	b6268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b62ee:	bf00      	nop
   b62f0:	fffffef2 	.word	0xfffffef2

000b62f4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b62f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b62f8:	2600      	movs	r6, #0
   b62fa:	6006      	str	r6, [r0, #0]
   b62fc:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b62fe:	2028      	movs	r0, #40	; 0x28
   b6300:	460c      	mov	r4, r1
   b6302:	f7fd fec6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6306:	1e05      	subs	r5, r0, #0
   b6308:	f105 080c 	add.w	r8, r5, #12
   b630c:	d00f      	beq.n	b632e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b630e:	2301      	movs	r3, #1
   b6310:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6314:	4b08      	ldr	r3, [pc, #32]	; (b6338 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6316:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6318:	4640      	mov	r0, r8
   b631a:	f7ff fe67 	bl	b5fec <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b631e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6320:	622e      	str	r6, [r5, #32]
   b6322:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6326:	4646      	mov	r6, r8
   b6328:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b632a:	6823      	ldr	r3, [r4, #0]
   b632c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b632e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6332:	4638      	mov	r0, r7
   b6334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6338:	000b9278 	.word	0x000b9278

000b633c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b633c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b633e:	2500      	movs	r5, #0
   b6340:	6005      	str	r5, [r0, #0]
   b6342:	4606      	mov	r6, r0
   b6344:	2030      	movs	r0, #48	; 0x30
   b6346:	f7fd fea4 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b634a:	4604      	mov	r4, r0
   b634c:	b188      	cbz	r0, b6372 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b634e:	2301      	movs	r3, #1
   b6350:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6354:	4b09      	ldr	r3, [pc, #36]	; (b637c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6356:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6358:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b635c:	8183      	strh	r3, [r0, #12]
   b635e:	300e      	adds	r0, #14
   b6360:	f7ff fe39 	bl	b5fd6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6364:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6368:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b636c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6370:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6372:	6074      	str	r4, [r6, #4]
   b6374:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6376:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6378:	4630      	mov	r0, r6
   b637a:	bd70      	pop	{r4, r5, r6, pc}
   b637c:	000b9294 	.word	0x000b9294

000b6380 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6380:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6382:	460d      	mov	r5, r1
   b6384:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6386:	a801      	add	r0, sp, #4
   b6388:	f7ff fdea 	bl	b5f60 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b638c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b638e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6392:	6023      	str	r3, [r4, #0]
   b6394:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6398:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b639a:	a801      	add	r0, sp, #4
   b639c:	f7ff fdee 	bl	b5f7c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b63a0:	4620      	mov	r0, r4
   b63a2:	b003      	add	sp, #12
   b63a4:	bd30      	pop	{r4, r5, pc}

000b63a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b63a6:	b530      	push	{r4, r5, lr}
   b63a8:	4605      	mov	r5, r0
   b63aa:	b087      	sub	sp, #28
   b63ac:	460c      	mov	r4, r1
    WiringBleLock lk;
   b63ae:	a801      	add	r0, sp, #4
   b63b0:	f7ff fdd6 	bl	b5f60 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b63b4:	682a      	ldr	r2, [r5, #0]
   b63b6:	6823      	ldr	r3, [r4, #0]
   b63b8:	8812      	ldrh	r2, [r2, #0]
   b63ba:	881b      	ldrh	r3, [r3, #0]
   b63bc:	429a      	cmp	r2, r3
   b63be:	d10d      	bne.n	b63dc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b63c0:	4629      	mov	r1, r5
   b63c2:	a802      	add	r0, sp, #8
   b63c4:	f7ff ffdc 	bl	b6380 <_ZNK8particle13BlePeerDevice7addressEv>
   b63c8:	4621      	mov	r1, r4
   b63ca:	a804      	add	r0, sp, #16
   b63cc:	f7ff ffd8 	bl	b6380 <_ZNK8particle13BlePeerDevice7addressEv>
   b63d0:	a904      	add	r1, sp, #16
   b63d2:	a802      	add	r0, sp, #8
   b63d4:	f7ff fdeb 	bl	b5fae <_ZNK8particle10BleAddresseqERKS0_>
   b63d8:	4604      	mov	r4, r0
   b63da:	b900      	cbnz	r0, b63de <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b63dc:	2400      	movs	r4, #0
    WiringBleLock lk;
   b63de:	a801      	add	r0, sp, #4
   b63e0:	f7ff fdcc 	bl	b5f7c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b63e4:	4620      	mov	r0, r4
   b63e6:	b007      	add	sp, #28
   b63e8:	bd30      	pop	{r4, r5, pc}
	...

000b63ec <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b63ec:	b510      	push	{r4, lr}
   b63ee:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b63f0:	2064      	movs	r0, #100	; 0x64
   b63f2:	f7fd fe4e 	bl	b4092 <_Znwj>
   b63f6:	b168      	cbz	r0, b6414 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b63f8:	2300      	movs	r3, #0
   b63fa:	e9c0 3300 	strd	r3, r3, [r0]
   b63fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6402:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6406:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b640a:	6203      	str	r3, [r0, #32]
   b640c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b640e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6410:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6412:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6414:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6416:	b920      	cbnz	r0, b6422 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6418:	4a0a      	ldr	r2, [pc, #40]	; (b6444 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b641a:	490b      	ldr	r1, [pc, #44]	; (b6448 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b641c:	200a      	movs	r0, #10
   b641e:	f7ff fbdb 	bl	b5bd8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6422:	2000      	movs	r0, #0
   b6424:	f7ff f99c 	bl	b5760 <hal_ble_stack_init>
   b6428:	b120      	cbz	r0, b6434 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b642a:	4a06      	ldr	r2, [pc, #24]	; (b6444 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b642c:	4907      	ldr	r1, [pc, #28]	; (b644c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b642e:	200a      	movs	r0, #10
   b6430:	f7ff fbd2 	bl	b5bd8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6434:	6821      	ldr	r1, [r4, #0]
   b6436:	4806      	ldr	r0, [pc, #24]	; (b6450 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6438:	2200      	movs	r2, #0
   b643a:	f7ff f9ff 	bl	b583c <hal_ble_set_callback_on_periph_link_events>
}
   b643e:	4620      	mov	r0, r4
   b6440:	bd10      	pop	{r4, pc}
   b6442:	bf00      	nop
   b6444:	000b58d9 	.word	0x000b58d9
   b6448:	000b9124 	.word	0x000b9124
   b644c:	000b9162 	.word	0x000b9162
   b6450:	000b69fd 	.word	0x000b69fd

000b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6454:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6456:	4c0a      	ldr	r4, [pc, #40]	; (b6480 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6458:	7823      	ldrb	r3, [r4, #0]
   b645a:	f3bf 8f5b 	dmb	ish
   b645e:	07db      	lsls	r3, r3, #31
   b6460:	d40c      	bmi.n	b647c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6462:	4620      	mov	r0, r4
   b6464:	f7fd fe28 	bl	b40b8 <__cxa_guard_acquire>
   b6468:	b140      	cbz	r0, b647c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b646a:	4806      	ldr	r0, [pc, #24]	; (b6484 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b646c:	f7ff ffbe 	bl	b63ec <_ZN8particle14BleLocalDeviceC1Ev>
   b6470:	4620      	mov	r0, r4
   b6472:	f7fd fe26 	bl	b40c2 <__cxa_guard_release>
   b6476:	4804      	ldr	r0, [pc, #16]	; (b6488 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6478:	f001 feb6 	bl	b81e8 <atexit>
    return instance;
}
   b647c:	4801      	ldr	r0, [pc, #4]	; (b6484 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b647e:	bd10      	pop	{r4, pc}
   b6480:	2003e6b8 	.word	0x2003e6b8
   b6484:	2003e6c4 	.word	0x2003e6c4
   b6488:	000b66c9 	.word	0x000b66c9

000b648c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b648c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b648e:	6803      	ldr	r3, [r0, #0]
   b6490:	3b09      	subs	r3, #9
   b6492:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6494:	b08d      	sub	sp, #52	; 0x34
   b6496:	4604      	mov	r4, r0
   b6498:	460d      	mov	r5, r1
    switch (event->type) {
   b649a:	d811      	bhi.n	b64c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b649c:	f7ff ffda 	bl	b6454 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b64a0:	88a1      	ldrh	r1, [r4, #4]
   b64a2:	6800      	ldr	r0, [r0, #0]
   b64a4:	f7ff feb4 	bl	b6210 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b64a8:	4603      	mov	r3, r0
   b64aa:	b958      	cbnz	r0, b64c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b64ac:	2220      	movs	r2, #32
   b64ae:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b64b2:	4a0b      	ldr	r2, [pc, #44]	; (b64e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b64b4:	9200      	str	r2, [sp, #0]
   b64b6:	490b      	ldr	r1, [pc, #44]	; (b64e4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b64b8:	aa04      	add	r2, sp, #16
   b64ba:	2032      	movs	r0, #50	; 0x32
   b64bc:	f7ff fb94 	bl	b5be8 <log_message>
}
   b64c0:	b00d      	add	sp, #52	; 0x34
   b64c2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b64c4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b64c6:	2a00      	cmp	r2, #0
   b64c8:	d0fa      	beq.n	b64c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b64ca:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b64ce:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b64d2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b64d6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b64d8:	aa04      	add	r2, sp, #16
   b64da:	a903      	add	r1, sp, #12
   b64dc:	47a0      	blx	r4
}
   b64de:	e7ef      	b.n	b64c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b64e0:	000b91a4 	.word	0x000b91a4
   b64e4:	000b913b 	.word	0x000b913b

000b64e8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b64e8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b64ea:	2000      	movs	r0, #0
   b64ec:	f7ff f938 	bl	b5760 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b64f0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b64f4:	bd08      	pop	{r3, pc}

000b64f6 <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>:

int BleLocalDevice::setDeviceName(const char* name, size_t len) const {
    return hal_ble_gap_set_device_name(name, len, nullptr);
}

int BleLocalDevice::setDeviceName(const char* name) const {
   b64f6:	b510      	push	{r4, lr}
   b64f8:	460c      	mov	r4, r1
    return setDeviceName(name, strnlen(name, BLE_MAX_DEV_NAME_LEN));
   b64fa:	4620      	mov	r0, r4
   b64fc:	2114      	movs	r1, #20
   b64fe:	f001 ff18 	bl	b8332 <strnlen>
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b6502:	2200      	movs	r2, #0
    return setDeviceName(name, strnlen(name, BLE_MAX_DEV_NAME_LEN));
   b6504:	4601      	mov	r1, r0
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b6506:	4620      	mov	r0, r4
}
   b6508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b650c:	f7ff b930 	b.w	b5770 <hal_ble_gap_set_device_name>

000b6510 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6510:	b919      	cbnz	r1, b651a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6512:	460a      	mov	r2, r1
   b6514:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6516:	f7ff b933 	b.w	b5780 <hal_ble_gap_set_advertising_data>
   b651a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b651e:	2200      	movs	r2, #0
   b6520:	e7f9      	b.n	b6516 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6522 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6522:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6524:	69d8      	ldr	r0, [r3, #28]
}
   b6526:	2800      	cmp	r0, #0
   b6528:	bfd4      	ite	le
   b652a:	2000      	movle	r0, #0
   b652c:	2001      	movgt	r0, #1
   b652e:	4770      	bx	lr

000b6530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6530:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6532:	1e14      	subs	r4, r2, #0
   b6534:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6536:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6538:	db02      	blt.n	b6540 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b653a:	1862      	adds	r2, r4, r1
   b653c:	429a      	cmp	r2, r3
   b653e:	dd00      	ble.n	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6540:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6542:	682a      	ldr	r2, [r5, #0]
   b6544:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6546:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6548:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b654a:	1a52      	subs	r2, r2, r1
   b654c:	f001 fe74 	bl	b8238 <memmove>
    size_ -= n;
   b6550:	686a      	ldr	r2, [r5, #4]
   b6552:	1b12      	subs	r2, r2, r4
   b6554:	606a      	str	r2, [r5, #4]
}
   b6556:	bd38      	pop	{r3, r4, r5, pc}

000b6558 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6558:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b655a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b655c:	4604      	mov	r4, r0
   b655e:	460d      	mov	r5, r1
   b6560:	ab01      	add	r3, sp, #4
   b6562:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6566:	f7ff fc71 	bl	b5e4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b656a:	4602      	mov	r2, r0
   b656c:	b138      	cbz	r0, b657e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b656e:	9901      	ldr	r1, [sp, #4]
   b6570:	4620      	mov	r0, r4
   b6572:	f7ff ffdd 	bl	b6530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6576:	4629      	mov	r1, r5
   b6578:	4620      	mov	r0, r4
   b657a:	f7ff ffed 	bl	b6558 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b657e:	b003      	add	sp, #12
   b6580:	bd30      	pop	{r4, r5, pc}

000b6582 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6582:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6584:	460c      	mov	r4, r1
   b6586:	b929      	cbnz	r1, b6594 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6588:	460a      	mov	r2, r1
   b658a:	4608      	mov	r0, r1
}
   b658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6590:	f7ff b8fe 	b.w	b5790 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6594:	2101      	movs	r1, #1
   b6596:	4620      	mov	r0, r4
   b6598:	f7ff ffde 	bl	b6558 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b659c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b65a0:	2200      	movs	r2, #0
   b65a2:	e7f3      	b.n	b658c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b65a4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b65a4:	b538      	push	{r3, r4, r5, lr}
   b65a6:	4604      	mov	r4, r0
   b65a8:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b65aa:	f7ff ffb1 	bl	b6510 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b65ae:	2800      	cmp	r0, #0
   b65b0:	db0a      	blt.n	b65c8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b65b2:	4629      	mov	r1, r5
   b65b4:	4620      	mov	r0, r4
   b65b6:	f7ff ffe4 	bl	b6582 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b65ba:	2800      	cmp	r0, #0
   b65bc:	db04      	blt.n	b65c8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b65be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b65c2:	2000      	movs	r0, #0
   b65c4:	f7ff b8ec 	b.w	b57a0 <hal_ble_gap_start_advertising>
}
   b65c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b65cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b65cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b65ce:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b65d0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b65d2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b65d4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b65d6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b65d8:	f7fd fd5b 	bl	b4092 <_Znwj>
   b65dc:	b118      	cbz	r0, b65e6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b65de:	682b      	ldr	r3, [r5, #0]
   b65e0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b65e2:	686b      	ldr	r3, [r5, #4]
   b65e4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b65e6:	4b03      	ldr	r3, [pc, #12]	; (b65f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b65e8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b65ea:	4b03      	ldr	r3, [pc, #12]	; (b65f8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b65ec:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b65ee:	60a3      	str	r3, [r4, #8]
      }
   b65f0:	4620      	mov	r0, r4
   b65f2:	bd38      	pop	{r3, r4, r5, pc}
   b65f4:	000b5e8d 	.word	0x000b5e8d
   b65f8:	000b5ea5 	.word	0x000b5ea5

000b65fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b65fc:	680b      	ldr	r3, [r1, #0]
   b65fe:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6600:	b113      	cbz	r3, b6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6602:	685a      	ldr	r2, [r3, #4]
   b6604:	3201      	adds	r2, #1
   b6606:	605a      	str	r2, [r3, #4]
      }
   b6608:	4770      	bx	lr

000b660a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b660a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b660c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6610:	4604      	mov	r4, r0
   b6612:	f840 3b04 	str.w	r3, [r0], #4
   b6616:	f7ff fff1 	bl	b65fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b661a:	6823      	ldr	r3, [r4, #0]
   b661c:	b90b      	cbnz	r3, b6622 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b661e:	f7ff fc2b 	bl	b5e78 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6622:	4620      	mov	r0, r4
   b6624:	bd10      	pop	{r4, pc}

000b6626 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6626:	b510      	push	{r4, lr}
   b6628:	f851 3b04 	ldr.w	r3, [r1], #4
   b662c:	4604      	mov	r4, r0
   b662e:	f840 3b04 	str.w	r3, [r0], #4
   b6632:	f7ff ffe3 	bl	b65fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6636:	4620      	mov	r0, r4
   b6638:	bd10      	pop	{r4, pc}

000b663a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b663a:	b510      	push	{r4, lr}
   b663c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6640:	4604      	mov	r4, r0
   b6642:	f840 3b04 	str.w	r3, [r0], #4
   b6646:	f7ff ffd9 	bl	b65fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b664a:	4620      	mov	r0, r4
   b664c:	bd10      	pop	{r4, pc}

000b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b664e:	b510      	push	{r4, lr}
   b6650:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6652:	6800      	ldr	r0, [r0, #0]
   b6654:	b108      	cbz	r0, b665a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6656:	f7ff fc59 	bl	b5f0c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b665a:	4620      	mov	r0, r4
   b665c:	bd10      	pop	{r4, pc}

000b665e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b665e:	b510      	push	{r4, lr}
   b6660:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6662:	3004      	adds	r0, #4
   b6664:	f7ff fff3 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6668:	4620      	mov	r0, r4
   b666a:	bd10      	pop	{r4, pc}

000b666c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b666c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b666e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6672:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6674:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6678:	42ae      	cmp	r6, r5
   b667a:	d004      	beq.n	b6686 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b667c:	1d28      	adds	r0, r5, #4
   b667e:	f7ff ffe6 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6682:	3508      	adds	r5, #8
   b6684:	e7f8      	b.n	b6678 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6686:	6820      	ldr	r0, [r4, #0]
   b6688:	f7ff fb52 	bl	b5d30 <free>
}
   b668c:	4620      	mov	r0, r4
   b668e:	bd70      	pop	{r4, r5, r6, pc}

000b6690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6690:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6692:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6696:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6698:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b669c:	42ae      	cmp	r6, r5
   b669e:	d004      	beq.n	b66aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b66a0:	1d28      	adds	r0, r5, #4
   b66a2:	f7ff ffd4 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66a6:	3508      	adds	r5, #8
   b66a8:	e7f8      	b.n	b669c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b66aa:	6820      	ldr	r0, [r4, #0]
   b66ac:	f7ff fb40 	bl	b5d30 <free>
}
   b66b0:	4620      	mov	r0, r4
   b66b2:	bd70      	pop	{r4, r5, r6, pc}

000b66b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b66b4:	b510      	push	{r4, lr}
   b66b6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b66b8:	3024      	adds	r0, #36	; 0x24
   b66ba:	f7ff ffe9 	bl	b6690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b66be:	f104 0018 	add.w	r0, r4, #24
   b66c2:	f7ff ffd3 	bl	b666c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b66c6:	bd10      	pop	{r4, pc}

000b66c8 <__tcf_0>:
    static BleLocalDevice instance;
   b66c8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b66ca:	4b17      	ldr	r3, [pc, #92]	; (b6728 <__tcf_0+0x60>)
   b66cc:	681c      	ldr	r4, [r3, #0]
   b66ce:	b354      	cbz	r4, b6726 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b66d0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b66d4:	f7ff fc06 	bl	b5ee4 <_ZNSt14_Function_baseD1Ev>
   b66d8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b66dc:	f7ff fc02 	bl	b5ee4 <_ZNSt14_Function_baseD1Ev>
   b66e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b66e4:	f7ff fbfe 	bl	b5ee4 <_ZNSt14_Function_baseD1Ev>
   b66e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b66ec:	f7ff fbfa 	bl	b5ee4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b66f0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b66f4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b66f8:	42ae      	cmp	r6, r5
   b66fa:	d004      	beq.n	b6706 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b66fc:	1d28      	adds	r0, r5, #4
   b66fe:	f7ff ffa6 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6702:	3508      	adds	r5, #8
   b6704:	e7f8      	b.n	b66f8 <__tcf_0+0x30>
    ::free(ptr);
   b6706:	69a0      	ldr	r0, [r4, #24]
   b6708:	f7ff fb12 	bl	b5d30 <free>
    ~BleLocalDeviceImpl() = default;
   b670c:	f104 000c 	add.w	r0, r4, #12
   b6710:	f7ff ffbe 	bl	b6690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6714:	4620      	mov	r0, r4
   b6716:	f7ff ffa9 	bl	b666c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b671a:	4620      	mov	r0, r4
   b671c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b671e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6722:	f7fd bcba 	b.w	b409a <_ZdlPvj>
   b6726:	bd70      	pop	{r4, r5, r6, pc}
   b6728:	2003e6c4 	.word	0x2003e6c4

000b672c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b672c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b672e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6730:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6734:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6738:	6803      	ldr	r3, [r0, #0]
   b673a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b673c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b673e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6740:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6742:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6744:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6746:	f7ff ff82 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b674a:	b002      	add	sp, #8
   b674c:	bd10      	pop	{r4, pc}

000b674e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b674e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6750:	b510      	push	{r4, lr}
      if (_M_empty())
   b6752:	b90a      	cbnz	r2, b6758 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6754:	f001 fc32 	bl	b7fbc <_ZSt25__throw_bad_function_callv>
    }
   b6758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b675c:	68c3      	ldr	r3, [r0, #12]
   b675e:	4718      	bx	r3

000b6760 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6760:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6762:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6764:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6766:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6768:	dd03      	ble.n	b6772 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b676a:	f7ff fae9 	bl	b5d40 <realloc>
            if (!d) {
   b676e:	b918      	cbnz	r0, b6778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6770:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6772:	f7ff fadd 	bl	b5d30 <free>
        T* d = nullptr;
   b6776:	2000      	movs	r0, #0
        data_ = d;
   b6778:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b677a:	60a5      	str	r5, [r4, #8]
        return true;
   b677c:	2001      	movs	r0, #1
   b677e:	e7f7      	b.n	b6770 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6780 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6780:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6782:	6883      	ldr	r3, [r0, #8]
   b6784:	428b      	cmp	r3, r1
   b6786:	da02      	bge.n	b678e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6788:	f7ff ffea 	bl	b6760 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b678c:	bd08      	pop	{r3, pc}
    return true;
   b678e:	2001      	movs	r0, #1
   b6790:	e7fc      	b.n	b678c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6792 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6796:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6798:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b679a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b679c:	4419      	add	r1, r3
   b679e:	6883      	ldr	r3, [r0, #8]
   b67a0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b67a2:	4604      	mov	r4, r0
   b67a4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b67a6:	dc12      	bgt.n	b67ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b67a8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b67aa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b67ac:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b67ae:	1bd2      	subs	r2, r2, r7
   b67b0:	4631      	mov	r1, r6
   b67b2:	1970      	adds	r0, r6, r5
   b67b4:	f001 fd40 	bl	b8238 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b67b8:	462a      	mov	r2, r5
   b67ba:	4641      	mov	r1, r8
   b67bc:	4630      	mov	r0, r6
   b67be:	f001 fd2d 	bl	b821c <memcpy>
    size_ += n;
   b67c2:	6863      	ldr	r3, [r4, #4]
   b67c4:	442b      	add	r3, r5
   b67c6:	6063      	str	r3, [r4, #4]
    return true;
   b67c8:	2001      	movs	r0, #1
}
   b67ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b67ce:	f7ff ffc7 	bl	b6760 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b67d2:	2800      	cmp	r0, #0
   b67d4:	d1e8      	bne.n	b67a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b67d6:	e7f8      	b.n	b67ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b67d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b67d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67da:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67dc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b67e0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b67e2:	4604      	mov	r4, r0
   b67e4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67e6:	da0b      	bge.n	b6800 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b67e8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b67ea:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b67ec:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b67ee:	1b52      	subs	r2, r2, r5
   b67f0:	1c48      	adds	r0, r1, #1
   b67f2:	f001 fd21 	bl	b8238 <memmove>
    new(p) T(std::move(value));
   b67f6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b67f8:	6863      	ldr	r3, [r4, #4]
   b67fa:	3301      	adds	r3, #1
   b67fc:	6063      	str	r3, [r4, #4]
}
   b67fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6800:	3101      	adds	r1, #1
   b6802:	f7ff ffad 	bl	b6760 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6806:	2800      	cmp	r0, #0
   b6808:	d1ee      	bne.n	b67e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b680a:	e7f8      	b.n	b67fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b680c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b680c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b680e:	6841      	ldr	r1, [r0, #4]
   b6810:	f7ff bfe2 	b.w	b67d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6814 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6818:	4604      	mov	r4, r0
   b681a:	461d      	mov	r5, r3
   b681c:	460f      	mov	r7, r1
   b681e:	ab01      	add	r3, sp, #4
   b6820:	4690      	mov	r8, r2
   b6822:	460a      	mov	r2, r1
   b6824:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6828:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b682c:	f7ff fb0e 	bl	b5e4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6830:	1cae      	adds	r6, r5, #2
   b6832:	6863      	ldr	r3, [r4, #4]
   b6834:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6836:	f1b9 0f00 	cmp.w	r9, #0
   b683a:	d126      	bne.n	b688a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b683c:	b328      	cbz	r0, b688a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b683e:	4433      	add	r3, r6
   b6840:	1a1b      	subs	r3, r3, r0
   b6842:	2bff      	cmp	r3, #255	; 0xff
   b6844:	d809      	bhi.n	b685a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6846:	9901      	ldr	r1, [sp, #4]
   b6848:	4620      	mov	r0, r4
   b684a:	f7ff fe71 	bl	b6530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b684e:	6861      	ldr	r1, [r4, #4]
   b6850:	4620      	mov	r0, r4
   b6852:	4431      	add	r1, r6
   b6854:	f7ff ff94 	bl	b6780 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6858:	b918      	cbnz	r0, b6862 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b685a:	6860      	ldr	r0, [r4, #4]
}
   b685c:	b003      	add	sp, #12
   b685e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6862:	1c6a      	adds	r2, r5, #1
   b6864:	9901      	ldr	r1, [sp, #4]
   b6866:	b2d2      	uxtb	r2, r2
   b6868:	4620      	mov	r0, r4
   b686a:	f7ff ffb5 	bl	b67d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b686e:	9901      	ldr	r1, [sp, #4]
   b6870:	463a      	mov	r2, r7
   b6872:	3101      	adds	r1, #1
   b6874:	4620      	mov	r0, r4
   b6876:	f7ff ffaf 	bl	b67d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b687a:	9901      	ldr	r1, [sp, #4]
   b687c:	462b      	mov	r3, r5
   b687e:	4642      	mov	r2, r8
   b6880:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6882:	4620      	mov	r0, r4
   b6884:	f7ff ff85 	bl	b6792 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6888:	e7e7      	b.n	b685a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b688a:	18f1      	adds	r1, r6, r3
   b688c:	29ff      	cmp	r1, #255	; 0xff
   b688e:	d8e4      	bhi.n	b685a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6890:	4620      	mov	r0, r4
   b6892:	f7ff ff75 	bl	b6780 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6896:	2800      	cmp	r0, #0
   b6898:	d0df      	beq.n	b685a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b689a:	1c69      	adds	r1, r5, #1
   b689c:	b2c9      	uxtb	r1, r1
   b689e:	4620      	mov	r0, r4
   b68a0:	f7ff ffb4 	bl	b680c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b68a4:	4639      	mov	r1, r7
   b68a6:	4620      	mov	r0, r4
   b68a8:	f7ff ffb0 	bl	b680c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b68ac:	6861      	ldr	r1, [r4, #4]
   b68ae:	462b      	mov	r3, r5
   b68b0:	4642      	mov	r2, r8
   b68b2:	e7e6      	b.n	b6882 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b68b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b68b4:	b430      	push	{r4, r5}
   b68b6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b68ba:	b11a      	cbz	r2, b68c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b68bc:	9502      	str	r5, [sp, #8]
}
   b68be:	bc30      	pop	{r4, r5}
   b68c0:	f7ff bfa8 	b.w	b6814 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b68c4:	6840      	ldr	r0, [r0, #4]
}
   b68c6:	bc30      	pop	{r4, r5}
   b68c8:	4770      	bx	lr

000b68ca <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b68ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b68cc:	2300      	movs	r3, #0
   b68ce:	e9c0 3300 	strd	r3, r3, [r0]
   b68d2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b68d4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b68d6:	9300      	str	r3, [sp, #0]
   b68d8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b68da:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b68de:	4619      	mov	r1, r3
   b68e0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b68e4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b68e6:	f7ff ffe5 	bl	b68b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b68ea:	4620      	mov	r0, r4
   b68ec:	b004      	add	sp, #16
   b68ee:	bd10      	pop	{r4, pc}

000b68f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b68f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b68f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68f4:	4604      	mov	r4, r0
   b68f6:	460d      	mov	r5, r1
   b68f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b68fa:	d914      	bls.n	b6926 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b68fc:	4290      	cmp	r0, r2
   b68fe:	d213      	bcs.n	b6928 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6900:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6904:	1a75      	subs	r5, r6, r1
   b6906:	f1a1 0708 	sub.w	r7, r1, #8
   b690a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b690c:	42b7      	cmp	r7, r6
   b690e:	d018      	beq.n	b6942 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6910:	b11c      	cbz	r4, b691a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6912:	4631      	mov	r1, r6
   b6914:	4620      	mov	r0, r4
   b6916:	f7ff fe90 	bl	b663a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b691a:	1d30      	adds	r0, r6, #4
   b691c:	f7ff fe97 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6920:	3e08      	subs	r6, #8
   b6922:	3c08      	subs	r4, #8
   b6924:	e7f2      	b.n	b690c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6926:	d00c      	beq.n	b6942 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6928:	42b5      	cmp	r5, r6
   b692a:	d00a      	beq.n	b6942 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b692c:	b11c      	cbz	r4, b6936 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b692e:	4629      	mov	r1, r5
   b6930:	4620      	mov	r0, r4
   b6932:	f7ff fe82 	bl	b663a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6936:	1d28      	adds	r0, r5, #4
   b6938:	f7ff fe89 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b693c:	3508      	adds	r5, #8
   b693e:	3408      	adds	r4, #8
   b6940:	e7f2      	b.n	b6928 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6944 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6946:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6948:	6846      	ldr	r6, [r0, #4]
   b694a:	4668      	mov	r0, sp
   b694c:	f7ff fe75 	bl	b663a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6950:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6954:	429f      	cmp	r7, r3
   b6956:	db12      	blt.n	b697e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6958:	3701      	adds	r7, #1
        if (n > 0) {
   b695a:	2f00      	cmp	r7, #0
   b695c:	dd29      	ble.n	b69b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b695e:	00f8      	lsls	r0, r7, #3
   b6960:	f7ff f9de 	bl	b5d20 <malloc>
            if (!d) {
   b6964:	4605      	mov	r5, r0
   b6966:	b1f0      	cbz	r0, b69a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6968:	e9d4 1200 	ldrd	r1, r2, [r4]
   b696c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6970:	f7ff ffbe 	bl	b68f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6974:	6820      	ldr	r0, [r4, #0]
   b6976:	f7ff f9db 	bl	b5d30 <free>
        data_ = d;
   b697a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b697c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b697e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6980:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6982:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6986:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b698a:	4631      	mov	r1, r6
   b698c:	f106 0008 	add.w	r0, r6, #8
   b6990:	f7ff ffae 	bl	b68f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6994:	b11e      	cbz	r6, b699e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6996:	4669      	mov	r1, sp
   b6998:	4630      	mov	r0, r6
   b699a:	f7ff fe4e 	bl	b663a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b699e:	6863      	ldr	r3, [r4, #4]
   b69a0:	3301      	adds	r3, #1
   b69a2:	6063      	str	r3, [r4, #4]
    return true;
   b69a4:	2501      	movs	r5, #1
   b69a6:	a801      	add	r0, sp, #4
   b69a8:	f7ff fe51 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b69ac:	4628      	mov	r0, r5
   b69ae:	b003      	add	sp, #12
   b69b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b69b2:	2500      	movs	r5, #0
   b69b4:	e7de      	b.n	b6974 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b69b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b69b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b69b8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b69bc:	4605      	mov	r5, r0
   b69be:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b69c0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b69c4:	42a6      	cmp	r6, r4
   b69c6:	d005      	beq.n	b69d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b69c8:	4639      	mov	r1, r7
   b69ca:	4620      	mov	r0, r4
   b69cc:	f7ff fceb 	bl	b63a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b69d0:	b108      	cbz	r0, b69d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b69d2:	b914      	cbnz	r4, b69da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b69d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b69d6:	3408      	adds	r4, #8
   b69d8:	e7f4      	b.n	b69c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b69da:	1d20      	adds	r0, r4, #4
   b69dc:	f7ff fe37 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b69e0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b69e4:	f104 0108 	add.w	r1, r4, #8
   b69e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b69ec:	4620      	mov	r0, r4
   b69ee:	f7ff ff7f 	bl	b68f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b69f2:	686b      	ldr	r3, [r5, #4]
   b69f4:	3b01      	subs	r3, #1
   b69f6:	606b      	str	r3, [r5, #4]
    return true;
   b69f8:	e7ec      	b.n	b69d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b69fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b69fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a00:	4605      	mov	r5, r0
   b6a02:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6a04:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6a06:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6a08:	f7ff faaa 	bl	b5f60 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6a0c:	682e      	ldr	r6, [r5, #0]
   b6a0e:	1ef3      	subs	r3, r6, #3
   b6a10:	2b0d      	cmp	r3, #13
   b6a12:	d83c      	bhi.n	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6a14:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6a18:	0053000e 	.word	0x0053000e
   b6a1c:	00d1003b 	.word	0x00d1003b
   b6a20:	003b003b 	.word	0x003b003b
   b6a24:	003b003b 	.word	0x003b003b
   b6a28:	009b003b 	.word	0x009b003b
   b6a2c:	009b009b 	.word	0x009b009b
   b6a30:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b6a34:	a804      	add	r0, sp, #16
   b6a36:	f7ff fc81 	bl	b633c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b6a3a:	9b04      	ldr	r3, [sp, #16]
   b6a3c:	89aa      	ldrh	r2, [r5, #12]
   b6a3e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b6a40:	6869      	ldr	r1, [r5, #4]
   b6a42:	9804      	ldr	r0, [sp, #16]
   b6a44:	3108      	adds	r1, #8
   b6a46:	3002      	adds	r0, #2
   b6a48:	f7ff faa4 	bl	b5f94 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6a4c:	a904      	add	r1, sp, #16
   b6a4e:	a806      	add	r0, sp, #24
   b6a50:	f7ff fdf3 	bl	b663a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b6a54:	a906      	add	r1, sp, #24
   b6a56:	f104 0018 	add.w	r0, r4, #24
   b6a5a:	f7ff ff73 	bl	b6944 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6a5e:	4605      	mov	r5, r0
   b6a60:	a807      	add	r0, sp, #28
   b6a62:	f7ff fdf4 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a66:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b6a68:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b6a6a:	b9b5      	cbnz	r5, b6a9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b6a6c:	4b5d      	ldr	r3, [pc, #372]	; (b6be4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b6a6e:	495e      	ldr	r1, [pc, #376]	; (b6be8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6a70:	9300      	str	r3, [sp, #0]
   b6a72:	2032      	movs	r0, #50	; 0x32
   b6a74:	462b      	mov	r3, r5
   b6a76:	aa06      	add	r2, sp, #24
   b6a78:	9507      	str	r5, [sp, #28]
   b6a7a:	f7ff f8b5 	bl	b5be8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b6a7e:	9b04      	ldr	r3, [sp, #16]
   b6a80:	4629      	mov	r1, r5
   b6a82:	8818      	ldrh	r0, [r3, #0]
   b6a84:	f7fe fe94 	bl	b57b0 <hal_ble_gap_disconnect>
   b6a88:	a805      	add	r0, sp, #20
   b6a8a:	f7ff fde0 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b6a8e:	a803      	add	r0, sp, #12
   b6a90:	f7ff fa74 	bl	b5f7c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6a94:	b00e      	add	sp, #56	; 0x38
   b6a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b6a9a:	4a54      	ldr	r2, [pc, #336]	; (b6bec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6a9c:	9200      	str	r2, [sp, #0]
   b6a9e:	2300      	movs	r3, #0
   b6aa0:	4951      	ldr	r1, [pc, #324]	; (b6be8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6aa2:	9307      	str	r3, [sp, #28]
   b6aa4:	aa06      	add	r2, sp, #24
   b6aa6:	2001      	movs	r0, #1
   b6aa8:	f7ff f89e 	bl	b5be8 <log_message>
                if (impl->connectedCallback_) {
   b6aac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6aae:	2b00      	cmp	r3, #0
   b6ab0:	d0ea      	beq.n	b6a88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b6ab2:	a904      	add	r1, sp, #16
   b6ab4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6ab8:	f7ff fe49 	bl	b674e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6abc:	e7e4      	b.n	b6a88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6abe:	89a9      	ldrh	r1, [r5, #12]
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	f7ff fba5 	bl	b6210 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6ac6:	4606      	mov	r6, r0
   b6ac8:	2800      	cmp	r0, #0
   b6aca:	d0e0      	beq.n	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b6acc:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6ace:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b6ad2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6ad6:	8029      	strh	r1, [r5, #0]
   b6ad8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6adc:	429a      	cmp	r2, r3
   b6ade:	d003      	beq.n	b6ae8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b6ae0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6ae4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6ae6:	e7f9      	b.n	b6adc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b6ae8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6aec:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6af0:	45b8      	cmp	r8, r7
   b6af2:	d004      	beq.n	b6afe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b6af4:	1d38      	adds	r0, r7, #4
   b6af6:	f7ff fdaa 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6afa:	3708      	adds	r7, #8
   b6afc:	e7f8      	b.n	b6af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b6afe:	2300      	movs	r3, #0
   b6b00:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b6b02:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b6b06:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6b0a:	45b8      	cmp	r8, r7
   b6b0c:	d004      	beq.n	b6b18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b6b0e:	1d38      	adds	r0, r7, #4
   b6b10:	f7ff fd9d 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b14:	3708      	adds	r7, #8
   b6b16:	e7f8      	b.n	b6b0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b6b18:	2300      	movs	r3, #0
   b6b1a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6b1c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b6b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6b20:	b123      	cbz	r3, b6b2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                            impl->disconnectedCallback_(*peer);
   b6b22:	4631      	mov	r1, r6
   b6b24:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6b28:	f7ff fe11 	bl	b674e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        impl->peers_.removeOne(*peer);
   b6b2c:	4631      	mov	r1, r6
   b6b2e:	f104 0018 	add.w	r0, r4, #24
   b6b32:	f7ff ff40 	bl	b69b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b6b36:	2220      	movs	r2, #32
   b6b38:	2300      	movs	r3, #0
   b6b3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b6b3e:	4a2c      	ldr	r2, [pc, #176]	; (b6bf0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b6b40:	9200      	str	r2, [sp, #0]
   b6b42:	4929      	ldr	r1, [pc, #164]	; (b6be8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6b44:	aa06      	add	r2, sp, #24
   b6b46:	2001      	movs	r0, #1
   b6b48:	f7ff f84e 	bl	b5be8 <log_message>
   b6b4c:	e79f      	b.n	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6b4e:	89a9      	ldrh	r1, [r5, #12]
   b6b50:	4620      	mov	r0, r4
   b6b52:	f7ff fb5d 	bl	b6210 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6b56:	2800      	cmp	r0, #0
   b6b58:	d099      	beq.n	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b6b5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6b5c:	2b00      	cmp	r3, #0
   b6b5e:	d096      	beq.n	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b6b60:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6b62:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6b64:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6b68:	d001      	beq.n	b6b6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b6b6a:	2e10      	cmp	r6, #16
   b6b6c:	d117      	bne.n	b6b9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b6b6e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b6b70:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b6b72:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b6b74:	2506      	movs	r5, #6
                        };
   b6b76:	f88d 3015 	strb.w	r3, [sp, #21]
   b6b7a:	9104      	str	r1, [sp, #16]
   b6b7c:	f88d 2014 	strb.w	r2, [sp, #20]
   b6b80:	9006      	str	r0, [sp, #24]
   b6b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b6b86:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b6b88:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b6b8c:	9508      	str	r5, [sp, #32]
   b6b8e:	e883 0003 	stmia.w	r3, {r0, r1}
   b6b92:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6b94:	a906      	add	r1, sp, #24
   b6b96:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6b9a:	4798      	blx	r3
   b6b9c:	e777      	b.n	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b6b9e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6ba0:	bf01      	itttt	eq
   b6ba2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b6ba4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6ba6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b6baa:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b6bac:	bf0f      	iteee	eq
   b6bae:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b6bb2:	461a      	movne	r2, r3
   b6bb4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b6bb6:	461d      	movne	r5, r3
   b6bb8:	e7dd      	b.n	b6b76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6bba:	89a9      	ldrh	r1, [r5, #12]
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	f7ff fb27 	bl	b6210 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b6bc2:	4601      	mov	r1, r0
   b6bc4:	2800      	cmp	r0, #0
   b6bc6:	f43f af62 	beq.w	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6bca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b6bcc:	2b00      	cmp	r3, #0
   b6bce:	f43f af5e 	beq.w	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b6bd2:	686b      	ldr	r3, [r5, #4]
   b6bd4:	9306      	str	r3, [sp, #24]
   b6bd6:	aa06      	add	r2, sp, #24
   b6bd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b6bda:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6bde:	4798      	blx	r3
   b6be0:	e755      	b.n	b6a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6be2:	bf00      	nop
   b6be4:	000b91bc 	.word	0x000b91bc
   b6be8:	000b913b 	.word	0x000b913b
   b6bec:	000b91e2 	.word	0x000b91e2
   b6bf0:	000b855f 	.word	0x000b855f

000b6bf4 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   b6bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6bf8:	4606      	mov	r6, r0
   b6bfa:	b08c      	sub	sp, #48	; 0x30
    WiringBleLock lk;
   b6bfc:	4668      	mov	r0, sp
   b6bfe:	f7ff f9af 	bl	b5f60 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6c02:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b6c04:	e9d3 4706 	ldrd	r4, r7, [r3, #24]
   b6c08:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (auto p : impl()->peers()) {
   b6c0c:	42a7      	cmp	r7, r4
   b6c0e:	d03c      	beq.n	b6c8a <_ZNK8particle14BleLocalDevice10disconnectEv+0x96>
   b6c10:	4621      	mov	r1, r4
   b6c12:	a801      	add	r0, sp, #4
   b6c14:	f7ff fd11 	bl	b663a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        hal_ble_conn_info_t connInfo = {};
   b6c18:	2224      	movs	r2, #36	; 0x24
   b6c1a:	2100      	movs	r1, #0
   b6c1c:	a803      	add	r0, sp, #12
   b6c1e:	f001 fb25 	bl	b826c <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   b6c22:	9b01      	ldr	r3, [sp, #4]
   b6c24:	2200      	movs	r2, #0
   b6c26:	8818      	ldrh	r0, [r3, #0]
   b6c28:	a903      	add	r1, sp, #12
   b6c2a:	f7fe fdf3 	bl	b5814 <hal_ble_gap_get_connection_info>
   b6c2e:	4605      	mov	r5, r0
   b6c30:	b120      	cbz	r0, b6c3c <_ZNK8particle14BleLocalDevice10disconnectEv+0x48>
   b6c32:	a802      	add	r0, sp, #8
   b6c34:	f7ff fd0b 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (auto p : impl()->peers()) {
   b6c38:	3408      	adds	r4, #8
   b6c3a:	e7e7      	b.n	b6c0c <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   b6c3c:	f89d 8010 	ldrb.w	r8, [sp, #16]
   b6c40:	f1b8 0f01 	cmp.w	r8, #1
   b6c44:	d1f5      	bne.n	b6c32 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3e>
   b6c46:	4f12      	ldr	r7, [pc, #72]	; (b6c90 <_ZNK8particle14BleLocalDevice10disconnectEv+0x9c>)
   b6c48:	6838      	ldr	r0, [r7, #0]
   b6c4a:	f7fe fe35 	bl	b58b8 <os_mutex_recursive_unlock>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   b6c4e:	9b01      	ldr	r3, [sp, #4]
        locked_ = false;
   b6c50:	f88d 5000 	strb.w	r5, [sp]
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   b6c54:	8818      	ldrh	r0, [r3, #0]
   b6c56:	4629      	mov	r1, r5
   b6c58:	f7fe fdaa 	bl	b57b0 <hal_ble_gap_disconnect>
   b6c5c:	1e04      	subs	r4, r0, #0
   b6c5e:	db0a      	blt.n	b6c76 <_ZNK8particle14BleLocalDevice10disconnectEv+0x82>
    void lock() { os_mutex_recursive_lock(handle_); }
   b6c60:	6838      	ldr	r0, [r7, #0]
   b6c62:	f7fe fe21 	bl	b58a8 <os_mutex_recursive_lock>
        return peers_;
   b6c66:	6830      	ldr	r0, [r6, #0]
        locked_ = true;
   b6c68:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   b6c6c:	a901      	add	r1, sp, #4
   b6c6e:	3018      	adds	r0, #24
   b6c70:	f7ff fea1 	bl	b69b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   b6c74:	462c      	mov	r4, r5
   b6c76:	a802      	add	r0, sp, #8
   b6c78:	f7ff fce9 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    WiringBleLock lk;
   b6c7c:	4668      	mov	r0, sp
   b6c7e:	f7ff f97d 	bl	b5f7c <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   b6c82:	4620      	mov	r0, r4
   b6c84:	b00c      	add	sp, #48	; 0x30
   b6c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   b6c8a:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
   b6c8e:	e7f5      	b.n	b6c7c <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
   b6c90:	2003e6c0 	.word	0x2003e6c0

000b6c94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6c94:	b513      	push	{r0, r1, r4, lr}
   b6c96:	460b      	mov	r3, r1
   b6c98:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c9a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6c9e:	466c      	mov	r4, sp
   b6ca0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6ca4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6ca8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6cac:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6cb0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6cb4:	b002      	add	sp, #8
   b6cb6:	bd10      	pop	{r4, pc}

000b6cb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6cb8:	b538      	push	{r3, r4, r5, lr}
   b6cba:	4605      	mov	r5, r0
   b6cbc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b6cbe:	f7ff ffe9 	bl	b6c94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cc2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6cc4:	68a2      	ldr	r2, [r4, #8]
   b6cc6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6cc8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cca:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6ccc:	68e2      	ldr	r2, [r4, #12]
   b6cce:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6cd0:	60e3      	str	r3, [r4, #12]
      }
   b6cd2:	bd38      	pop	{r3, r4, r5, pc}

000b6cd4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b6cd4:	b570      	push	{r4, r5, r6, lr}
   b6cd6:	4604      	mov	r4, r0
   b6cd8:	b08c      	sub	sp, #48	; 0x30
   b6cda:	460e      	mov	r6, r1
   b6cdc:	9201      	str	r2, [sp, #4]
   b6cde:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b6ce0:	f7ff fa76 	bl	b61d0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b6ce4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b6ce6:	9901      	ldr	r1, [sp, #4]
   b6ce8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6cec:	f000 fe20 	bl	b7930 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6cf0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b6cf4:	b1cd      	cbz	r5, b6d2a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b6cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6cf8:	9502      	str	r5, [sp, #8]
   b6cfa:	a902      	add	r1, sp, #8
   b6cfc:	a804      	add	r0, sp, #16
   b6cfe:	9303      	str	r3, [sp, #12]
   b6d00:	f7ff fc64 	bl	b65cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6d04:	2300      	movs	r3, #0
	__x.swap(*this);
   b6d06:	a908      	add	r1, sp, #32
   b6d08:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b6d0a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b6d0c:	f7ff ffd4 	bl	b6cb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b6d10:	4631      	mov	r1, r6
   b6d12:	a808      	add	r0, sp, #32
   b6d14:	f7ff ffd0 	bl	b6cb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6d18:	a808      	add	r0, sp, #32
   b6d1a:	f7ff f8e3 	bl	b5ee4 <_ZNSt14_Function_baseD1Ev>
   b6d1e:	a804      	add	r0, sp, #16
   b6d20:	f7ff f8e0 	bl	b5ee4 <_ZNSt14_Function_baseD1Ev>
    }
   b6d24:	4620      	mov	r0, r4
   b6d26:	b00c      	add	sp, #48	; 0x30
   b6d28:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b6d2a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b6d2c:	e7ea      	b.n	b6d04 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b6d30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b6d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d34:	b087      	sub	sp, #28
   b6d36:	461d      	mov	r5, r3
   b6d38:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b6d3c:	4680      	mov	r8, r0
   b6d3e:	468b      	mov	fp, r1
   b6d40:	4692      	mov	sl, r2
   b6d42:	9912      	ldr	r1, [sp, #72]	; 0x48
   b6d44:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6d46:	2200      	movs	r2, #0
   b6d48:	2068      	movs	r0, #104	; 0x68
   b6d4a:	9102      	str	r1, [sp, #8]
   b6d4c:	9204      	str	r2, [sp, #16]
   b6d4e:	f7fd f9a0 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6d52:	1e06      	subs	r6, r0, #0
   b6d54:	f106 090c 	add.w	r9, r6, #12
   b6d58:	d018      	beq.n	b6d8c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b6d5a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b6d5c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b6d5e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b6d62:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b6d64:	4a15      	ldr	r2, [pc, #84]	; (b6dbc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b6d66:	f847 2b20 	str.w	r2, [r7], #32
   b6d6a:	9b03      	ldr	r3, [sp, #12]
   b6d6c:	9100      	str	r1, [sp, #0]
   b6d6e:	465a      	mov	r2, fp
   b6d70:	4651      	mov	r1, sl
   b6d72:	4648      	mov	r0, r9
   b6d74:	f7ff ffae 	bl	b6cd4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b6d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d7a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6d7c:	682b      	ldr	r3, [r5, #0]
   b6d7e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d82:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b6d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6d88:	6823      	ldr	r3, [r4, #0]
   b6d8a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b6d8c:	a904      	add	r1, sp, #16
   b6d8e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6d90:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b6d94:	f7ff fcca 	bl	b672c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b6d98:	a805      	add	r0, sp, #20
   b6d9a:	f7ff fc58 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b6d9e:	f8d8 3000 	ldr.w	r3, [r8]
   b6da2:	b93b      	cbnz	r3, b6db4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b6da4:	4a06      	ldr	r2, [pc, #24]	; (b6dc0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b6da6:	4907      	ldr	r1, [pc, #28]	; (b6dc4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b6da8:	200a      	movs	r0, #10
}
   b6daa:	b007      	add	sp, #28
   b6dac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b6db0:	f7fe bf12 	b.w	b5bd8 <panic_>
}
   b6db4:	b007      	add	sp, #28
   b6db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6dba:	bf00      	nop
   b6dbc:	000b925c 	.word	0x000b925c
   b6dc0:	000b58d9 	.word	0x000b58d9
   b6dc4:	000b9124 	.word	0x000b9124

000b6dc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6dc8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6dcc:	4604      	mov	r4, r0
   b6dce:	460d      	mov	r5, r1
   b6dd0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6dd2:	d914      	bls.n	b6dfe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6dd4:	4290      	cmp	r0, r2
   b6dd6:	d213      	bcs.n	b6e00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6dd8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6ddc:	1a75      	subs	r5, r6, r1
   b6dde:	f1a1 0708 	sub.w	r7, r1, #8
   b6de2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6de4:	42b7      	cmp	r7, r6
   b6de6:	d018      	beq.n	b6e1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6de8:	b11c      	cbz	r4, b6df2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6dea:	4631      	mov	r1, r6
   b6dec:	4620      	mov	r0, r4
   b6dee:	f7ff fc1a 	bl	b6626 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6df2:	1d30      	adds	r0, r6, #4
   b6df4:	f7ff fc2b 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6df8:	3e08      	subs	r6, #8
   b6dfa:	3c08      	subs	r4, #8
   b6dfc:	e7f2      	b.n	b6de4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6dfe:	d00c      	beq.n	b6e1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6e00:	42b5      	cmp	r5, r6
   b6e02:	d00a      	beq.n	b6e1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6e04:	b11c      	cbz	r4, b6e0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6e06:	4629      	mov	r1, r5
   b6e08:	4620      	mov	r0, r4
   b6e0a:	f7ff fc0c 	bl	b6626 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6e0e:	1d28      	adds	r0, r5, #4
   b6e10:	f7ff fc1d 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6e14:	3508      	adds	r5, #8
   b6e16:	3408      	adds	r4, #8
   b6e18:	e7f2      	b.n	b6e00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6e1c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6e1e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6e20:	4605      	mov	r5, r0
        if (n > 0) {
   b6e22:	dd11      	ble.n	b6e48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6e24:	00f0      	lsls	r0, r6, #3
   b6e26:	f7fe ff7b 	bl	b5d20 <malloc>
            if (!d) {
   b6e2a:	4604      	mov	r4, r0
   b6e2c:	b158      	cbz	r0, b6e46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6e2e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6e32:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6e36:	f7ff ffc7 	bl	b6dc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6e3a:	6828      	ldr	r0, [r5, #0]
   b6e3c:	f7fe ff78 	bl	b5d30 <free>
        data_ = d;
   b6e40:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6e42:	60ae      	str	r6, [r5, #8]
        return true;
   b6e44:	2001      	movs	r0, #1
    }
   b6e46:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6e48:	2400      	movs	r4, #0
   b6e4a:	e7f6      	b.n	b6e3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6e4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6e4e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6e50:	6845      	ldr	r5, [r0, #4]
   b6e52:	4668      	mov	r0, sp
   b6e54:	f7ff fbe7 	bl	b6626 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6e58:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6e5c:	4299      	cmp	r1, r3
   b6e5e:	da10      	bge.n	b6e82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6e60:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6e62:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6e64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6e68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6e6c:	4629      	mov	r1, r5
   b6e6e:	f105 0008 	add.w	r0, r5, #8
   b6e72:	f7ff ffa9 	bl	b6dc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6e76:	b98d      	cbnz	r5, b6e9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6e78:	6863      	ldr	r3, [r4, #4]
   b6e7a:	3301      	adds	r3, #1
   b6e7c:	6063      	str	r3, [r4, #4]
    return true;
   b6e7e:	2601      	movs	r6, #1
   b6e80:	e006      	b.n	b6e90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6e82:	3101      	adds	r1, #1
   b6e84:	4620      	mov	r0, r4
   b6e86:	f7ff ffc9 	bl	b6e1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6e8a:	4606      	mov	r6, r0
   b6e8c:	2800      	cmp	r0, #0
   b6e8e:	d1e7      	bne.n	b6e60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6e90:	a801      	add	r0, sp, #4
   b6e92:	f7ff fbdc 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6e96:	4630      	mov	r0, r6
   b6e98:	b002      	add	sp, #8
   b6e9a:	bd70      	pop	{r4, r5, r6, pc}
   b6e9c:	4669      	mov	r1, sp
   b6e9e:	4628      	mov	r0, r5
   b6ea0:	f7ff fbc1 	bl	b6626 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6ea4:	e7e8      	b.n	b6e78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6ea6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6ea6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6eaa:	4604      	mov	r4, r0
   b6eac:	460d      	mov	r5, r1
   b6eae:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6eb0:	d914      	bls.n	b6edc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6eb2:	4290      	cmp	r0, r2
   b6eb4:	d213      	bcs.n	b6ede <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6eb6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6eba:	1a75      	subs	r5, r6, r1
   b6ebc:	f1a1 0708 	sub.w	r7, r1, #8
   b6ec0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6ec2:	42b7      	cmp	r7, r6
   b6ec4:	d018      	beq.n	b6ef8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6ec6:	b11c      	cbz	r4, b6ed0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6ec8:	4631      	mov	r1, r6
   b6eca:	4620      	mov	r0, r4
   b6ecc:	f7ff fb9d 	bl	b660a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6ed0:	1d30      	adds	r0, r6, #4
   b6ed2:	f7ff fbbc 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6ed6:	3e08      	subs	r6, #8
   b6ed8:	3c08      	subs	r4, #8
   b6eda:	e7f2      	b.n	b6ec2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6edc:	d00c      	beq.n	b6ef8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6ede:	42b5      	cmp	r5, r6
   b6ee0:	d00a      	beq.n	b6ef8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6ee2:	b11c      	cbz	r4, b6eec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6ee4:	4629      	mov	r1, r5
   b6ee6:	4620      	mov	r0, r4
   b6ee8:	f7ff fb8f 	bl	b660a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6eec:	1d28      	adds	r0, r5, #4
   b6eee:	f7ff fbae 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6ef2:	3508      	adds	r5, #8
   b6ef4:	3408      	adds	r4, #8
   b6ef6:	e7f2      	b.n	b6ede <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6efa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6efa:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6efc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6efe:	4605      	mov	r5, r0
        if (n > 0) {
   b6f00:	dd11      	ble.n	b6f26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6f02:	00f0      	lsls	r0, r6, #3
   b6f04:	f7fe ff0c 	bl	b5d20 <malloc>
            if (!d) {
   b6f08:	4604      	mov	r4, r0
   b6f0a:	b158      	cbz	r0, b6f24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6f0c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6f10:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6f14:	f7ff ffc7 	bl	b6ea6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6f18:	6828      	ldr	r0, [r5, #0]
   b6f1a:	f7fe ff09 	bl	b5d30 <free>
        data_ = d;
   b6f1e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6f20:	60ae      	str	r6, [r5, #8]
        return true;
   b6f22:	2001      	movs	r0, #1
    }
   b6f24:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6f26:	2400      	movs	r4, #0
   b6f28:	e7f6      	b.n	b6f18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6f2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f2c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6f2e:	6845      	ldr	r5, [r0, #4]
   b6f30:	4668      	mov	r0, sp
   b6f32:	f7ff fb6a 	bl	b660a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f36:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6f3a:	4299      	cmp	r1, r3
   b6f3c:	da10      	bge.n	b6f60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6f3e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6f40:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f42:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6f46:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6f4a:	4629      	mov	r1, r5
   b6f4c:	f105 0008 	add.w	r0, r5, #8
   b6f50:	f7ff ffa9 	bl	b6ea6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6f54:	b98d      	cbnz	r5, b6f7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6f56:	6863      	ldr	r3, [r4, #4]
   b6f58:	3301      	adds	r3, #1
   b6f5a:	6063      	str	r3, [r4, #4]
    return true;
   b6f5c:	2601      	movs	r6, #1
   b6f5e:	e006      	b.n	b6f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f60:	3101      	adds	r1, #1
   b6f62:	4620      	mov	r0, r4
   b6f64:	f7ff ffc9 	bl	b6efa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6f68:	4606      	mov	r6, r0
   b6f6a:	2800      	cmp	r0, #0
   b6f6c:	d1e7      	bne.n	b6f3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6f6e:	a801      	add	r0, sp, #4
   b6f70:	f7ff fb6d 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6f74:	4630      	mov	r0, r6
   b6f76:	b002      	add	sp, #8
   b6f78:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6f7a:	4669      	mov	r1, sp
   b6f7c:	4628      	mov	r0, r5
   b6f7e:	f7ff fb44 	bl	b660a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6f82:	e7e8      	b.n	b6f56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6f84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f88:	4617      	mov	r7, r2
   b6f8a:	b0a1      	sub	sp, #132	; 0x84
   b6f8c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b6f8e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6f90:	460e      	mov	r6, r1
    WiringBleLock lk;
   b6f92:	f7fe ffe5 	bl	b5f60 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6f96:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b6f98:	7923      	ldrb	r3, [r4, #4]
   b6f9a:	b953      	cbnz	r3, b6fb2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b6f9c:	4639      	mov	r1, r7
   b6f9e:	4640      	mov	r0, r8
   b6fa0:	f7ff fb33 	bl	b660a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b6fa4:	a80a      	add	r0, sp, #40	; 0x28
   b6fa6:	f7fe ffe9 	bl	b5f7c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b6faa:	4640      	mov	r0, r8
   b6fac:	b021      	add	sp, #132	; 0x84
   b6fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6fb2:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b6fb4:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b6fb8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b6fbc:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b6fbe:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b6fc2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b6fc6:	9b03      	ldr	r3, [sp, #12]
   b6fc8:	429d      	cmp	r5, r3
   b6fca:	d021      	beq.n	b7010 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b6fcc:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6fd0:	4658      	mov	r0, fp
   b6fd2:	f109 0114 	add.w	r1, r9, #20
   b6fd6:	f7ff f870 	bl	b60ba <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b6fda:	b1b8      	cbz	r0, b700c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b6fdc:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b6fe0:	4650      	mov	r0, sl
   b6fe2:	f7ff f86a 	bl	b60ba <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b6fe6:	b188      	cbz	r0, b700c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6fe8:	6823      	ldr	r3, [r4, #0]
   b6fea:	f8d9 2000 	ldr.w	r2, [r9]
   b6fee:	4053      	eors	r3, r2
   b6ff0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b6ff4:	d10a      	bne.n	b700c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b6ff6:	2220      	movs	r2, #32
   b6ff8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b6ffc:	4a5e      	ldr	r2, [pc, #376]	; (b7178 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b6ffe:	9200      	str	r2, [sp, #0]
   b7000:	aa15      	add	r2, sp, #84	; 0x54
   b7002:	495e      	ldr	r1, [pc, #376]	; (b717c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7004:	2032      	movs	r0, #50	; 0x32
   b7006:	f7fe fdef 	bl	b5be8 <log_message>
   b700a:	e7c7      	b.n	b6f9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b700c:	3508      	adds	r5, #8
   b700e:	e7da      	b.n	b6fc6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7010:	4650      	mov	r0, sl
   b7012:	f7ff f823 	bl	b605c <_ZNK8particle7BleUuid7isValidEv>
   b7016:	b960      	cbnz	r0, b7032 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7018:	4959      	ldr	r1, [pc, #356]	; (b7180 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b701a:	2201      	movs	r2, #1
   b701c:	a815      	add	r0, sp, #84	; 0x54
   b701e:	ad15      	add	r5, sp, #84	; 0x54
   b7020:	f7fe fff4 	bl	b600c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7026:	46d4      	mov	ip, sl
   b7028:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b702c:	682b      	ldr	r3, [r5, #0]
   b702e:	f8cc 3000 	str.w	r3, [ip]
   b7032:	6833      	ldr	r3, [r6, #0]
   b7034:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7038:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b703c:	455d      	cmp	r5, fp
   b703e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7040:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7042:	d06e      	beq.n	b7122 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7044:	f855 0b08 	ldr.w	r0, [r5], #8
   b7048:	f7ff f837 	bl	b60ba <_ZNK8particle7BleUuideqERKS0_>
   b704c:	2800      	cmp	r0, #0
   b704e:	d0f5      	beq.n	b703c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7050:	f104 0a14 	add.w	sl, r4, #20
   b7054:	4650      	mov	r0, sl
   b7056:	f7ff f801 	bl	b605c <_ZNK8particle7BleUuid7isValidEv>
   b705a:	b988      	cbnz	r0, b7080 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b705c:	4b49      	ldr	r3, [pc, #292]	; (b7184 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b705e:	4948      	ldr	r1, [pc, #288]	; (b7180 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7060:	881a      	ldrh	r2, [r3, #0]
   b7062:	3201      	adds	r2, #1
   b7064:	b292      	uxth	r2, r2
   b7066:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7068:	a815      	add	r0, sp, #84	; 0x54
   b706a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b706c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b706e:	f7fe ffec 	bl	b604a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7074:	46d4      	mov	ip, sl
   b7076:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b707a:	682b      	ldr	r3, [r5, #0]
   b707c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7080:	4b41      	ldr	r3, [pc, #260]	; (b7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7082:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7084:	2228      	movs	r2, #40	; 0x28
   b7086:	2100      	movs	r1, #0
   b7088:	a816      	add	r0, sp, #88	; 0x58
   b708a:	f001 f8ef 	bl	b826c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b708e:	4651      	mov	r1, sl
   b7090:	a804      	add	r0, sp, #16
   b7092:	f7fe fff5 	bl	b6080 <_ZN8particle7BleUuid7halUUIDEv>
   b7096:	ab04      	add	r3, sp, #16
   b7098:	aa18      	add	r2, sp, #96	; 0x60
   b709a:	f10d 0c20 	add.w	ip, sp, #32
   b709e:	6818      	ldr	r0, [r3, #0]
   b70a0:	6859      	ldr	r1, [r3, #4]
   b70a2:	4615      	mov	r5, r2
   b70a4:	c503      	stmia	r5!, {r0, r1}
   b70a6:	3308      	adds	r3, #8
   b70a8:	4563      	cmp	r3, ip
   b70aa:	462a      	mov	r2, r5
   b70ac:	d1f7      	bne.n	b709e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b70ae:	6818      	ldr	r0, [r3, #0]
   b70b0:	6028      	str	r0, [r5, #0]
    return value_;
   b70b2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b70b4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b70b8:	f8d9 3000 	ldr.w	r3, [r9]
   b70bc:	8a9b      	ldrh	r3, [r3, #20]
   b70be:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b70c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b70c4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b70c6:	4b31      	ldr	r3, [pc, #196]	; (b718c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b70c8:	2200      	movs	r2, #0
   b70ca:	1da1      	adds	r1, r4, #6
   b70cc:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b70ce:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b70d2:	f7fe fba9 	bl	b5828 <hal_ble_gatt_server_add_characteristic>
   b70d6:	2800      	cmp	r0, #0
   b70d8:	f47f af60 	bne.w	b6f9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b70dc:	2301      	movs	r3, #1
   b70de:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b70e0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b70e2:	4639      	mov	r1, r7
        return characteristics_;
   b70e4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b70e6:	a80d      	add	r0, sp, #52	; 0x34
   b70e8:	f7ff fa8f 	bl	b660a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b70ec:	4620      	mov	r0, r4
   b70ee:	a90d      	add	r1, sp, #52	; 0x34
   b70f0:	f7ff ff1b 	bl	b6f2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b70f4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b70f6:	a80e      	add	r0, sp, #56	; 0x38
   b70f8:	f7ff faa9 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70fc:	2c00      	cmp	r4, #0
   b70fe:	f47f af4d 	bne.w	b6f9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7102:	2320      	movs	r3, #32
   b7104:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7108:	4b21      	ldr	r3, [pc, #132]	; (b7190 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b710a:	9300      	str	r3, [sp, #0]
   b710c:	aa0d      	add	r2, sp, #52	; 0x34
   b710e:	4623      	mov	r3, r4
   b7110:	e777      	b.n	b7002 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7112:	4639      	mov	r1, r7
   b7114:	4640      	mov	r0, r8
   b7116:	f7ff fa78 	bl	b660a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b711a:	a80c      	add	r0, sp, #48	; 0x30
   b711c:	f7ff fa97 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7120:	e740      	b.n	b6fa4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7122:	a80b      	add	r0, sp, #44	; 0x2c
   b7124:	f7ff f8e6 	bl	b62f4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7128:	4651      	mov	r1, sl
   b712a:	a815      	add	r0, sp, #84	; 0x54
   b712c:	f7fe ffa8 	bl	b6080 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7132:	2300      	movs	r3, #0
   b7134:	3214      	adds	r2, #20
   b7136:	a915      	add	r1, sp, #84	; 0x54
   b7138:	2001      	movs	r0, #1
   b713a:	f7fe fb43 	bl	b57c4 <hal_ble_gatt_server_add_service>
   b713e:	2800      	cmp	r0, #0
   b7140:	d1e7      	bne.n	b7112 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7142:	6835      	ldr	r5, [r6, #0]
   b7144:	a90b      	add	r1, sp, #44	; 0x2c
   b7146:	a80d      	add	r0, sp, #52	; 0x34
   b7148:	f7ff fa6d 	bl	b6626 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b714c:	4628      	mov	r0, r5
   b714e:	a90d      	add	r1, sp, #52	; 0x34
   b7150:	f7ff fe7c 	bl	b6e4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7154:	4605      	mov	r5, r0
   b7156:	a80e      	add	r0, sp, #56	; 0x38
   b7158:	f7ff fa79 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b715c:	2d00      	cmp	r5, #0
   b715e:	d0d8      	beq.n	b7112 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7160:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7162:	6853      	ldr	r3, [r2, #4]
   b7164:	6812      	ldr	r2, [r2, #0]
   b7166:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b716a:	3b01      	subs	r3, #1
   b716c:	a80c      	add	r0, sp, #48	; 0x30
   b716e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7172:	f7ff fa6c 	bl	b664e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7176:	e76b      	b.n	b7050 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7178:	000b91ff 	.word	0x000b91ff
   b717c:	000b913b 	.word	0x000b913b
   b7180:	000b92c6 	.word	0x000b92c6
   b7184:	2003e6bc 	.word	0x2003e6bc
   b7188:	002c0003 	.word	0x002c0003
   b718c:	000b648d 	.word	0x000b648d
   b7190:	000b922a 	.word	0x000b922a

000b7194 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7194:	4802      	ldr	r0, [pc, #8]	; (b71a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7196:	2300      	movs	r3, #0
   b7198:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b719a:	f7fe bb7d 	b.w	b5898 <os_mutex_recursive_create>
   b719e:	bf00      	nop
   b71a0:	2003e6c0 	.word	0x2003e6c0

000b71a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b71a4:	2200      	movs	r2, #0
   b71a6:	6840      	ldr	r0, [r0, #4]
   b71a8:	4611      	mov	r1, r2
   b71aa:	f7fe bd91 	b.w	b5cd0 <network_listening>

000b71ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b71ae:	2200      	movs	r2, #0
   b71b0:	6840      	ldr	r0, [r0, #4]
   b71b2:	4611      	mov	r1, r2
   b71b4:	f7fe bd9c 	b.w	b5cf0 <network_get_listen_timeout>

000b71b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b71b8:	6840      	ldr	r0, [r0, #4]
   b71ba:	2200      	movs	r2, #0
   b71bc:	f7fe bd90 	b.w	b5ce0 <network_set_listen_timeout>

000b71c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b71c0:	6840      	ldr	r0, [r0, #4]
   b71c2:	2200      	movs	r2, #0
   b71c4:	f081 0101 	eor.w	r1, r1, #1
   b71c8:	f7fe bd7a 	b.w	b5cc0 <network_listen>

000b71cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b71cc:	2300      	movs	r3, #0
   b71ce:	6840      	ldr	r0, [r0, #4]
   b71d0:	461a      	mov	r2, r3
   b71d2:	4619      	mov	r1, r3
   b71d4:	f7fe bd6c 	b.w	b5cb0 <network_off>

000b71d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b71d8:	2300      	movs	r3, #0
   b71da:	6840      	ldr	r0, [r0, #4]
   b71dc:	461a      	mov	r2, r3
   b71de:	4619      	mov	r1, r3
   b71e0:	f7fe bd5e 	b.w	b5ca0 <network_on>

000b71e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b71e4:	2200      	movs	r2, #0
   b71e6:	6840      	ldr	r0, [r0, #4]
   b71e8:	4611      	mov	r1, r2
   b71ea:	f7fe bd51 	b.w	b5c90 <network_ready>

000b71ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b71ee:	2200      	movs	r2, #0
   b71f0:	6840      	ldr	r0, [r0, #4]
   b71f2:	4611      	mov	r1, r2
   b71f4:	f7fe bd3c 	b.w	b5c70 <network_connecting>

000b71f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b71f8:	6840      	ldr	r0, [r0, #4]
   b71fa:	2200      	movs	r2, #0
   b71fc:	2102      	movs	r1, #2
   b71fe:	f7fe bd3f 	b.w	b5c80 <network_disconnect>

000b7202 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7202:	2300      	movs	r3, #0
   b7204:	6840      	ldr	r0, [r0, #4]
   b7206:	461a      	mov	r2, r3
   b7208:	f7fe bd2a 	b.w	b5c60 <network_connect>

000b720c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b720c:	4b02      	ldr	r3, [pc, #8]	; (b7218 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b720e:	2203      	movs	r2, #3
   b7210:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7212:	4a02      	ldr	r2, [pc, #8]	; (b721c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7214:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7216:	4770      	bx	lr
   b7218:	2003e6c8 	.word	0x2003e6c8
   b721c:	000b92f0 	.word	0x000b92f0

000b7220 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7220:	4770      	bx	lr

000b7222 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7224:	4606      	mov	r6, r0
   b7226:	4615      	mov	r5, r2
   b7228:	460c      	mov	r4, r1
   b722a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b722c:	42bc      	cmp	r4, r7
   b722e:	d006      	beq.n	b723e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7230:	6833      	ldr	r3, [r6, #0]
   b7232:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7236:	689b      	ldr	r3, [r3, #8]
   b7238:	4630      	mov	r0, r6
   b723a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b723c:	e7f6      	b.n	b722c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b723e:	4628      	mov	r0, r5
   b7240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7242 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7242:	7c00      	ldrb	r0, [r0, #16]
   b7244:	2200      	movs	r2, #0
   b7246:	f7fe bb97 	b.w	b5978 <hal_i2c_write>

000b724a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b724a:	7c00      	ldrb	r0, [r0, #16]
   b724c:	2100      	movs	r1, #0
   b724e:	f7fe bb9b 	b.w	b5988 <hal_i2c_available>

000b7252 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7252:	7c00      	ldrb	r0, [r0, #16]
   b7254:	2100      	movs	r1, #0
   b7256:	f7fe bb9f 	b.w	b5998 <hal_i2c_read>

000b725a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b725a:	7c00      	ldrb	r0, [r0, #16]
   b725c:	2100      	movs	r1, #0
   b725e:	f7fe bba3 	b.w	b59a8 <hal_i2c_peek>

000b7262 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7262:	7c00      	ldrb	r0, [r0, #16]
   b7264:	2100      	movs	r1, #0
   b7266:	f7fe bba7 	b.w	b59b8 <hal_i2c_flush>

000b726a <_ZN7TwoWireD0Ev>:
   b726a:	b510      	push	{r4, lr}
   b726c:	2114      	movs	r1, #20
   b726e:	4604      	mov	r4, r0
   b7270:	f7fc ff13 	bl	b409a <_ZdlPvj>
   b7274:	4620      	mov	r0, r4
   b7276:	bd10      	pop	{r4, pc}

000b7278 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7278:	b538      	push	{r3, r4, r5, lr}
   b727a:	4604      	mov	r4, r0
   b727c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b727e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7282:	2200      	movs	r2, #0
   b7284:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7288:	4b09      	ldr	r3, [pc, #36]	; (b72b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b728a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b728c:	4608      	mov	r0, r1
   b728e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7290:	4629      	mov	r1, r5
   b7292:	f7fe fba1 	bl	b59d8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7296:	30bf      	adds	r0, #191	; 0xbf
   b7298:	d108      	bne.n	b72ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b729a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b729c:	07db      	lsls	r3, r3, #31
   b729e:	d505      	bpl.n	b72ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b72a0:	6868      	ldr	r0, [r5, #4]
   b72a2:	f7fe fd45 	bl	b5d30 <free>
    free(conf.tx_buffer);
   b72a6:	68e8      	ldr	r0, [r5, #12]
   b72a8:	f7fe fd42 	bl	b5d30 <free>
}
   b72ac:	4620      	mov	r0, r4
   b72ae:	bd38      	pop	{r3, r4, r5, pc}
   b72b0:	000b932c 	.word	0x000b932c

000b72b4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b72b4:	7c00      	ldrb	r0, [r0, #16]
   b72b6:	2200      	movs	r2, #0
   b72b8:	f7fe bb3e 	b.w	b5938 <hal_i2c_set_speed>

000b72bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b72bc:	2300      	movs	r3, #0
   b72be:	7c00      	ldrb	r0, [r0, #16]
   b72c0:	461a      	mov	r2, r3
   b72c2:	4619      	mov	r1, r3
   b72c4:	f7fe bb40 	b.w	b5948 <hal_i2c_begin>

000b72c8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b72c8:	7c00      	ldrb	r0, [r0, #16]
   b72ca:	2200      	movs	r2, #0
   b72cc:	f7fe bb44 	b.w	b5958 <hal_i2c_begin_transmission>

000b72d0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b72d0:	b2c9      	uxtb	r1, r1
   b72d2:	f7ff bff9 	b.w	b72c8 <_ZN7TwoWire17beginTransmissionEh>

000b72d6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b72d6:	7c00      	ldrb	r0, [r0, #16]
   b72d8:	2200      	movs	r2, #0
   b72da:	f7fe bb45 	b.w	b5968 <hal_i2c_end_transmission>

000b72de <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b72de:	2101      	movs	r1, #1
   b72e0:	f7ff bff9 	b.w	b72d6 <_ZN7TwoWire15endTransmissionEh>

000b72e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b72e4:	4770      	bx	lr

000b72e6 <_ZN9IPAddressD0Ev>:
   b72e6:	b510      	push	{r4, lr}
   b72e8:	2118      	movs	r1, #24
   b72ea:	4604      	mov	r4, r0
   b72ec:	f7fc fed5 	bl	b409a <_ZdlPvj>
   b72f0:	4620      	mov	r0, r4
   b72f2:	bd10      	pop	{r4, pc}

000b72f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b72f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b72f6:	7d03      	ldrb	r3, [r0, #20]
   b72f8:	2b06      	cmp	r3, #6
{
   b72fa:	b08d      	sub	sp, #52	; 0x34
   b72fc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b72fe:	f100 0704 	add.w	r7, r0, #4
   b7302:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7306:	d012      	beq.n	b732e <_ZNK9IPAddress7printToER5Print+0x3a>
   b7308:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b730c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7310:	220a      	movs	r2, #10
   b7312:	4630      	mov	r0, r6
   b7314:	f000 f95d 	bl	b75d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7318:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b731a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b731c:	d019      	beq.n	b7352 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b731e:	2c00      	cmp	r4, #0
   b7320:	d0f4      	beq.n	b730c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7322:	212e      	movs	r1, #46	; 0x2e
   b7324:	4630      	mov	r0, r6
   b7326:	f000 f93b 	bl	b75a0 <_ZN5Print5printEc>
   b732a:	4404      	add	r4, r0
   b732c:	e7ee      	b.n	b730c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b732e:	232f      	movs	r3, #47	; 0x2f
   b7330:	466a      	mov	r2, sp
   b7332:	4639      	mov	r1, r7
   b7334:	200a      	movs	r0, #10
		buf[0] = 0;
   b7336:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b733a:	f7fe fb55 	bl	b59e8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b733e:	4668      	mov	r0, sp
   b7340:	f000 ffdc 	bl	b82fc <strlen>
   b7344:	6833      	ldr	r3, [r6, #0]
   b7346:	4602      	mov	r2, r0
   b7348:	68db      	ldr	r3, [r3, #12]
   b734a:	4669      	mov	r1, sp
   b734c:	4630      	mov	r0, r6
   b734e:	4798      	blx	r3
   b7350:	4604      	mov	r4, r0
    }
    return n;
}
   b7352:	4620      	mov	r0, r4
   b7354:	b00d      	add	sp, #52	; 0x34
   b7356:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7358 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7358:	b510      	push	{r4, lr}
   b735a:	4b05      	ldr	r3, [pc, #20]	; (b7370 <_ZN9IPAddressC1Ev+0x18>)
   b735c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b735e:	2211      	movs	r2, #17
   b7360:	f840 3b04 	str.w	r3, [r0], #4
   b7364:	2100      	movs	r1, #0
   b7366:	f000 ff81 	bl	b826c <memset>
}
   b736a:	4620      	mov	r0, r4
   b736c:	bd10      	pop	{r4, pc}
   b736e:	bf00      	nop
   b7370:	000b9354 	.word	0x000b9354

000b7374 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7374:	4603      	mov	r3, r0
   b7376:	4a07      	ldr	r2, [pc, #28]	; (b7394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7378:	b510      	push	{r4, lr}
   b737a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b737e:	f101 0210 	add.w	r2, r1, #16
   b7382:	f851 4b04 	ldr.w	r4, [r1], #4
   b7386:	f843 4b04 	str.w	r4, [r3], #4
   b738a:	4291      	cmp	r1, r2
   b738c:	d1f9      	bne.n	b7382 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b738e:	780a      	ldrb	r2, [r1, #0]
   b7390:	701a      	strb	r2, [r3, #0]
}
   b7392:	bd10      	pop	{r4, pc}
   b7394:	000b9354 	.word	0x000b9354

000b7398 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7398:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b739a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b739e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b73a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b73a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b73aa:	2304      	movs	r3, #4
   b73ac:	6041      	str	r1, [r0, #4]
   b73ae:	7503      	strb	r3, [r0, #20]
}
   b73b0:	bd10      	pop	{r4, pc}
	...

000b73b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b73b4:	b507      	push	{r0, r1, r2, lr}
   b73b6:	4b06      	ldr	r3, [pc, #24]	; (b73d0 <_ZN9IPAddressC1EPKh+0x1c>)
   b73b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b73ba:	78cb      	ldrb	r3, [r1, #3]
   b73bc:	9300      	str	r3, [sp, #0]
   b73be:	788b      	ldrb	r3, [r1, #2]
   b73c0:	784a      	ldrb	r2, [r1, #1]
   b73c2:	7809      	ldrb	r1, [r1, #0]
   b73c4:	f7ff ffe8 	bl	b7398 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b73c8:	b003      	add	sp, #12
   b73ca:	f85d fb04 	ldr.w	pc, [sp], #4
   b73ce:	bf00      	nop
   b73d0:	000b9354 	.word	0x000b9354

000b73d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b73d4:	4b01      	ldr	r3, [pc, #4]	; (b73dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b73d6:	4a02      	ldr	r2, [pc, #8]	; (b73e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b73d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b73da:	4770      	bx	lr
   b73dc:	2003e6d0 	.word	0x2003e6d0
   b73e0:	000b9360 	.word	0x000b9360

000b73e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b73e4:	2300      	movs	r3, #0
   b73e6:	6840      	ldr	r0, [r0, #4]
   b73e8:	461a      	mov	r2, r3
   b73ea:	f7fe bc39 	b.w	b5c60 <network_connect>

000b73ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b73ee:	6840      	ldr	r0, [r0, #4]
   b73f0:	2200      	movs	r2, #0
   b73f2:	2102      	movs	r1, #2
   b73f4:	f7fe bc44 	b.w	b5c80 <network_disconnect>

000b73f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b73f8:	2200      	movs	r2, #0
   b73fa:	6840      	ldr	r0, [r0, #4]
   b73fc:	4611      	mov	r1, r2
   b73fe:	f7fe bc37 	b.w	b5c70 <network_connecting>

000b7402 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7402:	2200      	movs	r2, #0
   b7404:	6840      	ldr	r0, [r0, #4]
   b7406:	4611      	mov	r1, r2
   b7408:	f7fe bc42 	b.w	b5c90 <network_ready>

000b740c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b740c:	2300      	movs	r3, #0
   b740e:	6840      	ldr	r0, [r0, #4]
   b7410:	461a      	mov	r2, r3
   b7412:	4619      	mov	r1, r3
   b7414:	f7fe bc44 	b.w	b5ca0 <network_on>

000b7418 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7418:	2300      	movs	r3, #0
   b741a:	6840      	ldr	r0, [r0, #4]
   b741c:	461a      	mov	r2, r3
   b741e:	4619      	mov	r1, r3
   b7420:	f7fe bc46 	b.w	b5cb0 <network_off>

000b7424 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7424:	6840      	ldr	r0, [r0, #4]
   b7426:	2100      	movs	r1, #0
   b7428:	f7fe bc6a 	b.w	b5d00 <network_is_on>

000b742c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b742c:	6840      	ldr	r0, [r0, #4]
   b742e:	2100      	movs	r1, #0
   b7430:	f7fe bc6e 	b.w	b5d10 <network_is_off>

000b7434 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7434:	6840      	ldr	r0, [r0, #4]
   b7436:	2200      	movs	r2, #0
   b7438:	f081 0101 	eor.w	r1, r1, #1
   b743c:	f7fe bc40 	b.w	b5cc0 <network_listen>

000b7440 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7440:	6840      	ldr	r0, [r0, #4]
   b7442:	2200      	movs	r2, #0
   b7444:	f7fe bc4c 	b.w	b5ce0 <network_set_listen_timeout>

000b7448 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7448:	2200      	movs	r2, #0
   b744a:	6840      	ldr	r0, [r0, #4]
   b744c:	4611      	mov	r1, r2
   b744e:	f7fe bc4f 	b.w	b5cf0 <network_get_listen_timeout>

000b7452 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7452:	2200      	movs	r2, #0
   b7454:	6840      	ldr	r0, [r0, #4]
   b7456:	4611      	mov	r1, r2
   b7458:	f7fe bc3a 	b.w	b5cd0 <network_listening>

000b745c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b745c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7460:	b095      	sub	sp, #84	; 0x54
   b7462:	4614      	mov	r4, r2
   b7464:	460d      	mov	r5, r1
   b7466:	4607      	mov	r7, r0
    IPAddress addr;
   b7468:	f7ff ff76 	bl	b7358 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b746c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b746e:	221c      	movs	r2, #28
   b7470:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7472:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7474:	f000 fefa 	bl	b826c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7478:	2340      	movs	r3, #64	; 0x40
   b747a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b747c:	4620      	mov	r0, r4
   b747e:	466b      	mov	r3, sp
   b7480:	aa0c      	add	r2, sp, #48	; 0x30
   b7482:	2100      	movs	r1, #0
   b7484:	f7fe fac0 	bl	b5a08 <netdb_getaddrinfo>
    if (!r) {
   b7488:	4604      	mov	r4, r0
   b748a:	2800      	cmp	r0, #0
   b748c:	d14b      	bne.n	b7526 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b748e:	4602      	mov	r2, r0
   b7490:	2101      	movs	r1, #1
   b7492:	6868      	ldr	r0, [r5, #4]
   b7494:	f7fe fbfc 	bl	b5c90 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7498:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b749a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b749c:	4622      	mov	r2, r4
   b749e:	6868      	ldr	r0, [r5, #4]
   b74a0:	f7fe fbf6 	bl	b5c90 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74a6:	4681      	mov	r9, r0
        bool ok = false;
   b74a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74aa:	2e00      	cmp	r6, #0
   b74ac:	d03b      	beq.n	b7526 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b74ae:	2900      	cmp	r1, #0
   b74b0:	d139      	bne.n	b7526 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b74b2:	6873      	ldr	r3, [r6, #4]
   b74b4:	2b02      	cmp	r3, #2
   b74b6:	d003      	beq.n	b74c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b74b8:	2b0a      	cmp	r3, #10
   b74ba:	d011      	beq.n	b74e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74bc:	69f6      	ldr	r6, [r6, #28]
   b74be:	e7f4      	b.n	b74aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b74c0:	f1b8 0f00 	cmp.w	r8, #0
   b74c4:	d0fa      	beq.n	b74bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b74c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b74c8:	a806      	add	r0, sp, #24
   b74ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b74cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b74ce:	f7ff ff71 	bl	b73b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b74d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74d4:	1d3c      	adds	r4, r7, #4
   b74d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74d8:	682b      	ldr	r3, [r5, #0]
   b74da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b74dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b74de:	e7ed      	b.n	b74bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b74e0:	f1b9 0f00 	cmp.w	r9, #0
   b74e4:	d0ea      	beq.n	b74bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b74e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b74e8:	2210      	movs	r2, #16
   b74ea:	a801      	add	r0, sp, #4
   b74ec:	f000 febe 	bl	b826c <memset>
                    a.v = 6;
   b74f0:	2306      	movs	r3, #6
   b74f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b74f6:	ad01      	add	r5, sp, #4
   b74f8:	f104 0308 	add.w	r3, r4, #8
   b74fc:	3418      	adds	r4, #24
   b74fe:	6818      	ldr	r0, [r3, #0]
   b7500:	6859      	ldr	r1, [r3, #4]
   b7502:	462a      	mov	r2, r5
   b7504:	c203      	stmia	r2!, {r0, r1}
   b7506:	3308      	adds	r3, #8
   b7508:	42a3      	cmp	r3, r4
   b750a:	4615      	mov	r5, r2
   b750c:	d1f7      	bne.n	b74fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b750e:	a901      	add	r1, sp, #4
   b7510:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7512:	ad07      	add	r5, sp, #28
   b7514:	f7ff ff2e 	bl	b7374 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b751a:	1d3c      	adds	r4, r7, #4
   b751c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b751e:	682b      	ldr	r3, [r5, #0]
   b7520:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7522:	4649      	mov	r1, r9
   b7524:	e7ca      	b.n	b74bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7526:	9800      	ldr	r0, [sp, #0]
   b7528:	f7fe fa66 	bl	b59f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b752c:	4638      	mov	r0, r7
   b752e:	b015      	add	sp, #84	; 0x54
   b7530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7534 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7534:	4b02      	ldr	r3, [pc, #8]	; (b7540 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7536:	4a03      	ldr	r2, [pc, #12]	; (b7544 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7538:	601a      	str	r2, [r3, #0]
   b753a:	2200      	movs	r2, #0
   b753c:	605a      	str	r2, [r3, #4]

} // spark
   b753e:	4770      	bx	lr
   b7540:	2003e6d4 	.word	0x2003e6d4
   b7544:	000b936c 	.word	0x000b936c

000b7548 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b754a:	4606      	mov	r6, r0
   b754c:	460d      	mov	r5, r1
  size_t n = 0;
   b754e:	188f      	adds	r7, r1, r2
   b7550:	2400      	movs	r4, #0
  while (size--) {
   b7552:	42bd      	cmp	r5, r7
   b7554:	d00c      	beq.n	b7570 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7556:	6833      	ldr	r3, [r6, #0]
   b7558:	f815 1b01 	ldrb.w	r1, [r5], #1
   b755c:	689b      	ldr	r3, [r3, #8]
   b755e:	4630      	mov	r0, r6
   b7560:	4798      	blx	r3
     if (chunk>=0)
   b7562:	1e03      	subs	r3, r0, #0
   b7564:	db01      	blt.n	b756a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7566:	441c      	add	r4, r3
  while (size--) {
   b7568:	e7f3      	b.n	b7552 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b756a:	2c00      	cmp	r4, #0
   b756c:	bf08      	it	eq
   b756e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7570:	4620      	mov	r0, r4
   b7572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7574 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7574:	b513      	push	{r0, r1, r4, lr}
   b7576:	4604      	mov	r4, r0
    }
   b7578:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b757a:	b159      	cbz	r1, b7594 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b757c:	9101      	str	r1, [sp, #4]
   b757e:	f000 febd 	bl	b82fc <strlen>
   b7582:	6823      	ldr	r3, [r4, #0]
   b7584:	9901      	ldr	r1, [sp, #4]
   b7586:	68db      	ldr	r3, [r3, #12]
   b7588:	4602      	mov	r2, r0
   b758a:	4620      	mov	r0, r4
    }
   b758c:	b002      	add	sp, #8
   b758e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7592:	4718      	bx	r3
    }
   b7594:	b002      	add	sp, #8
   b7596:	bd10      	pop	{r4, pc}

000b7598 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7598:	b508      	push	{r3, lr}
  return write(str);
   b759a:	f7ff ffeb 	bl	b7574 <_ZN5Print5writeEPKc>
}
   b759e:	bd08      	pop	{r3, pc}

000b75a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b75a0:	6803      	ldr	r3, [r0, #0]
   b75a2:	689b      	ldr	r3, [r3, #8]
   b75a4:	4718      	bx	r3

000b75a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b75a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b75a8:	210d      	movs	r1, #13
{
   b75aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b75ac:	f7ff fff8 	bl	b75a0 <_ZN5Print5printEc>
  n += print('\n');
   b75b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b75b2:	4604      	mov	r4, r0
  n += print('\n');
   b75b4:	4628      	mov	r0, r5
   b75b6:	f7ff fff3 	bl	b75a0 <_ZN5Print5printEc>
  return n;
}
   b75ba:	4420      	add	r0, r4
   b75bc:	bd38      	pop	{r3, r4, r5, pc}

000b75be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b75be:	b538      	push	{r3, r4, r5, lr}
   b75c0:	4605      	mov	r5, r0
  return write(str);
   b75c2:	f7ff ffd7 	bl	b7574 <_ZN5Print5writeEPKc>
   b75c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b75c8:	4628      	mov	r0, r5
   b75ca:	f7ff ffec 	bl	b75a6 <_ZN5Print7printlnEv>
  return n;
}
   b75ce:	4420      	add	r0, r4
   b75d0:	bd38      	pop	{r3, r4, r5, pc}

000b75d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b75d2:	b530      	push	{r4, r5, lr}
   b75d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b75d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b75d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b75da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b75de:	bf98      	it	ls
   b75e0:	220a      	movls	r2, #10
   b75e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b75e4:	460d      	mov	r5, r1
   b75e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b75ea:	fb01 5312 	mls	r3, r1, r2, r5
   b75ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b75f2:	2b09      	cmp	r3, #9
   b75f4:	bf94      	ite	ls
   b75f6:	3330      	addls	r3, #48	; 0x30
   b75f8:	3337      	addhi	r3, #55	; 0x37
   b75fa:	b2db      	uxtb	r3, r3
  } while(n);
   b75fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b75fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7602:	d9ef      	bls.n	b75e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7604:	4621      	mov	r1, r4
   b7606:	f7ff ffb5 	bl	b7574 <_ZN5Print5writeEPKc>
}
   b760a:	b00b      	add	sp, #44	; 0x2c
   b760c:	bd30      	pop	{r4, r5, pc}

000b760e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7612:	b086      	sub	sp, #24
   b7614:	af00      	add	r7, sp, #0
   b7616:	4605      	mov	r5, r0
   b7618:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b761a:	1d38      	adds	r0, r7, #4
   b761c:	2114      	movs	r1, #20
{
   b761e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7620:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7622:	f7fe fb95 	bl	b5d50 <vsnprintf>

    if (n<bufsize)
   b7626:	2813      	cmp	r0, #19
   b7628:	d80e      	bhi.n	b7648 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b762a:	1d39      	adds	r1, r7, #4
   b762c:	4628      	mov	r0, r5
   b762e:	f7ff ffa1 	bl	b7574 <_ZN5Print5writeEPKc>
   b7632:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7634:	b11e      	cbz	r6, b763e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7636:	4628      	mov	r0, r5
   b7638:	f7ff ffb5 	bl	b75a6 <_ZN5Print7printlnEv>
   b763c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b763e:	4620      	mov	r0, r4
   b7640:	3718      	adds	r7, #24
   b7642:	46bd      	mov	sp, r7
   b7644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7648:	f100 0308 	add.w	r3, r0, #8
   b764c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7650:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7652:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7656:	4622      	mov	r2, r4
   b7658:	1c41      	adds	r1, r0, #1
   b765a:	683b      	ldr	r3, [r7, #0]
   b765c:	4668      	mov	r0, sp
   b765e:	f7fe fb77 	bl	b5d50 <vsnprintf>
  return write(str);
   b7662:	4669      	mov	r1, sp
   b7664:	4628      	mov	r0, r5
   b7666:	f7ff ff85 	bl	b7574 <_ZN5Print5writeEPKc>
   b766a:	4604      	mov	r4, r0
   b766c:	46c5      	mov	sp, r8
   b766e:	e7e1      	b.n	b7634 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7670 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b7670:	b510      	push	{r4, lr}
   b7672:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b7674:	f7fe faa0 	bl	b5bb8 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b7678:	4284      	cmp	r4, r0
   b767a:	d008      	beq.n	b768e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b767c:	b11c      	cbz	r4, b7686 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b767e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b7682:	f7fe ba89 	b.w	b5b98 <LED_Signaling_Start>
}
   b7686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b768a:	f7fe ba8d 	b.w	b5ba8 <LED_Signaling_Stop>
}
   b768e:	bd10      	pop	{r4, pc}

000b7690 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b7690:	b570      	push	{r4, r5, r6, lr}
   b7692:	4605      	mov	r5, r0
   b7694:	460e      	mov	r6, r1
   b7696:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b7698:	f7fe fa8e 	bl	b5bb8 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b769c:	b150      	cbz	r0, b76b4 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b769e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b76a2:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b76a6:	f7fe fa6f 	bl	b5b88 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b76aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b76ae:	20e7      	movs	r0, #231	; 0xe7
   b76b0:	f7fe ba8a 	b.w	b5bc8 <LED_On>
}
   b76b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b76b8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b76b8:	4b01      	ldr	r3, [pc, #4]	; (b76c0 <_GLOBAL__sub_I_RGB+0x8>)
   b76ba:	2200      	movs	r2, #0
   b76bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b76be:	4770      	bx	lr
   b76c0:	2003e6dc 	.word	0x2003e6dc

000b76c4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b76c4:	2100      	movs	r1, #0
   b76c6:	f7fe b9df 	b.w	b5a88 <hal_spi_release>

000b76ca <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b76ca:	2100      	movs	r1, #0
   b76cc:	f7fe b9d4 	b.w	b5a78 <hal_spi_acquire>

000b76d0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b76d0:	b510      	push	{r4, lr}
   b76d2:	4604      	mov	r4, r0
   b76d4:	4608      	mov	r0, r1
{
    _spi = spi;
   b76d6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b76d8:	f7fe f9ae 	bl	b5a38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b76dc:	2300      	movs	r3, #0
   b76de:	6063      	str	r3, [r4, #4]
}
   b76e0:	4620      	mov	r0, r4
   b76e2:	bd10      	pop	{r4, pc}

000b76e4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b76e4:	b513      	push	{r0, r1, r4, lr}
   b76e6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b76e8:	7800      	ldrb	r0, [r0, #0]
   b76ea:	f7ff ffee 	bl	b76ca <_ZN8SPIClass4lockEv.isra.0>
   b76ee:	b958      	cbnz	r0, b7708 <_ZN8SPIClass5beginEv+0x24>
   b76f0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b76f2:	9001      	str	r0, [sp, #4]
   b76f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b76f8:	f7fe f98e 	bl	b5a18 <hal_spi_begin>
        unlock();
   b76fc:	9801      	ldr	r0, [sp, #4]
    }
}
   b76fe:	b002      	add	sp, #8
   b7700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7704:	f7ff bfde 	b.w	b76c4 <_ZN8SPIClass6unlockEv.isra.0>
   b7708:	b002      	add	sp, #8
   b770a:	bd10      	pop	{r4, pc}

000b770c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b770c:	7800      	ldrb	r0, [r0, #0]
   b770e:	f7ff bfd9 	b.w	b76c4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7714 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7714:	0840      	lsrs	r0, r0, #1
{
   b7716:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7718:	6018      	str	r0, [r3, #0]
   b771a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b771c:	6818      	ldr	r0, [r3, #0]
   b771e:	4288      	cmp	r0, r1
   b7720:	b2e5      	uxtb	r5, r4
   b7722:	d906      	bls.n	b7732 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7724:	3401      	adds	r4, #1
   b7726:	2c08      	cmp	r4, #8
   b7728:	d002      	beq.n	b7730 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b772a:	0840      	lsrs	r0, r0, #1
   b772c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b772e:	e7f5      	b.n	b771c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7730:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7732:	4b02      	ldr	r3, [pc, #8]	; (b773c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7734:	5d5b      	ldrb	r3, [r3, r5]
   b7736:	7013      	strb	r3, [r2, #0]
}
   b7738:	bd30      	pop	{r4, r5, pc}
   b773a:	bf00      	nop
   b773c:	000b93a0 	.word	0x000b93a0

000b7740 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7744:	4606      	mov	r6, r0
   b7746:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7748:	7800      	ldrb	r0, [r0, #0]
{
   b774a:	460c      	mov	r4, r1
    CHECK(lock());
   b774c:	f7ff ffbd 	bl	b76ca <_ZN8SPIClass4lockEv.isra.0>
   b7750:	2800      	cmp	r0, #0
   b7752:	db1b      	blt.n	b778c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7754:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7756:	2214      	movs	r2, #20
   b7758:	2100      	movs	r1, #0
   b775a:	a809      	add	r0, sp, #36	; 0x24
   b775c:	f000 fd86 	bl	b826c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7760:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7762:	2200      	movs	r2, #0
   b7764:	a909      	add	r1, sp, #36	; 0x24
   b7766:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7768:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b776c:	f7fe f974 	bl	b5a58 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7770:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7774:	b113      	cbz	r3, b777c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7776:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b777a:	b155      	cbz	r5, b7792 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b777c:	2700      	movs	r7, #0
   b777e:	46b9      	mov	r9, r7
   b7780:	46b8      	mov	r8, r7
   b7782:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7784:	7923      	ldrb	r3, [r4, #4]
   b7786:	b15d      	cbz	r5, b77a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7788:	b1c3      	cbz	r3, b77bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b778a:	2000      	movs	r0, #0
}
   b778c:	b00f      	add	sp, #60	; 0x3c
   b778e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7792:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7796:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b779a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b779e:	e7f1      	b.n	b7784 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b77a0:	2b00      	cmp	r3, #0
   b77a2:	d135      	bne.n	b7810 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b77a4:	68a3      	ldr	r3, [r4, #8]
   b77a6:	4543      	cmp	r3, r8
   b77a8:	d108      	bne.n	b77bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b77aa:	f88d 9020 	strb.w	r9, [sp, #32]
   b77ae:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b77b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b77b6:	89a3      	ldrh	r3, [r4, #12]
   b77b8:	429a      	cmp	r2, r3
   b77ba:	d0e6      	beq.n	b778a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b77bc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b77be:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b77c0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b77c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b77c6:	ab04      	add	r3, sp, #16
   b77c8:	f10d 020f 	add.w	r2, sp, #15
   b77cc:	f7ff ffa2 	bl	b7714 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b77d0:	7921      	ldrb	r1, [r4, #4]
   b77d2:	b985      	cbnz	r5, b77f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b77d4:	b989      	cbnz	r1, b77fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b77d6:	68a3      	ldr	r3, [r4, #8]
   b77d8:	4543      	cmp	r3, r8
   b77da:	d30e      	bcc.n	b77fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b77dc:	f88d 9020 	strb.w	r9, [sp, #32]
   b77e0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b77e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b77e8:	89a3      	ldrh	r3, [r4, #12]
   b77ea:	429a      	cmp	r2, r3
   b77ec:	d105      	bne.n	b77fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b77ee:	9b04      	ldr	r3, [sp, #16]
   b77f0:	4543      	cmp	r3, r8
   b77f2:	d102      	bne.n	b77fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b77f4:	e7c9      	b.n	b778a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b77f6:	2900      	cmp	r1, #0
   b77f8:	d1f9      	bne.n	b77ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b77fa:	2300      	movs	r3, #0
   b77fc:	9301      	str	r3, [sp, #4]
   b77fe:	7b63      	ldrb	r3, [r4, #13]
   b7800:	9300      	str	r3, [sp, #0]
   b7802:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7806:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7808:	7830      	ldrb	r0, [r6, #0]
   b780a:	f7fe f92d 	bl	b5a68 <hal_spi_set_settings>
   b780e:	e7bc      	b.n	b778a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7810:	e9cd 5500 	strd	r5, r5, [sp]
   b7814:	462b      	mov	r3, r5
   b7816:	462a      	mov	r2, r5
   b7818:	2101      	movs	r1, #1
   b781a:	e7f5      	b.n	b7808 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b781c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b781c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b781e:	7800      	ldrb	r0, [r0, #0]
   b7820:	f7fe f902 	bl	b5a28 <hal_spi_transfer>
}
   b7824:	b2c0      	uxtb	r0, r0
   b7826:	bd08      	pop	{r3, pc}

000b7828 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7828:	b510      	push	{r4, lr}
   b782a:	4604      	mov	r4, r0
{
	free(buffer);
   b782c:	6800      	ldr	r0, [r0, #0]
   b782e:	f7fe fa7f 	bl	b5d30 <free>
}
   b7832:	4620      	mov	r0, r4
   b7834:	bd10      	pop	{r4, pc}

000b7836 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7836:	b510      	push	{r4, lr}
   b7838:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b783a:	6800      	ldr	r0, [r0, #0]
   b783c:	b108      	cbz	r0, b7842 <_ZN6String10invalidateEv+0xc>
   b783e:	f7fe fa77 	bl	b5d30 <free>
	buffer = NULL;
   b7842:	2300      	movs	r3, #0
	capacity = len = 0;
   b7844:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7848:	6023      	str	r3, [r4, #0]
}
   b784a:	bd10      	pop	{r4, pc}

000b784c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b784c:	b538      	push	{r3, r4, r5, lr}
   b784e:	4604      	mov	r4, r0
   b7850:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7852:	6800      	ldr	r0, [r0, #0]
   b7854:	3101      	adds	r1, #1
   b7856:	f7fe fa73 	bl	b5d40 <realloc>
	if (newbuffer) {
   b785a:	b110      	cbz	r0, b7862 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b785c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7860:	2001      	movs	r0, #1
	}
	return 0;
}
   b7862:	bd38      	pop	{r3, r4, r5, pc}

000b7864 <_ZN6String7reserveEj>:
{
   b7864:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7866:	6803      	ldr	r3, [r0, #0]
{
   b7868:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b786a:	b123      	cbz	r3, b7876 <_ZN6String7reserveEj+0x12>
   b786c:	6843      	ldr	r3, [r0, #4]
   b786e:	428b      	cmp	r3, r1
   b7870:	d301      	bcc.n	b7876 <_ZN6String7reserveEj+0x12>
   b7872:	2001      	movs	r0, #1
}
   b7874:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7876:	4620      	mov	r0, r4
   b7878:	f7ff ffe8 	bl	b784c <_ZN6String12changeBufferEj>
   b787c:	2800      	cmp	r0, #0
   b787e:	d0f9      	beq.n	b7874 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7880:	68a3      	ldr	r3, [r4, #8]
   b7882:	2b00      	cmp	r3, #0
   b7884:	d1f5      	bne.n	b7872 <_ZN6String7reserveEj+0xe>
   b7886:	6822      	ldr	r2, [r4, #0]
   b7888:	7013      	strb	r3, [r2, #0]
   b788a:	e7f2      	b.n	b7872 <_ZN6String7reserveEj+0xe>

000b788c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b788c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b788e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7890:	4611      	mov	r1, r2
   b7892:	9201      	str	r2, [sp, #4]
{
   b7894:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7896:	f7ff ffe5 	bl	b7864 <_ZN6String7reserveEj>
   b789a:	9a01      	ldr	r2, [sp, #4]
   b789c:	b928      	cbnz	r0, b78aa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b789e:	4620      	mov	r0, r4
   b78a0:	f7ff ffc9 	bl	b7836 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b78a4:	4620      	mov	r0, r4
   b78a6:	b003      	add	sp, #12
   b78a8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b78aa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b78ac:	4629      	mov	r1, r5
   b78ae:	6820      	ldr	r0, [r4, #0]
   b78b0:	f000 fcb4 	bl	b821c <memcpy>
	buffer[len] = 0;
   b78b4:	6822      	ldr	r2, [r4, #0]
   b78b6:	68a3      	ldr	r3, [r4, #8]
   b78b8:	2100      	movs	r1, #0
   b78ba:	54d1      	strb	r1, [r2, r3]
	return *this;
   b78bc:	e7f2      	b.n	b78a4 <_ZN6String4copyEPKcj+0x18>

000b78be <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b78be:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b78c0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b78c2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b78c6:	4604      	mov	r4, r0
	len = 0;
   b78c8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b78ca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b78cc:	b141      	cbz	r1, b78e0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b78ce:	4608      	mov	r0, r1
   b78d0:	9101      	str	r1, [sp, #4]
   b78d2:	f000 fd13 	bl	b82fc <strlen>
   b78d6:	9901      	ldr	r1, [sp, #4]
   b78d8:	4602      	mov	r2, r0
   b78da:	4620      	mov	r0, r4
   b78dc:	f7ff ffd6 	bl	b788c <_ZN6String4copyEPKcj>
}
   b78e0:	4620      	mov	r0, r4
   b78e2:	b002      	add	sp, #8
   b78e4:	bd10      	pop	{r4, pc}

000b78e6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b78e6:	b538      	push	{r3, r4, r5, lr}
   b78e8:	4605      	mov	r5, r0
	if (buffer) {
   b78ea:	6800      	ldr	r0, [r0, #0]
{
   b78ec:	460c      	mov	r4, r1
	if (buffer) {
   b78ee:	b168      	cbz	r0, b790c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b78f0:	686a      	ldr	r2, [r5, #4]
   b78f2:	688b      	ldr	r3, [r1, #8]
   b78f4:	429a      	cmp	r2, r3
   b78f6:	d307      	bcc.n	b7908 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b78f8:	6809      	ldr	r1, [r1, #0]
   b78fa:	f000 fcf7 	bl	b82ec <strcpy>
			len = rhs.len;
   b78fe:	68a3      	ldr	r3, [r4, #8]
   b7900:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7902:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7904:	60a3      	str	r3, [r4, #8]
}
   b7906:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7908:	f7fe fa12 	bl	b5d30 <free>
	buffer = rhs.buffer;
   b790c:	6823      	ldr	r3, [r4, #0]
   b790e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7910:	6863      	ldr	r3, [r4, #4]
   b7912:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7914:	68a3      	ldr	r3, [r4, #8]
   b7916:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7918:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b791a:	e9c4 3300 	strd	r3, r3, [r4]
   b791e:	e7f1      	b.n	b7904 <_ZN6String4moveERS_+0x1e>

000b7920 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b7920:	4288      	cmp	r0, r1
{
   b7922:	b510      	push	{r4, lr}
   b7924:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b7926:	d001      	beq.n	b792c <_ZN6StringaSEOS_+0xc>
   b7928:	f7ff ffdd 	bl	b78e6 <_ZN6String4moveERS_>
	return *this;
}
   b792c:	4620      	mov	r0, r4
   b792e:	bd10      	pop	{r4, pc}

000b7930 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7930:	b513      	push	{r0, r1, r4, lr}
   b7932:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7934:	b159      	cbz	r1, b794e <_ZN6StringaSEPKc+0x1e>
   b7936:	4608      	mov	r0, r1
   b7938:	9101      	str	r1, [sp, #4]
   b793a:	f000 fcdf 	bl	b82fc <strlen>
   b793e:	9901      	ldr	r1, [sp, #4]
   b7940:	4602      	mov	r2, r0
   b7942:	4620      	mov	r0, r4
   b7944:	f7ff ffa2 	bl	b788c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7948:	4620      	mov	r0, r4
   b794a:	b002      	add	sp, #8
   b794c:	bd10      	pop	{r4, pc}
	else invalidate();
   b794e:	f7ff ff72 	bl	b7836 <_ZN6String10invalidateEv>
   b7952:	e7f9      	b.n	b7948 <_ZN6StringaSEPKc+0x18>

000b7954 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b7954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7956:	4604      	mov	r4, r0
	buffer = NULL;
   b7958:	2300      	movs	r3, #0
	capacity = 0;
   b795a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b795e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7960:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b7962:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b7964:	a901      	add	r1, sp, #4
   b7966:	f000 f98b 	bl	b7c80 <utoa>
	*this = buf;
   b796a:	a901      	add	r1, sp, #4
   b796c:	4620      	mov	r0, r4
   b796e:	f7ff ffdf 	bl	b7930 <_ZN6StringaSEPKc>
}
   b7972:	4620      	mov	r0, r4
   b7974:	b004      	add	sp, #16
   b7976:	bd10      	pop	{r4, pc}

000b7978 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b7978:	b558      	push	{r3, r4, r6, lr}
   b797a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b797c:	b12a      	cbz	r2, b798a <_ZNK6String8getBytesEPhjj+0x12>
   b797e:	b121      	cbz	r1, b798a <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b7980:	6884      	ldr	r4, [r0, #8]
   b7982:	42a3      	cmp	r3, r4
   b7984:	d302      	bcc.n	b798c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b7986:	2300      	movs	r3, #0
   b7988:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b798a:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b798c:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b798e:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b7990:	6801      	ldr	r1, [r0, #0]
   b7992:	4294      	cmp	r4, r2
   b7994:	bf28      	it	cs
   b7996:	4614      	movcs	r4, r2
   b7998:	4419      	add	r1, r3
   b799a:	4622      	mov	r2, r4
   b799c:	4630      	mov	r0, r6
   b799e:	f000 fcb5 	bl	b830c <strncpy>
	buf[n] = 0;
   b79a2:	2300      	movs	r3, #0
   b79a4:	5533      	strb	r3, [r6, r4]
   b79a6:	e7f0      	b.n	b798a <_ZNK6String8getBytesEPhjj+0x12>

000b79a8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b79a8:	6800      	ldr	r0, [r0, #0]
   b79aa:	b108      	cbz	r0, b79b0 <_ZNK6String5toIntEv+0x8>
   b79ac:	f000 bc22 	b.w	b81f4 <atol>
	return 0;
}
   b79b0:	4770      	bx	lr
	...

000b79b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b79b4:	4b05      	ldr	r3, [pc, #20]	; (b79cc <_GLOBAL__sub_I_System+0x18>)
   b79b6:	2202      	movs	r2, #2
   b79b8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b79ba:	4b05      	ldr	r3, [pc, #20]	; (b79d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b79bc:	4a05      	ldr	r2, [pc, #20]	; (b79d4 <_GLOBAL__sub_I_System+0x20>)
   b79be:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b79c0:	2000      	movs	r0, #0
   b79c2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b79c6:	f7fe b917 	b.w	b5bf8 <set_system_mode>
   b79ca:	bf00      	nop
   b79cc:	2003e6f8 	.word	0x2003e6f8
   b79d0:	2003e6ec 	.word	0x2003e6ec
   b79d4:	ffff0000 	.word	0xffff0000

000b79d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b79d8:	4b02      	ldr	r3, [pc, #8]	; (b79e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b79da:	681a      	ldr	r2, [r3, #0]
   b79dc:	4b02      	ldr	r3, [pc, #8]	; (b79e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b79de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b79e0:	4770      	bx	lr
   b79e2:	bf00      	nop
   b79e4:	2003e54c 	.word	0x2003e54c
   b79e8:	2003e6fc 	.word	0x2003e6fc

000b79ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b79ec:	4770      	bx	lr

000b79ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b79ee:	7441      	strb	r1, [r0, #17]
}
   b79f0:	4770      	bx	lr

000b79f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b79f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b79f4:	7c00      	ldrb	r0, [r0, #16]
   b79f6:	f7fe f87f 	bl	b5af8 <hal_usart_available_data_for_write>
}
   b79fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b79fe:	bd08      	pop	{r3, pc}

000b7a00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a00:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a02:	7c00      	ldrb	r0, [r0, #16]
   b7a04:	f7fe f850 	bl	b5aa8 <hal_usart_available>
}
   b7a08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a0c:	bd08      	pop	{r3, pc}

000b7a0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7a0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7a10:	7c00      	ldrb	r0, [r0, #16]
   b7a12:	f7fe f859 	bl	b5ac8 <hal_usart_peek>
}
   b7a16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a1a:	bd08      	pop	{r3, pc}

000b7a1c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7a1c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7a1e:	7c00      	ldrb	r0, [r0, #16]
   b7a20:	f7fe f84a 	bl	b5ab8 <hal_usart_read>
}
   b7a24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a28:	bd08      	pop	{r3, pc}

000b7a2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7a2a:	7c00      	ldrb	r0, [r0, #16]
   b7a2c:	f7fe b854 	b.w	b5ad8 <hal_usart_flush>

000b7a30 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a32:	7c45      	ldrb	r5, [r0, #17]
{
   b7a34:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a36:	b12d      	cbz	r5, b7a44 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7a38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7a3a:	b003      	add	sp, #12
   b7a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7a40:	f7fe b82a 	b.w	b5a98 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a44:	7c00      	ldrb	r0, [r0, #16]
   b7a46:	9101      	str	r1, [sp, #4]
   b7a48:	f7fe f856 	bl	b5af8 <hal_usart_available_data_for_write>
   b7a4c:	2800      	cmp	r0, #0
   b7a4e:	9901      	ldr	r1, [sp, #4]
   b7a50:	dcf2      	bgt.n	b7a38 <_ZN11USARTSerial5writeEh+0x8>
}
   b7a52:	4628      	mov	r0, r5
   b7a54:	b003      	add	sp, #12
   b7a56:	bd30      	pop	{r4, r5, pc}

000b7a58 <_ZN11USARTSerialD0Ev>:
   b7a58:	b510      	push	{r4, lr}
   b7a5a:	2114      	movs	r1, #20
   b7a5c:	4604      	mov	r4, r0
   b7a5e:	f7fc fb1c 	bl	b409a <_ZdlPvj>
   b7a62:	4620      	mov	r0, r4
   b7a64:	bd10      	pop	{r4, pc}
	...

000b7a68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7a68:	b510      	push	{r4, lr}
   b7a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a6e:	4604      	mov	r4, r0
   b7a70:	4608      	mov	r0, r1
   b7a72:	4611      	mov	r1, r2
   b7a74:	2200      	movs	r2, #0
   b7a76:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7a7a:	4b04      	ldr	r3, [pc, #16]	; (b7a8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7a7c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7a7e:	2301      	movs	r3, #1
  _serial = serial;
   b7a80:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7a82:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7a84:	f7fe f840 	bl	b5b08 <hal_usart_init_ex>
}
   b7a88:	4620      	mov	r0, r4
   b7a8a:	bd10      	pop	{r4, pc}
   b7a8c:	000b93cc 	.word	0x000b93cc

000b7a90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a90:	7441      	strb	r1, [r0, #17]
}
   b7a92:	4770      	bx	lr

000b7a94 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7a94:	4770      	bx	lr

000b7a96 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7a96:	4770      	bx	lr

000b7a98 <_ZN9USBSerial4readEv>:
{
   b7a98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7a9a:	2100      	movs	r1, #0
   b7a9c:	7c00      	ldrb	r0, [r0, #16]
   b7a9e:	f7fe f85b 	bl	b5b58 <HAL_USB_USART_Receive_Data>
}
   b7aa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7aa6:	bd08      	pop	{r3, pc}

000b7aa8 <_ZN9USBSerial4peekEv>:
{
   b7aa8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7aaa:	2101      	movs	r1, #1
   b7aac:	7c00      	ldrb	r0, [r0, #16]
   b7aae:	f7fe f853 	bl	b5b58 <HAL_USB_USART_Receive_Data>
}
   b7ab2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ab6:	bd08      	pop	{r3, pc}

000b7ab8 <_ZN9USBSerial17availableForWriteEv>:
{
   b7ab8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7aba:	7c00      	ldrb	r0, [r0, #16]
   b7abc:	f7fe f844 	bl	b5b48 <HAL_USB_USART_Available_Data_For_Write>
}
   b7ac0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ac4:	bd08      	pop	{r3, pc}

000b7ac6 <_ZN9USBSerial9availableEv>:
{
   b7ac6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7ac8:	7c00      	ldrb	r0, [r0, #16]
   b7aca:	f7fe f835 	bl	b5b38 <HAL_USB_USART_Available_Data>
}
   b7ace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ad2:	bd08      	pop	{r3, pc}

000b7ad4 <_ZN9USBSerial5writeEh>:
{
   b7ad4:	b513      	push	{r0, r1, r4, lr}
   b7ad6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ad8:	7c00      	ldrb	r0, [r0, #16]
{
   b7ada:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7adc:	f7fe f834 	bl	b5b48 <HAL_USB_USART_Available_Data_For_Write>
   b7ae0:	2800      	cmp	r0, #0
   b7ae2:	9901      	ldr	r1, [sp, #4]
   b7ae4:	dc01      	bgt.n	b7aea <_ZN9USBSerial5writeEh+0x16>
   b7ae6:	7c60      	ldrb	r0, [r4, #17]
   b7ae8:	b120      	cbz	r0, b7af4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7aea:	7c20      	ldrb	r0, [r4, #16]
   b7aec:	f7fe f83c 	bl	b5b68 <HAL_USB_USART_Send_Data>
   b7af0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7af4:	b002      	add	sp, #8
   b7af6:	bd10      	pop	{r4, pc}

000b7af8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7af8:	7c00      	ldrb	r0, [r0, #16]
   b7afa:	f7fe b83d 	b.w	b5b78 <HAL_USB_USART_Flush_Data>

000b7afe <_ZN9USBSerialD0Ev>:
   b7afe:	b510      	push	{r4, lr}
   b7b00:	2114      	movs	r1, #20
   b7b02:	4604      	mov	r4, r0
   b7b04:	f7fc fac9 	bl	b409a <_ZdlPvj>
   b7b08:	4620      	mov	r0, r4
   b7b0a:	bd10      	pop	{r4, pc}

000b7b0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b0c:	b510      	push	{r4, lr}
   b7b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b12:	4604      	mov	r4, r0
   b7b14:	4608      	mov	r0, r1
   b7b16:	2100      	movs	r1, #0
   b7b18:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b1c:	4b04      	ldr	r3, [pc, #16]	; (b7b30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b1e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b20:	2301      	movs	r3, #1
  _serial = serial;
   b7b22:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b24:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b26:	4611      	mov	r1, r2
   b7b28:	f7fd fff6 	bl	b5b18 <HAL_USB_USART_Init>
}
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	bd10      	pop	{r4, pc}
   b7b30:	000b93fc 	.word	0x000b93fc

000b7b34 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7b34:	7c00      	ldrb	r0, [r0, #16]
   b7b36:	2200      	movs	r2, #0
   b7b38:	f7fd bff6 	b.w	b5b28 <HAL_USB_USART_Begin>

000b7b3c <_Z19acquireSerialBufferv>:
{
   b7b3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7b3e:	2214      	movs	r2, #20
{
   b7b40:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7b42:	2100      	movs	r1, #0
   b7b44:	f000 fb92 	bl	b826c <memset>
}
   b7b48:	4620      	mov	r0, r4
   b7b4a:	bd10      	pop	{r4, pc}

000b7b4c <_Z16_fetch_usbserialv>:
{
   b7b4c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b4e:	4c0f      	ldr	r4, [pc, #60]	; (b7b8c <_Z16_fetch_usbserialv+0x40>)
{
   b7b50:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7b52:	a803      	add	r0, sp, #12
   b7b54:	f7ff fff2 	bl	b7b3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b58:	7821      	ldrb	r1, [r4, #0]
   b7b5a:	f3bf 8f5b 	dmb	ish
   b7b5e:	f011 0101 	ands.w	r1, r1, #1
   b7b62:	d10f      	bne.n	b7b84 <_Z16_fetch_usbserialv+0x38>
   b7b64:	4620      	mov	r0, r4
   b7b66:	9101      	str	r1, [sp, #4]
   b7b68:	f7fc faa6 	bl	b40b8 <__cxa_guard_acquire>
   b7b6c:	9901      	ldr	r1, [sp, #4]
   b7b6e:	b148      	cbz	r0, b7b84 <_Z16_fetch_usbserialv+0x38>
   b7b70:	aa03      	add	r2, sp, #12
   b7b72:	4807      	ldr	r0, [pc, #28]	; (b7b90 <_Z16_fetch_usbserialv+0x44>)
   b7b74:	f7ff ffca 	bl	b7b0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7b78:	4620      	mov	r0, r4
   b7b7a:	f7fc faa2 	bl	b40c2 <__cxa_guard_release>
   b7b7e:	4805      	ldr	r0, [pc, #20]	; (b7b94 <_Z16_fetch_usbserialv+0x48>)
   b7b80:	f000 fb32 	bl	b81e8 <atexit>
	return _usbserial;
}
   b7b84:	4802      	ldr	r0, [pc, #8]	; (b7b90 <_Z16_fetch_usbserialv+0x44>)
   b7b86:	b008      	add	sp, #32
   b7b88:	bd10      	pop	{r4, pc}
   b7b8a:	bf00      	nop
   b7b8c:	2003e700 	.word	0x2003e700
   b7b90:	2003e704 	.word	0x2003e704
   b7b94:	000b7a95 	.word	0x000b7a95

000b7b98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7b98:	2200      	movs	r2, #0
   b7b9a:	6840      	ldr	r0, [r0, #4]
   b7b9c:	4611      	mov	r1, r2
   b7b9e:	f7fe b877 	b.w	b5c90 <network_ready>

000b7ba2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ba2:	2200      	movs	r2, #0
   b7ba4:	6840      	ldr	r0, [r0, #4]
   b7ba6:	4611      	mov	r1, r2
   b7ba8:	f7fe b892 	b.w	b5cd0 <network_listening>

000b7bac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7bac:	2200      	movs	r2, #0
   b7bae:	6840      	ldr	r0, [r0, #4]
   b7bb0:	4611      	mov	r1, r2
   b7bb2:	f7fe b89d 	b.w	b5cf0 <network_get_listen_timeout>

000b7bb6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7bb6:	6840      	ldr	r0, [r0, #4]
   b7bb8:	2200      	movs	r2, #0
   b7bba:	f7fe b891 	b.w	b5ce0 <network_set_listen_timeout>

000b7bbe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7bbe:	6840      	ldr	r0, [r0, #4]
   b7bc0:	2200      	movs	r2, #0
   b7bc2:	f081 0101 	eor.w	r1, r1, #1
   b7bc6:	f7fe b87b 	b.w	b5cc0 <network_listen>

000b7bca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7bca:	2300      	movs	r3, #0
   b7bcc:	6840      	ldr	r0, [r0, #4]
   b7bce:	461a      	mov	r2, r3
   b7bd0:	4619      	mov	r1, r3
   b7bd2:	f7fe b86d 	b.w	b5cb0 <network_off>

000b7bd6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7bd6:	2300      	movs	r3, #0
   b7bd8:	6840      	ldr	r0, [r0, #4]
   b7bda:	461a      	mov	r2, r3
   b7bdc:	4619      	mov	r1, r3
   b7bde:	f7fe b85f 	b.w	b5ca0 <network_on>

000b7be2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7be2:	2200      	movs	r2, #0
   b7be4:	6840      	ldr	r0, [r0, #4]
   b7be6:	4611      	mov	r1, r2
   b7be8:	f7fe b842 	b.w	b5c70 <network_connecting>

000b7bec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7bec:	6840      	ldr	r0, [r0, #4]
   b7bee:	2200      	movs	r2, #0
   b7bf0:	2102      	movs	r1, #2
   b7bf2:	f7fe b845 	b.w	b5c80 <network_disconnect>

000b7bf6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7bf6:	2300      	movs	r3, #0
   b7bf8:	6840      	ldr	r0, [r0, #4]
   b7bfa:	461a      	mov	r2, r3
   b7bfc:	f7fe b830 	b.w	b5c60 <network_connect>

000b7c00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7c00:	4b02      	ldr	r3, [pc, #8]	; (b7c0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7c02:	2204      	movs	r2, #4
   b7c04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7c06:	4a02      	ldr	r2, [pc, #8]	; (b7c10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7c08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7c0a:	4770      	bx	lr
   b7c0c:	2003e718 	.word	0x2003e718
   b7c10:	000b942c 	.word	0x000b942c

000b7c14 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7c14:	b510      	push	{r4, lr}
   b7c16:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7c18:	f000 fb70 	bl	b82fc <strlen>
   b7c1c:	3801      	subs	r0, #1
   b7c1e:	1823      	adds	r3, r4, r0
   b7c20:	4620      	mov	r0, r4
	while(i<j){
   b7c22:	4283      	cmp	r3, r0
   b7c24:	d906      	bls.n	b7c34 <_Z11str_reversePc+0x20>
		c = *i;
   b7c26:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7c28:	7819      	ldrb	r1, [r3, #0]
   b7c2a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7c2e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7c32:	e7f6      	b.n	b7c22 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7c34:	bd10      	pop	{r4, pc}

000b7c36 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7c36:	b570      	push	{r4, r5, r6, lr}
   b7c38:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7c3a:	1e91      	subs	r1, r2, #2
   b7c3c:	2922      	cmp	r1, #34	; 0x22
   b7c3e:	d81d      	bhi.n	b7c7c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7c40:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7c42:	b930      	cbnz	r0, b7c52 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7c44:	4423      	add	r3, r4
            *ptr++ = '0';
   b7c46:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7c48:	429d      	cmp	r5, r3
   b7c4a:	d210      	bcs.n	b7c6e <ultoa+0x38>
            *ptr++ = '0';
   b7c4c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7c50:	e7fa      	b.n	b7c48 <ultoa+0x12>
            result.quot = a/radix;
   b7c52:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7c56:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7c5a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7c5c:	2809      	cmp	r0, #9
                *ptr += '0';
   b7c5e:	bf94      	ite	ls
   b7c60:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7c62:	3157      	addhi	r1, #87	; 0x57
   b7c64:	b2c9      	uxtb	r1, r1
   b7c66:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7c6a:	4630      	mov	r0, r6
	while(a){
   b7c6c:	e7e9      	b.n	b7c42 <ultoa+0xc>

	*ptr = '\0';
   b7c6e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7c70:	4620      	mov	r0, r4
	*ptr = '\0';
   b7c72:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7c74:	f7ff ffce 	bl	b7c14 <_Z11str_reversePc>
	return buffer;
   b7c78:	4620      	mov	r0, r4
}
   b7c7a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7c7c:	2000      	movs	r0, #0
   b7c7e:	e7fc      	b.n	b7c7a <ultoa+0x44>

000b7c80 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b7c80:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b7c82:	2301      	movs	r3, #1
   b7c84:	f7ff ffd7 	bl	b7c36 <ultoa>
}
   b7c88:	bd08      	pop	{r3, pc}
	...

000b7c8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7c8c:	4b01      	ldr	r3, [pc, #4]	; (b7c94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7c8e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7c90:	4770      	bx	lr
   b7c92:	bf00      	nop
   b7c94:	2003e550 	.word	0x2003e550

000b7c98 <serialEventRun>:
{
   b7c98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7c9a:	4b0b      	ldr	r3, [pc, #44]	; (b7cc8 <serialEventRun+0x30>)
   b7c9c:	b143      	cbz	r3, b7cb0 <serialEventRun+0x18>
   b7c9e:	f7ff ff55 	bl	b7b4c <_Z16_fetch_usbserialv>
   b7ca2:	6803      	ldr	r3, [r0, #0]
   b7ca4:	691b      	ldr	r3, [r3, #16]
   b7ca6:	4798      	blx	r3
   b7ca8:	2800      	cmp	r0, #0
   b7caa:	dd01      	ble.n	b7cb0 <serialEventRun+0x18>
        serialEvent();
   b7cac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7cb0:	4b06      	ldr	r3, [pc, #24]	; (b7ccc <serialEventRun+0x34>)
   b7cb2:	b143      	cbz	r3, b7cc6 <serialEventRun+0x2e>
   b7cb4:	f000 f95c 	bl	b7f70 <_Z22__fetch_global_Serial1v>
   b7cb8:	6803      	ldr	r3, [r0, #0]
   b7cba:	691b      	ldr	r3, [r3, #16]
   b7cbc:	4798      	blx	r3
   b7cbe:	2800      	cmp	r0, #0
   b7cc0:	dd01      	ble.n	b7cc6 <serialEventRun+0x2e>
        serialEvent1();
   b7cc2:	f3af 8000 	nop.w
}
   b7cc6:	bd08      	pop	{r3, pc}
	...

000b7cd0 <_post_loop>:
{
   b7cd0:	b508      	push	{r3, lr}
	serialEventRun();
   b7cd2:	f7ff ffe1 	bl	b7c98 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7cd6:	f7fd fe07 	bl	b58e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7cda:	4b01      	ldr	r3, [pc, #4]	; (b7ce0 <_post_loop+0x10>)
   b7cdc:	6018      	str	r0, [r3, #0]
}
   b7cde:	bd08      	pop	{r3, pc}
   b7ce0:	2003e728 	.word	0x2003e728

000b7ce4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7ce4:	4805      	ldr	r0, [pc, #20]	; (b7cfc <_Z33system_initialize_user_backup_ramv+0x18>)
   b7ce6:	4a06      	ldr	r2, [pc, #24]	; (b7d00 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7ce8:	4906      	ldr	r1, [pc, #24]	; (b7d04 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7cea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cec:	1a12      	subs	r2, r2, r0
   b7cee:	f000 fa95 	bl	b821c <memcpy>
    __backup_sram_signature = signature;
   b7cf2:	4b05      	ldr	r3, [pc, #20]	; (b7d08 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7cf4:	4a05      	ldr	r2, [pc, #20]	; (b7d0c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7cf6:	601a      	str	r2, [r3, #0]
}
   b7cf8:	bd08      	pop	{r3, pc}
   b7cfa:	bf00      	nop
   b7cfc:	2003f400 	.word	0x2003f400
   b7d00:	2003f404 	.word	0x2003f404
   b7d04:	000b9714 	.word	0x000b9714
   b7d08:	2003f400 	.word	0x2003f400
   b7d0c:	9a271c1e 	.word	0x9a271c1e

000b7d10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7d10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d12:	2300      	movs	r3, #0
   b7d14:	9300      	str	r3, [sp, #0]
   b7d16:	461a      	mov	r2, r3
   b7d18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d1c:	f7fd ff8e 	bl	b5c3c <system_ctrl_set_result>
}
   b7d20:	b003      	add	sp, #12
   b7d22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7d28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7d2a:	8843      	ldrh	r3, [r0, #2]
   b7d2c:	2b0a      	cmp	r3, #10
   b7d2e:	d008      	beq.n	b7d42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7d30:	2b50      	cmp	r3, #80	; 0x50
   b7d32:	d10b      	bne.n	b7d4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7d34:	4b09      	ldr	r3, [pc, #36]	; (b7d5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7d36:	681b      	ldr	r3, [r3, #0]
   b7d38:	b14b      	cbz	r3, b7d4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7d3a:	b003      	add	sp, #12
   b7d3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7d40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7d42:	f7ff ffe5 	bl	b7d10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7d46:	b003      	add	sp, #12
   b7d48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d4c:	2300      	movs	r3, #0
   b7d4e:	9300      	str	r3, [sp, #0]
   b7d50:	461a      	mov	r2, r3
   b7d52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d56:	f7fd ff71 	bl	b5c3c <system_ctrl_set_result>
}
   b7d5a:	e7f4      	b.n	b7d46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7d5c:	2003e724 	.word	0x2003e724

000b7d60 <module_user_init_hook>:
{
   b7d60:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7d62:	4812      	ldr	r0, [pc, #72]	; (b7dac <module_user_init_hook+0x4c>)
   b7d64:	2100      	movs	r1, #0
   b7d66:	f7fe f813 	bl	b5d90 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7d6a:	4b11      	ldr	r3, [pc, #68]	; (b7db0 <module_user_init_hook+0x50>)
   b7d6c:	681a      	ldr	r2, [r3, #0]
   b7d6e:	4b11      	ldr	r3, [pc, #68]	; (b7db4 <module_user_init_hook+0x54>)
   b7d70:	429a      	cmp	r2, r3
   b7d72:	4b11      	ldr	r3, [pc, #68]	; (b7db8 <module_user_init_hook+0x58>)
   b7d74:	bf0c      	ite	eq
   b7d76:	2201      	moveq	r2, #1
   b7d78:	2200      	movne	r2, #0
   b7d7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7d7c:	d001      	beq.n	b7d82 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7d7e:	f7ff ffb1 	bl	b7ce4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7d82:	f7fd fda1 	bl	b58c8 <HAL_RNG_GetRandomNumber>
   b7d86:	4604      	mov	r4, r0
    srand(seed);
   b7d88:	f000 fa78 	bl	b827c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7d8c:	4b0b      	ldr	r3, [pc, #44]	; (b7dbc <module_user_init_hook+0x5c>)
   b7d8e:	b113      	cbz	r3, b7d96 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7d90:	4620      	mov	r0, r4
   b7d92:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7d96:	2100      	movs	r1, #0
   b7d98:	4808      	ldr	r0, [pc, #32]	; (b7dbc <module_user_init_hook+0x5c>)
   b7d9a:	f7fd ff59 	bl	b5c50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7da2:	4807      	ldr	r0, [pc, #28]	; (b7dc0 <module_user_init_hook+0x60>)
   b7da4:	2100      	movs	r1, #0
   b7da6:	f7fd bf3f 	b.w	b5c28 <system_ctrl_set_app_request_handler>
   b7daa:	bf00      	nop
   b7dac:	000b7c8d 	.word	0x000b7c8d
   b7db0:	2003f400 	.word	0x2003f400
   b7db4:	9a271c1e 	.word	0x9a271c1e
   b7db8:	2003e720 	.word	0x2003e720
   b7dbc:	00000000 	.word	0x00000000
   b7dc0:	000b7d29 	.word	0x000b7d29

000b7dc4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7dc4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7dc6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7dc8:	d902      	bls.n	b7dd0 <pinAvailable+0xc>
    return false;
   b7dca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7dcc:	b002      	add	sp, #8
   b7dce:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7dd0:	f1a0 030b 	sub.w	r3, r0, #11
   b7dd4:	2b02      	cmp	r3, #2
   b7dd6:	d81a      	bhi.n	b7e0e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7dd8:	4c17      	ldr	r4, [pc, #92]	; (b7e38 <pinAvailable+0x74>)
   b7dda:	7821      	ldrb	r1, [r4, #0]
   b7ddc:	f3bf 8f5b 	dmb	ish
   b7de0:	f011 0101 	ands.w	r1, r1, #1
   b7de4:	d10b      	bne.n	b7dfe <pinAvailable+0x3a>
   b7de6:	4620      	mov	r0, r4
   b7de8:	9101      	str	r1, [sp, #4]
   b7dea:	f7fc f965 	bl	b40b8 <__cxa_guard_acquire>
   b7dee:	9901      	ldr	r1, [sp, #4]
   b7df0:	b128      	cbz	r0, b7dfe <pinAvailable+0x3a>
   b7df2:	4812      	ldr	r0, [pc, #72]	; (b7e3c <pinAvailable+0x78>)
   b7df4:	f7ff fc6c 	bl	b76d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7df8:	4620      	mov	r0, r4
   b7dfa:	f7fc f962 	bl	b40c2 <__cxa_guard_release>
   b7dfe:	4b0f      	ldr	r3, [pc, #60]	; (b7e3c <pinAvailable+0x78>)
   b7e00:	7818      	ldrb	r0, [r3, #0]
   b7e02:	f7fd fe21 	bl	b5a48 <hal_spi_is_enabled>
   b7e06:	2800      	cmp	r0, #0
   b7e08:	d1df      	bne.n	b7dca <pinAvailable+0x6>
  return true; // 'pin' is available
   b7e0a:	2001      	movs	r0, #1
   b7e0c:	e7de      	b.n	b7dcc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7e0e:	2801      	cmp	r0, #1
   b7e10:	d809      	bhi.n	b7e26 <pinAvailable+0x62>
   b7e12:	f000 f86d 	bl	b7ef0 <_Z19__fetch_global_Wirev>
   b7e16:	2100      	movs	r1, #0
   b7e18:	7c00      	ldrb	r0, [r0, #16]
   b7e1a:	f7fd fdd5 	bl	b59c8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7e1e:	f080 0001 	eor.w	r0, r0, #1
   b7e22:	b2c0      	uxtb	r0, r0
   b7e24:	e7d2      	b.n	b7dcc <pinAvailable+0x8>
   b7e26:	3809      	subs	r0, #9
   b7e28:	2801      	cmp	r0, #1
   b7e2a:	d8ee      	bhi.n	b7e0a <pinAvailable+0x46>
   b7e2c:	f000 f8a0 	bl	b7f70 <_Z22__fetch_global_Serial1v>
   b7e30:	7c00      	ldrb	r0, [r0, #16]
   b7e32:	f7fd fe59 	bl	b5ae8 <hal_usart_is_enabled>
   b7e36:	e7f2      	b.n	b7e1e <pinAvailable+0x5a>
   b7e38:	2003e6ac 	.word	0x2003e6ac
   b7e3c:	2003e6b0 	.word	0x2003e6b0

000b7e40 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e40:	2823      	cmp	r0, #35	; 0x23
{
   b7e42:	b538      	push	{r3, r4, r5, lr}
   b7e44:	4604      	mov	r4, r0
   b7e46:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e48:	d80a      	bhi.n	b7e60 <pinMode+0x20>
   b7e4a:	29ff      	cmp	r1, #255	; 0xff
   b7e4c:	d008      	beq.n	b7e60 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7e4e:	f7ff ffb9 	bl	b7dc4 <pinAvailable>
   b7e52:	b128      	cbz	r0, b7e60 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7e54:	4629      	mov	r1, r5
   b7e56:	4620      	mov	r0, r4
}
   b7e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7e5c:	f7fd bd4c 	b.w	b58f8 <HAL_Pin_Mode>
}
   b7e60:	bd38      	pop	{r3, r4, r5, pc}

000b7e62 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7e62:	b538      	push	{r3, r4, r5, lr}
   b7e64:	4604      	mov	r4, r0
   b7e66:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7e68:	f7fd fd4e 	bl	b5908 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7e6c:	28ff      	cmp	r0, #255	; 0xff
   b7e6e:	d010      	beq.n	b7e92 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7e70:	2806      	cmp	r0, #6
   b7e72:	d804      	bhi.n	b7e7e <digitalWrite+0x1c>
   b7e74:	234d      	movs	r3, #77	; 0x4d
   b7e76:	fa23 f000 	lsr.w	r0, r3, r0
   b7e7a:	07c3      	lsls	r3, r0, #31
   b7e7c:	d409      	bmi.n	b7e92 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7e7e:	4620      	mov	r0, r4
   b7e80:	f7ff ffa0 	bl	b7dc4 <pinAvailable>
   b7e84:	b128      	cbz	r0, b7e92 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7e86:	4629      	mov	r1, r5
   b7e88:	4620      	mov	r0, r4
}
   b7e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7e8e:	f7fd bd43 	b.w	b5918 <HAL_GPIO_Write>
}
   b7e92:	bd38      	pop	{r3, r4, r5, pc}

000b7e94 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7e94:	b510      	push	{r4, lr}
   b7e96:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7e98:	f7fd fd36 	bl	b5908 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7e9c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7e9e:	b2db      	uxtb	r3, r3
   b7ea0:	2b01      	cmp	r3, #1
   b7ea2:	d908      	bls.n	b7eb6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7ea4:	4620      	mov	r0, r4
   b7ea6:	f7ff ff8d 	bl	b7dc4 <pinAvailable>
   b7eaa:	b120      	cbz	r0, b7eb6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7eac:	4620      	mov	r0, r4
}
   b7eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7eb2:	f7fd bd39 	b.w	b5928 <HAL_GPIO_Read>
}
   b7eb6:	2000      	movs	r0, #0
   b7eb8:	bd10      	pop	{r4, pc}

000b7eba <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7eba:	4770      	bx	lr

000b7ebc <_Z17acquireWireBufferv>:
{
   b7ebc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7ebe:	4b0a      	ldr	r3, [pc, #40]	; (b7ee8 <_Z17acquireWireBufferv+0x2c>)
   b7ec0:	6003      	str	r3, [r0, #0]
   b7ec2:	2301      	movs	r3, #1
{
   b7ec4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7ec6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7ec8:	4908      	ldr	r1, [pc, #32]	; (b7eec <_Z17acquireWireBufferv+0x30>)
   b7eca:	2020      	movs	r0, #32
   b7ecc:	f000 f874 	bl	b7fb8 <_ZnajRKSt9nothrow_t>
	};
   b7ed0:	2520      	movs	r5, #32
   b7ed2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7ed4:	4905      	ldr	r1, [pc, #20]	; (b7eec <_Z17acquireWireBufferv+0x30>)
	};
   b7ed6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7ed8:	4628      	mov	r0, r5
   b7eda:	f000 f86d 	bl	b7fb8 <_ZnajRKSt9nothrow_t>
	};
   b7ede:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7ee2:	4620      	mov	r0, r4
   b7ee4:	bd38      	pop	{r3, r4, r5, pc}
   b7ee6:	bf00      	nop
   b7ee8:	00010018 	.word	0x00010018
   b7eec:	000b9460 	.word	0x000b9460

000b7ef0 <_Z19__fetch_global_Wirev>:
{
   b7ef0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ef2:	4d0e      	ldr	r5, [pc, #56]	; (b7f2c <_Z19__fetch_global_Wirev+0x3c>)
   b7ef4:	7829      	ldrb	r1, [r5, #0]
   b7ef6:	f3bf 8f5b 	dmb	ish
   b7efa:	f011 0401 	ands.w	r4, r1, #1
{
   b7efe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7f00:	d111      	bne.n	b7f26 <_Z19__fetch_global_Wirev+0x36>
   b7f02:	4628      	mov	r0, r5
   b7f04:	f7fc f8d8 	bl	b40b8 <__cxa_guard_acquire>
   b7f08:	b168      	cbz	r0, b7f26 <_Z19__fetch_global_Wirev+0x36>
   b7f0a:	4668      	mov	r0, sp
   b7f0c:	f7ff ffd6 	bl	b7ebc <_Z17acquireWireBufferv>
   b7f10:	466a      	mov	r2, sp
   b7f12:	4621      	mov	r1, r4
   b7f14:	4806      	ldr	r0, [pc, #24]	; (b7f30 <_Z19__fetch_global_Wirev+0x40>)
   b7f16:	f7ff f9af 	bl	b7278 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7f1a:	4628      	mov	r0, r5
   b7f1c:	f7fc f8d1 	bl	b40c2 <__cxa_guard_release>
   b7f20:	4804      	ldr	r0, [pc, #16]	; (b7f34 <_Z19__fetch_global_Wirev+0x44>)
   b7f22:	f000 f961 	bl	b81e8 <atexit>
	return wire;
}
   b7f26:	4802      	ldr	r0, [pc, #8]	; (b7f30 <_Z19__fetch_global_Wirev+0x40>)
   b7f28:	b007      	add	sp, #28
   b7f2a:	bd30      	pop	{r4, r5, pc}
   b7f2c:	2003e72c 	.word	0x2003e72c
   b7f30:	2003e730 	.word	0x2003e730
   b7f34:	000b7ebb 	.word	0x000b7ebb

000b7f38 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f38:	4770      	bx	lr
	...

000b7f3c <_Z20acquireSerial1Bufferv>:
{
   b7f3c:	b538      	push	{r3, r4, r5, lr}
   b7f3e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7f40:	2514      	movs	r5, #20
   b7f42:	462a      	mov	r2, r5
   b7f44:	2100      	movs	r1, #0
   b7f46:	f000 f991 	bl	b826c <memset>
   b7f4a:	8025      	strh	r5, [r4, #0]
   b7f4c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f4e:	4907      	ldr	r1, [pc, #28]	; (b7f6c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7f50:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f52:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7f54:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f56:	f000 f82f 	bl	b7fb8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f5a:	4904      	ldr	r1, [pc, #16]	; (b7f6c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7f5c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f5e:	4628      	mov	r0, r5
   b7f60:	f000 f82a 	bl	b7fb8 <_ZnajRKSt9nothrow_t>
    };
   b7f64:	60e0      	str	r0, [r4, #12]
}
   b7f66:	4620      	mov	r0, r4
   b7f68:	bd38      	pop	{r3, r4, r5, pc}
   b7f6a:	bf00      	nop
   b7f6c:	000b9460 	.word	0x000b9460

000b7f70 <_Z22__fetch_global_Serial1v>:
{
   b7f70:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f72:	4d0e      	ldr	r5, [pc, #56]	; (b7fac <_Z22__fetch_global_Serial1v+0x3c>)
   b7f74:	7829      	ldrb	r1, [r5, #0]
   b7f76:	f3bf 8f5b 	dmb	ish
   b7f7a:	f011 0401 	ands.w	r4, r1, #1
{
   b7f7e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f80:	d111      	bne.n	b7fa6 <_Z22__fetch_global_Serial1v+0x36>
   b7f82:	4628      	mov	r0, r5
   b7f84:	f7fc f898 	bl	b40b8 <__cxa_guard_acquire>
   b7f88:	b168      	cbz	r0, b7fa6 <_Z22__fetch_global_Serial1v+0x36>
   b7f8a:	a801      	add	r0, sp, #4
   b7f8c:	f7ff ffd6 	bl	b7f3c <_Z20acquireSerial1Bufferv>
   b7f90:	aa01      	add	r2, sp, #4
   b7f92:	4621      	mov	r1, r4
   b7f94:	4806      	ldr	r0, [pc, #24]	; (b7fb0 <_Z22__fetch_global_Serial1v+0x40>)
   b7f96:	f7ff fd67 	bl	b7a68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7f9a:	4628      	mov	r0, r5
   b7f9c:	f7fc f891 	bl	b40c2 <__cxa_guard_release>
   b7fa0:	4804      	ldr	r0, [pc, #16]	; (b7fb4 <_Z22__fetch_global_Serial1v+0x44>)
   b7fa2:	f000 f921 	bl	b81e8 <atexit>
    return serial1;
}
   b7fa6:	4802      	ldr	r0, [pc, #8]	; (b7fb0 <_Z22__fetch_global_Serial1v+0x40>)
   b7fa8:	b007      	add	sp, #28
   b7faa:	bd30      	pop	{r4, r5, pc}
   b7fac:	2003e744 	.word	0x2003e744
   b7fb0:	2003e748 	.word	0x2003e748
   b7fb4:	000b7f39 	.word	0x000b7f39

000b7fb8 <_ZnajRKSt9nothrow_t>:
   b7fb8:	f7fc b86d 	b.w	b4096 <_Znaj>

000b7fbc <_ZSt25__throw_bad_function_callv>:
   b7fbc:	b508      	push	{r3, lr}
   b7fbe:	f7fd fecf 	bl	b5d60 <abort>
	...

000b7fc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7fc4:	4901      	ldr	r1, [pc, #4]	; (b7fcc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7fc6:	f000 b8f9 	b.w	b81bc <_ZNKSt9type_infoeqERKS_>
   b7fca:	bf00      	nop
   b7fcc:	000b947c 	.word	0x000b947c

000b7fd0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7fd2:	2400      	movs	r4, #0
   b7fd4:	2310      	movs	r3, #16
   b7fd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7fda:	6803      	ldr	r3, [r0, #0]
   b7fdc:	4615      	mov	r5, r2
   b7fde:	699e      	ldr	r6, [r3, #24]
   b7fe0:	6812      	ldr	r2, [r2, #0]
   b7fe2:	466b      	mov	r3, sp
   b7fe4:	e9cd 4400 	strd	r4, r4, [sp]
   b7fe8:	47b0      	blx	r6
   b7fea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7fee:	f003 0306 	and.w	r3, r3, #6
   b7ff2:	2b06      	cmp	r3, #6
   b7ff4:	bf03      	ittte	eq
   b7ff6:	9b00      	ldreq	r3, [sp, #0]
   b7ff8:	602b      	streq	r3, [r5, #0]
   b7ffa:	2001      	moveq	r0, #1
   b7ffc:	4620      	movne	r0, r4
   b7ffe:	b004      	add	sp, #16
   b8000:	bd70      	pop	{r4, r5, r6, pc}

000b8002 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8002:	9800      	ldr	r0, [sp, #0]
   b8004:	4290      	cmp	r0, r2
   b8006:	bf14      	ite	ne
   b8008:	2001      	movne	r0, #1
   b800a:	2006      	moveq	r0, #6
   b800c:	4770      	bx	lr
	...

000b8010 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8010:	b510      	push	{r4, lr}
   b8012:	4b03      	ldr	r3, [pc, #12]	; (b8020 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8014:	6003      	str	r3, [r0, #0]
   b8016:	4604      	mov	r4, r0
   b8018:	f000 f8cd 	bl	b81b6 <_ZNSt9type_infoD1Ev>
   b801c:	4620      	mov	r0, r4
   b801e:	bd10      	pop	{r4, pc}
   b8020:	000b94bc 	.word	0x000b94bc

000b8024 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8024:	b510      	push	{r4, lr}
   b8026:	4604      	mov	r4, r0
   b8028:	f7ff fff2 	bl	b8010 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b802c:	4620      	mov	r0, r4
   b802e:	2108      	movs	r1, #8
   b8030:	f7fc f833 	bl	b409a <_ZdlPvj>
   b8034:	4620      	mov	r0, r4
   b8036:	bd10      	pop	{r4, pc}

000b8038 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b803c:	461f      	mov	r7, r3
   b803e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8042:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8046:	4598      	cmp	r8, r3
   b8048:	4606      	mov	r6, r0
   b804a:	4615      	mov	r5, r2
   b804c:	d107      	bne.n	b805e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b804e:	9907      	ldr	r1, [sp, #28]
   b8050:	f000 f8b4 	bl	b81bc <_ZNKSt9type_infoeqERKS_>
   b8054:	b118      	cbz	r0, b805e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8056:	7165      	strb	r5, [r4, #5]
   b8058:	2000      	movs	r0, #0
   b805a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b805e:	4639      	mov	r1, r7
   b8060:	4630      	mov	r0, r6
   b8062:	f000 f8ab 	bl	b81bc <_ZNKSt9type_infoeqERKS_>
   b8066:	2800      	cmp	r0, #0
   b8068:	d0f6      	beq.n	b8058 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b806a:	2301      	movs	r3, #1
   b806c:	f8c4 8000 	str.w	r8, [r4]
   b8070:	7125      	strb	r5, [r4, #4]
   b8072:	71a3      	strb	r3, [r4, #6]
   b8074:	e7f0      	b.n	b8058 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8076 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8076:	b538      	push	{r3, r4, r5, lr}
   b8078:	4615      	mov	r5, r2
   b807a:	461c      	mov	r4, r3
   b807c:	f000 f89e 	bl	b81bc <_ZNKSt9type_infoeqERKS_>
   b8080:	b120      	cbz	r0, b808c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8082:	2308      	movs	r3, #8
   b8084:	60e3      	str	r3, [r4, #12]
   b8086:	2306      	movs	r3, #6
   b8088:	6025      	str	r5, [r4, #0]
   b808a:	7123      	strb	r3, [r4, #4]
   b808c:	bd38      	pop	{r3, r4, r5, pc}

000b808e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b808e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8090:	4605      	mov	r5, r0
   b8092:	460c      	mov	r4, r1
   b8094:	9201      	str	r2, [sp, #4]
   b8096:	461e      	mov	r6, r3
   b8098:	f000 f890 	bl	b81bc <_ZNKSt9type_infoeqERKS_>
   b809c:	b950      	cbnz	r0, b80b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b809e:	2e03      	cmp	r6, #3
   b80a0:	d808      	bhi.n	b80b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b80a2:	6823      	ldr	r3, [r4, #0]
   b80a4:	9a01      	ldr	r2, [sp, #4]
   b80a6:	695b      	ldr	r3, [r3, #20]
   b80a8:	4629      	mov	r1, r5
   b80aa:	4620      	mov	r0, r4
   b80ac:	b002      	add	sp, #8
   b80ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b80b2:	4718      	bx	r3
   b80b4:	b002      	add	sp, #8
   b80b6:	bd70      	pop	{r4, r5, r6, pc}

000b80b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b80b8:	b510      	push	{r4, lr}
   b80ba:	4b03      	ldr	r3, [pc, #12]	; (b80c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b80bc:	6003      	str	r3, [r0, #0]
   b80be:	4604      	mov	r4, r0
   b80c0:	f7ff ffa6 	bl	b8010 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b80c4:	4620      	mov	r0, r4
   b80c6:	bd10      	pop	{r4, pc}
   b80c8:	000b951c 	.word	0x000b951c

000b80cc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b80cc:	b510      	push	{r4, lr}
   b80ce:	4604      	mov	r4, r0
   b80d0:	f7ff fff2 	bl	b80b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b80d4:	4620      	mov	r0, r4
   b80d6:	210c      	movs	r1, #12
   b80d8:	f7fb ffdf 	bl	b409a <_ZdlPvj>
   b80dc:	4620      	mov	r0, r4
   b80de:	bd10      	pop	{r4, pc}

000b80e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b80e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b80e2:	9f08      	ldr	r7, [sp, #32]
   b80e4:	4297      	cmp	r7, r2
   b80e6:	4605      	mov	r5, r0
   b80e8:	460e      	mov	r6, r1
   b80ea:	4614      	mov	r4, r2
   b80ec:	d00a      	beq.n	b8104 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b80ee:	68a8      	ldr	r0, [r5, #8]
   b80f0:	6802      	ldr	r2, [r0, #0]
   b80f2:	9708      	str	r7, [sp, #32]
   b80f4:	6a15      	ldr	r5, [r2, #32]
   b80f6:	4631      	mov	r1, r6
   b80f8:	4622      	mov	r2, r4
   b80fa:	46ac      	mov	ip, r5
   b80fc:	b003      	add	sp, #12
   b80fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8102:	4760      	bx	ip
   b8104:	4619      	mov	r1, r3
   b8106:	9301      	str	r3, [sp, #4]
   b8108:	f000 f858 	bl	b81bc <_ZNKSt9type_infoeqERKS_>
   b810c:	9b01      	ldr	r3, [sp, #4]
   b810e:	2800      	cmp	r0, #0
   b8110:	d0ed      	beq.n	b80ee <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8112:	2006      	movs	r0, #6
   b8114:	b003      	add	sp, #12
   b8116:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8118 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8118:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b811c:	460d      	mov	r5, r1
   b811e:	4619      	mov	r1, r3
   b8120:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8124:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8128:	4681      	mov	r9, r0
   b812a:	4617      	mov	r7, r2
   b812c:	4698      	mov	r8, r3
   b812e:	f000 f845 	bl	b81bc <_ZNKSt9type_infoeqERKS_>
   b8132:	b190      	cbz	r0, b815a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8134:	2d00      	cmp	r5, #0
   b8136:	6034      	str	r4, [r6, #0]
   b8138:	7137      	strb	r7, [r6, #4]
   b813a:	db09      	blt.n	b8150 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b813c:	1961      	adds	r1, r4, r5
   b813e:	458a      	cmp	sl, r1
   b8140:	bf0c      	ite	eq
   b8142:	2106      	moveq	r1, #6
   b8144:	2101      	movne	r1, #1
   b8146:	71b1      	strb	r1, [r6, #6]
   b8148:	2000      	movs	r0, #0
   b814a:	b001      	add	sp, #4
   b814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8150:	3502      	adds	r5, #2
   b8152:	d1f9      	bne.n	b8148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8154:	2301      	movs	r3, #1
   b8156:	71b3      	strb	r3, [r6, #6]
   b8158:	e7f6      	b.n	b8148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b815a:	4554      	cmp	r4, sl
   b815c:	d106      	bne.n	b816c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b815e:	4659      	mov	r1, fp
   b8160:	4648      	mov	r0, r9
   b8162:	f000 f82b 	bl	b81bc <_ZNKSt9type_infoeqERKS_>
   b8166:	b108      	cbz	r0, b816c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8168:	7177      	strb	r7, [r6, #5]
   b816a:	e7ed      	b.n	b8148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b816c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8170:	6803      	ldr	r3, [r0, #0]
   b8172:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8176:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b817a:	69dc      	ldr	r4, [r3, #28]
   b817c:	463a      	mov	r2, r7
   b817e:	4643      	mov	r3, r8
   b8180:	4629      	mov	r1, r5
   b8182:	46a4      	mov	ip, r4
   b8184:	b001      	add	sp, #4
   b8186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b818a:	4760      	bx	ip

000b818c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8190:	4607      	mov	r7, r0
   b8192:	460c      	mov	r4, r1
   b8194:	4615      	mov	r5, r2
   b8196:	461e      	mov	r6, r3
   b8198:	f7ff ff6d 	bl	b8076 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b819c:	b948      	cbnz	r0, b81b2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b819e:	68b8      	ldr	r0, [r7, #8]
   b81a0:	6803      	ldr	r3, [r0, #0]
   b81a2:	699f      	ldr	r7, [r3, #24]
   b81a4:	462a      	mov	r2, r5
   b81a6:	4633      	mov	r3, r6
   b81a8:	4621      	mov	r1, r4
   b81aa:	46bc      	mov	ip, r7
   b81ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b81b0:	4760      	bx	ip
   b81b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b81b6 <_ZNSt9type_infoD1Ev>:
   b81b6:	4770      	bx	lr

000b81b8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b81b8:	2000      	movs	r0, #0
   b81ba:	4770      	bx	lr

000b81bc <_ZNKSt9type_infoeqERKS_>:
   b81bc:	4281      	cmp	r1, r0
   b81be:	b508      	push	{r3, lr}
   b81c0:	d00e      	beq.n	b81e0 <_ZNKSt9type_infoeqERKS_+0x24>
   b81c2:	6840      	ldr	r0, [r0, #4]
   b81c4:	7803      	ldrb	r3, [r0, #0]
   b81c6:	2b2a      	cmp	r3, #42	; 0x2a
   b81c8:	d00c      	beq.n	b81e4 <_ZNKSt9type_infoeqERKS_+0x28>
   b81ca:	6849      	ldr	r1, [r1, #4]
   b81cc:	780b      	ldrb	r3, [r1, #0]
   b81ce:	2b2a      	cmp	r3, #42	; 0x2a
   b81d0:	bf08      	it	eq
   b81d2:	3101      	addeq	r1, #1
   b81d4:	f000 f880 	bl	b82d8 <strcmp>
   b81d8:	fab0 f080 	clz	r0, r0
   b81dc:	0940      	lsrs	r0, r0, #5
   b81de:	bd08      	pop	{r3, pc}
   b81e0:	2001      	movs	r0, #1
   b81e2:	e7fc      	b.n	b81de <_ZNKSt9type_infoeqERKS_+0x22>
   b81e4:	2000      	movs	r0, #0
   b81e6:	e7fa      	b.n	b81de <_ZNKSt9type_infoeqERKS_+0x22>

000b81e8 <atexit>:
   b81e8:	2300      	movs	r3, #0
   b81ea:	4601      	mov	r1, r0
   b81ec:	461a      	mov	r2, r3
   b81ee:	4618      	mov	r0, r3
   b81f0:	f000 b938 	b.w	b8464 <__register_exitproc>

000b81f4 <atol>:
   b81f4:	220a      	movs	r2, #10
   b81f6:	2100      	movs	r1, #0
   b81f8:	f000 b92a 	b.w	b8450 <strtol>

000b81fc <memcmp>:
   b81fc:	b510      	push	{r4, lr}
   b81fe:	3901      	subs	r1, #1
   b8200:	4402      	add	r2, r0
   b8202:	4290      	cmp	r0, r2
   b8204:	d101      	bne.n	b820a <memcmp+0xe>
   b8206:	2000      	movs	r0, #0
   b8208:	e005      	b.n	b8216 <memcmp+0x1a>
   b820a:	7803      	ldrb	r3, [r0, #0]
   b820c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8210:	42a3      	cmp	r3, r4
   b8212:	d001      	beq.n	b8218 <memcmp+0x1c>
   b8214:	1b18      	subs	r0, r3, r4
   b8216:	bd10      	pop	{r4, pc}
   b8218:	3001      	adds	r0, #1
   b821a:	e7f2      	b.n	b8202 <memcmp+0x6>

000b821c <memcpy>:
   b821c:	440a      	add	r2, r1
   b821e:	4291      	cmp	r1, r2
   b8220:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8224:	d100      	bne.n	b8228 <memcpy+0xc>
   b8226:	4770      	bx	lr
   b8228:	b510      	push	{r4, lr}
   b822a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b822e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8232:	4291      	cmp	r1, r2
   b8234:	d1f9      	bne.n	b822a <memcpy+0xe>
   b8236:	bd10      	pop	{r4, pc}

000b8238 <memmove>:
   b8238:	4288      	cmp	r0, r1
   b823a:	b510      	push	{r4, lr}
   b823c:	eb01 0402 	add.w	r4, r1, r2
   b8240:	d902      	bls.n	b8248 <memmove+0x10>
   b8242:	4284      	cmp	r4, r0
   b8244:	4623      	mov	r3, r4
   b8246:	d807      	bhi.n	b8258 <memmove+0x20>
   b8248:	1e43      	subs	r3, r0, #1
   b824a:	42a1      	cmp	r1, r4
   b824c:	d008      	beq.n	b8260 <memmove+0x28>
   b824e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8252:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8256:	e7f8      	b.n	b824a <memmove+0x12>
   b8258:	4402      	add	r2, r0
   b825a:	4601      	mov	r1, r0
   b825c:	428a      	cmp	r2, r1
   b825e:	d100      	bne.n	b8262 <memmove+0x2a>
   b8260:	bd10      	pop	{r4, pc}
   b8262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8266:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b826a:	e7f7      	b.n	b825c <memmove+0x24>

000b826c <memset>:
   b826c:	4402      	add	r2, r0
   b826e:	4603      	mov	r3, r0
   b8270:	4293      	cmp	r3, r2
   b8272:	d100      	bne.n	b8276 <memset+0xa>
   b8274:	4770      	bx	lr
   b8276:	f803 1b01 	strb.w	r1, [r3], #1
   b827a:	e7f9      	b.n	b8270 <memset+0x4>

000b827c <srand>:
   b827c:	b538      	push	{r3, r4, r5, lr}
   b827e:	4b10      	ldr	r3, [pc, #64]	; (b82c0 <srand+0x44>)
   b8280:	681d      	ldr	r5, [r3, #0]
   b8282:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8284:	4604      	mov	r4, r0
   b8286:	b9b3      	cbnz	r3, b82b6 <srand+0x3a>
   b8288:	2018      	movs	r0, #24
   b828a:	f7fd fd49 	bl	b5d20 <malloc>
   b828e:	4602      	mov	r2, r0
   b8290:	63a8      	str	r0, [r5, #56]	; 0x38
   b8292:	b920      	cbnz	r0, b829e <srand+0x22>
   b8294:	4b0b      	ldr	r3, [pc, #44]	; (b82c4 <srand+0x48>)
   b8296:	480c      	ldr	r0, [pc, #48]	; (b82c8 <srand+0x4c>)
   b8298:	2142      	movs	r1, #66	; 0x42
   b829a:	f7fd fd71 	bl	b5d80 <__assert_func>
   b829e:	490b      	ldr	r1, [pc, #44]	; (b82cc <srand+0x50>)
   b82a0:	4b0b      	ldr	r3, [pc, #44]	; (b82d0 <srand+0x54>)
   b82a2:	e9c0 1300 	strd	r1, r3, [r0]
   b82a6:	4b0b      	ldr	r3, [pc, #44]	; (b82d4 <srand+0x58>)
   b82a8:	6083      	str	r3, [r0, #8]
   b82aa:	230b      	movs	r3, #11
   b82ac:	8183      	strh	r3, [r0, #12]
   b82ae:	2100      	movs	r1, #0
   b82b0:	2001      	movs	r0, #1
   b82b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b82b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b82b8:	2200      	movs	r2, #0
   b82ba:	611c      	str	r4, [r3, #16]
   b82bc:	615a      	str	r2, [r3, #20]
   b82be:	bd38      	pop	{r3, r4, r5, pc}
   b82c0:	2003e550 	.word	0x2003e550
   b82c4:	000b9555 	.word	0x000b9555
   b82c8:	000b956c 	.word	0x000b956c
   b82cc:	abcd330e 	.word	0xabcd330e
   b82d0:	e66d1234 	.word	0xe66d1234
   b82d4:	0005deec 	.word	0x0005deec

000b82d8 <strcmp>:
   b82d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b82dc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b82e0:	2a01      	cmp	r2, #1
   b82e2:	bf28      	it	cs
   b82e4:	429a      	cmpcs	r2, r3
   b82e6:	d0f7      	beq.n	b82d8 <strcmp>
   b82e8:	1ad0      	subs	r0, r2, r3
   b82ea:	4770      	bx	lr

000b82ec <strcpy>:
   b82ec:	4603      	mov	r3, r0
   b82ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   b82f2:	f803 2b01 	strb.w	r2, [r3], #1
   b82f6:	2a00      	cmp	r2, #0
   b82f8:	d1f9      	bne.n	b82ee <strcpy+0x2>
   b82fa:	4770      	bx	lr

000b82fc <strlen>:
   b82fc:	4603      	mov	r3, r0
   b82fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8302:	2a00      	cmp	r2, #0
   b8304:	d1fb      	bne.n	b82fe <strlen+0x2>
   b8306:	1a18      	subs	r0, r3, r0
   b8308:	3801      	subs	r0, #1
   b830a:	4770      	bx	lr

000b830c <strncpy>:
   b830c:	b510      	push	{r4, lr}
   b830e:	3901      	subs	r1, #1
   b8310:	4603      	mov	r3, r0
   b8312:	b132      	cbz	r2, b8322 <strncpy+0x16>
   b8314:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8318:	f803 4b01 	strb.w	r4, [r3], #1
   b831c:	3a01      	subs	r2, #1
   b831e:	2c00      	cmp	r4, #0
   b8320:	d1f7      	bne.n	b8312 <strncpy+0x6>
   b8322:	441a      	add	r2, r3
   b8324:	2100      	movs	r1, #0
   b8326:	4293      	cmp	r3, r2
   b8328:	d100      	bne.n	b832c <strncpy+0x20>
   b832a:	bd10      	pop	{r4, pc}
   b832c:	f803 1b01 	strb.w	r1, [r3], #1
   b8330:	e7f9      	b.n	b8326 <strncpy+0x1a>

000b8332 <strnlen>:
   b8332:	b510      	push	{r4, lr}
   b8334:	4602      	mov	r2, r0
   b8336:	4401      	add	r1, r0
   b8338:	428a      	cmp	r2, r1
   b833a:	4613      	mov	r3, r2
   b833c:	d003      	beq.n	b8346 <strnlen+0x14>
   b833e:	781c      	ldrb	r4, [r3, #0]
   b8340:	3201      	adds	r2, #1
   b8342:	2c00      	cmp	r4, #0
   b8344:	d1f8      	bne.n	b8338 <strnlen+0x6>
   b8346:	1a18      	subs	r0, r3, r0
   b8348:	bd10      	pop	{r4, pc}
	...

000b834c <_strtol_l.constprop.0>:
   b834c:	2b01      	cmp	r3, #1
   b834e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8352:	d001      	beq.n	b8358 <_strtol_l.constprop.0+0xc>
   b8354:	2b24      	cmp	r3, #36	; 0x24
   b8356:	d906      	bls.n	b8366 <_strtol_l.constprop.0+0x1a>
   b8358:	f7fd fd0a 	bl	b5d70 <__errno>
   b835c:	2316      	movs	r3, #22
   b835e:	6003      	str	r3, [r0, #0]
   b8360:	2000      	movs	r0, #0
   b8362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8366:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b844c <_strtol_l.constprop.0+0x100>
   b836a:	460d      	mov	r5, r1
   b836c:	462e      	mov	r6, r5
   b836e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8372:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8376:	f017 0708 	ands.w	r7, r7, #8
   b837a:	d1f7      	bne.n	b836c <_strtol_l.constprop.0+0x20>
   b837c:	2c2d      	cmp	r4, #45	; 0x2d
   b837e:	d132      	bne.n	b83e6 <_strtol_l.constprop.0+0x9a>
   b8380:	782c      	ldrb	r4, [r5, #0]
   b8382:	2701      	movs	r7, #1
   b8384:	1cb5      	adds	r5, r6, #2
   b8386:	2b00      	cmp	r3, #0
   b8388:	d05b      	beq.n	b8442 <_strtol_l.constprop.0+0xf6>
   b838a:	2b10      	cmp	r3, #16
   b838c:	d109      	bne.n	b83a2 <_strtol_l.constprop.0+0x56>
   b838e:	2c30      	cmp	r4, #48	; 0x30
   b8390:	d107      	bne.n	b83a2 <_strtol_l.constprop.0+0x56>
   b8392:	782c      	ldrb	r4, [r5, #0]
   b8394:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8398:	2c58      	cmp	r4, #88	; 0x58
   b839a:	d14d      	bne.n	b8438 <_strtol_l.constprop.0+0xec>
   b839c:	786c      	ldrb	r4, [r5, #1]
   b839e:	2310      	movs	r3, #16
   b83a0:	3502      	adds	r5, #2
   b83a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b83a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b83aa:	f04f 0c00 	mov.w	ip, #0
   b83ae:	fbb8 f9f3 	udiv	r9, r8, r3
   b83b2:	4666      	mov	r6, ip
   b83b4:	fb03 8a19 	mls	sl, r3, r9, r8
   b83b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b83bc:	f1be 0f09 	cmp.w	lr, #9
   b83c0:	d816      	bhi.n	b83f0 <_strtol_l.constprop.0+0xa4>
   b83c2:	4674      	mov	r4, lr
   b83c4:	42a3      	cmp	r3, r4
   b83c6:	dd24      	ble.n	b8412 <_strtol_l.constprop.0+0xc6>
   b83c8:	f1bc 0f00 	cmp.w	ip, #0
   b83cc:	db1e      	blt.n	b840c <_strtol_l.constprop.0+0xc0>
   b83ce:	45b1      	cmp	r9, r6
   b83d0:	d31c      	bcc.n	b840c <_strtol_l.constprop.0+0xc0>
   b83d2:	d101      	bne.n	b83d8 <_strtol_l.constprop.0+0x8c>
   b83d4:	45a2      	cmp	sl, r4
   b83d6:	db19      	blt.n	b840c <_strtol_l.constprop.0+0xc0>
   b83d8:	fb06 4603 	mla	r6, r6, r3, r4
   b83dc:	f04f 0c01 	mov.w	ip, #1
   b83e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b83e4:	e7e8      	b.n	b83b8 <_strtol_l.constprop.0+0x6c>
   b83e6:	2c2b      	cmp	r4, #43	; 0x2b
   b83e8:	bf04      	itt	eq
   b83ea:	782c      	ldrbeq	r4, [r5, #0]
   b83ec:	1cb5      	addeq	r5, r6, #2
   b83ee:	e7ca      	b.n	b8386 <_strtol_l.constprop.0+0x3a>
   b83f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b83f4:	f1be 0f19 	cmp.w	lr, #25
   b83f8:	d801      	bhi.n	b83fe <_strtol_l.constprop.0+0xb2>
   b83fa:	3c37      	subs	r4, #55	; 0x37
   b83fc:	e7e2      	b.n	b83c4 <_strtol_l.constprop.0+0x78>
   b83fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8402:	f1be 0f19 	cmp.w	lr, #25
   b8406:	d804      	bhi.n	b8412 <_strtol_l.constprop.0+0xc6>
   b8408:	3c57      	subs	r4, #87	; 0x57
   b840a:	e7db      	b.n	b83c4 <_strtol_l.constprop.0+0x78>
   b840c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8410:	e7e6      	b.n	b83e0 <_strtol_l.constprop.0+0x94>
   b8412:	f1bc 0f00 	cmp.w	ip, #0
   b8416:	da05      	bge.n	b8424 <_strtol_l.constprop.0+0xd8>
   b8418:	2322      	movs	r3, #34	; 0x22
   b841a:	6003      	str	r3, [r0, #0]
   b841c:	4646      	mov	r6, r8
   b841e:	b942      	cbnz	r2, b8432 <_strtol_l.constprop.0+0xe6>
   b8420:	4630      	mov	r0, r6
   b8422:	e79e      	b.n	b8362 <_strtol_l.constprop.0+0x16>
   b8424:	b107      	cbz	r7, b8428 <_strtol_l.constprop.0+0xdc>
   b8426:	4276      	negs	r6, r6
   b8428:	2a00      	cmp	r2, #0
   b842a:	d0f9      	beq.n	b8420 <_strtol_l.constprop.0+0xd4>
   b842c:	f1bc 0f00 	cmp.w	ip, #0
   b8430:	d000      	beq.n	b8434 <_strtol_l.constprop.0+0xe8>
   b8432:	1e69      	subs	r1, r5, #1
   b8434:	6011      	str	r1, [r2, #0]
   b8436:	e7f3      	b.n	b8420 <_strtol_l.constprop.0+0xd4>
   b8438:	2430      	movs	r4, #48	; 0x30
   b843a:	2b00      	cmp	r3, #0
   b843c:	d1b1      	bne.n	b83a2 <_strtol_l.constprop.0+0x56>
   b843e:	2308      	movs	r3, #8
   b8440:	e7af      	b.n	b83a2 <_strtol_l.constprop.0+0x56>
   b8442:	2c30      	cmp	r4, #48	; 0x30
   b8444:	d0a5      	beq.n	b8392 <_strtol_l.constprop.0+0x46>
   b8446:	230a      	movs	r3, #10
   b8448:	e7ab      	b.n	b83a2 <_strtol_l.constprop.0+0x56>
   b844a:	bf00      	nop
   b844c:	000b95c6 	.word	0x000b95c6

000b8450 <strtol>:
   b8450:	4613      	mov	r3, r2
   b8452:	460a      	mov	r2, r1
   b8454:	4601      	mov	r1, r0
   b8456:	4802      	ldr	r0, [pc, #8]	; (b8460 <strtol+0x10>)
   b8458:	6800      	ldr	r0, [r0, #0]
   b845a:	f7ff bf77 	b.w	b834c <_strtol_l.constprop.0>
   b845e:	bf00      	nop
   b8460:	2003e550 	.word	0x2003e550

000b8464 <__register_exitproc>:
   b8464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8468:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8524 <__register_exitproc+0xc0>
   b846c:	4606      	mov	r6, r0
   b846e:	f8d8 0000 	ldr.w	r0, [r8]
   b8472:	461f      	mov	r7, r3
   b8474:	460d      	mov	r5, r1
   b8476:	4691      	mov	r9, r2
   b8478:	f000 f856 	bl	b8528 <__retarget_lock_acquire_recursive>
   b847c:	4b25      	ldr	r3, [pc, #148]	; (b8514 <__register_exitproc+0xb0>)
   b847e:	681c      	ldr	r4, [r3, #0]
   b8480:	b934      	cbnz	r4, b8490 <__register_exitproc+0x2c>
   b8482:	4c25      	ldr	r4, [pc, #148]	; (b8518 <__register_exitproc+0xb4>)
   b8484:	601c      	str	r4, [r3, #0]
   b8486:	4b25      	ldr	r3, [pc, #148]	; (b851c <__register_exitproc+0xb8>)
   b8488:	b113      	cbz	r3, b8490 <__register_exitproc+0x2c>
   b848a:	681b      	ldr	r3, [r3, #0]
   b848c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8490:	6863      	ldr	r3, [r4, #4]
   b8492:	2b1f      	cmp	r3, #31
   b8494:	dd07      	ble.n	b84a6 <__register_exitproc+0x42>
   b8496:	f8d8 0000 	ldr.w	r0, [r8]
   b849a:	f000 f847 	bl	b852c <__retarget_lock_release_recursive>
   b849e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b84a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b84a6:	b34e      	cbz	r6, b84fc <__register_exitproc+0x98>
   b84a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b84ac:	b988      	cbnz	r0, b84d2 <__register_exitproc+0x6e>
   b84ae:	4b1c      	ldr	r3, [pc, #112]	; (b8520 <__register_exitproc+0xbc>)
   b84b0:	b923      	cbnz	r3, b84bc <__register_exitproc+0x58>
   b84b2:	f8d8 0000 	ldr.w	r0, [r8]
   b84b6:	f000 f838 	bl	b852a <__retarget_lock_release>
   b84ba:	e7f0      	b.n	b849e <__register_exitproc+0x3a>
   b84bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b84c0:	f7fd fc2e 	bl	b5d20 <malloc>
   b84c4:	2800      	cmp	r0, #0
   b84c6:	d0f4      	beq.n	b84b2 <__register_exitproc+0x4e>
   b84c8:	2300      	movs	r3, #0
   b84ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b84ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b84d2:	6863      	ldr	r3, [r4, #4]
   b84d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b84d8:	2201      	movs	r2, #1
   b84da:	409a      	lsls	r2, r3
   b84dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b84e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b84e4:	4313      	orrs	r3, r2
   b84e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b84ea:	2e02      	cmp	r6, #2
   b84ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b84f0:	bf02      	ittt	eq
   b84f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b84f6:	4313      	orreq	r3, r2
   b84f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b84fc:	6863      	ldr	r3, [r4, #4]
   b84fe:	f8d8 0000 	ldr.w	r0, [r8]
   b8502:	1c5a      	adds	r2, r3, #1
   b8504:	3302      	adds	r3, #2
   b8506:	6062      	str	r2, [r4, #4]
   b8508:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b850c:	f000 f80e 	bl	b852c <__retarget_lock_release_recursive>
   b8510:	2000      	movs	r0, #0
   b8512:	e7c6      	b.n	b84a2 <__register_exitproc+0x3e>
   b8514:	2003e7e8 	.word	0x2003e7e8
   b8518:	2003e75c 	.word	0x2003e75c
   b851c:	00000000 	.word	0x00000000
   b8520:	000b5d21 	.word	0x000b5d21
   b8524:	2003e5b4 	.word	0x2003e5b4

000b8528 <__retarget_lock_acquire_recursive>:
   b8528:	4770      	bx	lr

000b852a <__retarget_lock_release>:
   b852a:	4770      	bx	lr

000b852c <__retarget_lock_release_recursive>:
   b852c:	4770      	bx	lr

000b852e <link_code_end>:
	...

000b8530 <dynalib_user>:
   b8530:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8540:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8550:	7620 7269 7574 6c61 4800 7965 0a21 4400      virtual.Hey!..D
   b8560:	7369 6f63 6e6e 6365 6574 0064 2131 5300     isconnected.1!.S
   b8570:	6f68 6275 6968 2174 3600 3445 3030 3030     houbhit!.6E40000
   b8580:	2d31 3542 3341 462d 3933 2d33 3045 3941     1-B5A3-F393-E0A9
   b8590:	452d 3035 3245 4434 4343 3941 0045 4536     -E50E24DCCA9E.6E
   b85a0:	3034 3030 3230 422d 4135 2d33 3346 3339     400002-B5A3-F393
   b85b0:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   b85c0:	4539 7200 0078 4536 3034 3030 3330 422d     9E.rx.6E400003-B
   b85d0:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   b85e0:	4530 3432 4344 4143 4539 7400 0078          0E24DCCA9E.tx.

000b85ee <_ZL4font>:
   b85ee:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b85fe:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b860e:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b861e:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b862e:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b863e:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b864e:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b865e:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b866e:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b867e:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b868e:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b869e:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b86ae:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b86be:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b86ce:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b86de:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b86ee:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b86fe:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b870e:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b871e:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b872e:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b873e:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b874e:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b875e:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b876e:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b877e:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b878e:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b879e:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b87ae:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b87be:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b87ce:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b87de:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b87ee:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b87fe:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b880e:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b881e:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b882e:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b883e:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b884e:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b885e:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b886e:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b887e:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b888e:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b889e:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b88ae:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b88be:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b88ce:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b88de:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b88ee:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b88fe:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b890e:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b891e:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b892e:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b893e:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b894e:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b895e:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b896e:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b897e:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b898e:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b899e:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b89ae:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b89be:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b89ce:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b89de:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b89ee:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b89fe:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8a0e:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8a1e:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8a2e:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8a3e:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8a4e:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8a5e:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8a6e:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8a7e:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8a8e:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8a9e:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8aae:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8abe:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8ace:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8ade:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b8af0 <_ZTV12Adafruit_GFX>:
	...
   b8b00:	4b25 000b 7549 000b 40a1 000b 452b 000b     %K..Iu...@..+E..
   b8b10:	452d 000b 455f 000b 453b 000b 454d 000b     -E.._E..;E..ME..
   b8b20:	446d 000b 452b 000b 4757 000b 4755 000b     mD..+E..WG..UG..
   b8b30:	4577 000b 45b5 000b 45ef 000b 4635 000b     wE...E...E..5F..
   b8b40:	4651 000b 46d5 000b 6564 6166 6c75 2074     QF...F..default 
   b8b50:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b8b60:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b8b70:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b8b80:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b8b8c <_ZTVN8particle11SPISettingsE>:
	...
   b8b94:	4c61 000b 4c33 000b 4c35 000b               aL..3L..5L..

000b8ba0 <_ZL12splash1_data>:
   b8ba0:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b8bb0:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b8bc0:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b8bd0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b8be0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b8bf0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b8c08:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b8c18:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b8c28:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b8c38:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b8c48:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b8c58:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b8c68:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b8c78:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b8c88:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b8c98:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b8ca8:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b8cb8:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b8cc8:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b8cd8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b8ce8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b8cf8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b8d08:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b8d18:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b8d30:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b8d48:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b8d58:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b8d68:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b8d78:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b8d88:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b8d98:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b8da8:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b8db8:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b8dc8:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b8dd8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b8de8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b8df8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b8e08:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b8e18:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b8e28:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b8e38:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b8e48:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b8e58:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b8e60 <_ZL12splash2_data>:
   b8e60:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b8e70:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b8e80:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b8e9c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b8eac:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b8ebc:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b8ecc:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b8edc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b8eec:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b8efc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b8f0c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b8f1c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b8f2c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b8f3c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b8f4c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b8f5c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b8f6c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b8f7c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b8f8c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b8f9c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b8fac:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b8fbc:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b8fcc:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b8fdc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b8ff4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9004:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9014:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9024:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9034:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b9040 <_ZTV16Adafruit_SSD1306>:
	...
   b9048:	4cb5 000b 4ccd 000b 4b25 000b 7549 000b     .L...L..%K..Iu..
   b9058:	4ce1 000b 452b 000b 452d 000b 455f 000b     .L..+E..-E.._E..
   b9068:	453b 000b 454d 000b 446d 000b 452b 000b     ;E..ME..mD..+E..
   b9078:	4757 000b 4e7f 000b 5427 000b 53d9 000b     WG...N..'T...S..
   b9088:	45ef 000b 4635 000b 4651 000b 46d5 000b     .E..5F..QF...F..

000b9098 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9098:	8000 e0c0 f8f0 fefc                         ........

000b90a0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b90a0:	0100 0703 1f0f 7f3f                         ......?.

000b90a8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b90a8:	d5ae a880                                   ....

000b90ac <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b90ac:	00d3 8d40                                   ..@.

000b90b0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b90b0:	0020 c8a1                                    ...

000b90b4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b90b4:	40db a6a4 af2e                              .@....

000b90ba <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b90ba:	02da 8f81                                   ....

000b90be <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b90be:	12da                                         ...

000b90c1 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b90c1:	02da                                         ...

000b90c4 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b90c4:	0022 21ff 0000 0000                         "..!....

000b90cc <_ZTV16OledWingAdafruit>:
	...
   b90d4:	564d 000b 566d 000b 4b25 000b 7549 000b     MV..mV..%K..Iu..
   b90e4:	4ce1 000b 452b 000b 452d 000b 455f 000b     .L..+E..-E.._E..
   b90f4:	453b 000b 454d 000b 446d 000b 452b 000b     ;E..ME..mD..+E..
   b9104:	4757 000b 4e7f 000b 5427 000b 53d9 000b     WG...N..'T...S..
   b9114:	45ef 000b 4635 000b 4651 000b 46d5 000b     .E..5F..QF...F..
   b9124:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   b9134:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   b9144:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   b9154:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   b9164:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   b9174:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   b9184:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   b9194:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   b91a4:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   b91b4:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   b91c4:	206f 7061 6570 646e 7020 6565 2072 6543     o append peer Ce
   b91d4:	746e 6172 206c 6564 6976 6563 002e 6f43     ntral device..Co
   b91e4:	6e6e 6365 6574 2064 7962 4320 6e65 7274     nnected by Centr
   b91f4:	6c61 6420 7665 6369 2e65 4400 7075 696c     al device..Dupli
   b9204:	6163 6574 2064 6863 7261 6361 6574 6972     cated characteri
   b9214:	7473 6369 6320 6e61 6f6e 2074 6562 6120     stic cannot be a
   b9224:	6464 6465 002e 6146 6c69 6465 7420 206f     dded..Failed to 
   b9234:	7061 6570 646e 6c20 636f 6c61 6320 6168     append local cha
   b9244:	6172 7463 7265 7369 6974 2e63 0000 0000     racteristic.....

000b9254 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b925c:	5dad 000b 5e11 000b 5ef7 000b 5e3b 000b     .]...^...^..;^..
   b926c:	5db1 000b                                   .]..

000b9270 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9278:	5da9 000b 5e1f 000b 5dab 000b 5e41 000b     .]...^...]..A^..
   b9288:	5dd1 000b                                   .]..

000b928c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9294:	5da7 000b 5e2d 000b 66b5 000b 5e47 000b     .]..-^...f..G^..
   b92a4:	5df1 000b                                   .]..

000b92a8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b92b4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b92c6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b92c6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b92d6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b92d6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b92e8 <_ZTVN5spark13EthernetClassE>:
	...
   b92f0:	7203 000b 71f9 000b 71ef 000b 71e5 000b     .r...q...q...q..
   b9300:	71d9 000b 71cd 000b 7425 000b 742d 000b     .q...q..%t..-t..
   b9310:	71c1 000b 71b9 000b 71af 000b 71a5 000b     .q...q...q...q..
   b9320:	745d 000b                                   ]t..

000b9324 <_ZTV7TwoWire>:
	...
   b932c:	7221 000b 726b 000b 7243 000b 7223 000b     !r..kr..Cr..#r..
   b933c:	724b 000b 7253 000b 725b 000b 7263 000b     Kr..Sr..[r..cr..

000b934c <_ZTV9IPAddress>:
	...
   b9354:	72f5 000b 72e5 000b 72e7 000b 7061 0070     .r...r...r..app.

000b9364 <_ZTVN5spark12NetworkClassE>:
	...
   b936c:	73e5 000b 73ef 000b 73f9 000b 7403 000b     .s...s...s...t..
   b937c:	740d 000b 7419 000b 7425 000b 742d 000b     .t...t..%t..-t..
   b938c:	7435 000b 7441 000b 7449 000b 7453 000b     5t..At..It..St..
   b939c:	745d 000b                                   ]t..

000b93a0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b93a0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b93b0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b93c0:	6d69 0065                                   ime.

000b93c4 <_ZTV11USARTSerial>:
	...
   b93cc:	79ed 000b 7a59 000b 7a31 000b 7549 000b     .y..Yz..1z..Iu..
   b93dc:	7a01 000b 7a1d 000b 7a0f 000b 7a2b 000b     .z...z...z..+z..
   b93ec:	79ef 000b 79f3 000b                         .y...y..

000b93f4 <_ZTV9USBSerial>:
	...
   b93fc:	7a97 000b 7aff 000b 7ad5 000b 7549 000b     .z...z...z..Iu..
   b940c:	7ac7 000b 7a99 000b 7aa9 000b 7af9 000b     .z...z...z...z..
   b941c:	7ab9 000b 7a91 000b                         .z...z..

000b9424 <_ZTVN5spark9WiFiClassE>:
	...
   b942c:	7bf7 000b 7bed 000b 7be3 000b 7b99 000b     .{...{...{...{..
   b943c:	7bd7 000b 7bcb 000b 7425 000b 742d 000b     .{...{..%t..-t..
   b944c:	7bbf 000b 7bb7 000b 7bad 000b 7ba3 000b     .{...{...{...{..
   b945c:	745d 000b                                   ]t..

000b9460 <_ZSt7nothrow>:
	...

000b9461 <_ZTSSt19_Sp_make_shared_tag>:
   b9461:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9471:	6572 5f64 6174 0067 0000                     red_tag....

000b947c <_ZTISt19_Sp_make_shared_tag>:
   b947c:	94bc 000b 9461 000b                         ....a...

000b9484 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9484:	951c 000b 9490 000b 9540 000b               ........@...

000b9490 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9490:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b94a0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b94b0:	0045 0000                                   E...

000b94b4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b94b4:	0000 0000 9484 000b 8011 000b 8025 000b     ............%...
   b94c4:	81b9 000b 81b9 000b 808f 000b 7fd1 000b     ................
   b94d4:	8077 000b 8039 000b 8003 000b               w...9.......

000b94e0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b94e0:	951c 000b 94ec 000b 9484 000b               ............

000b94ec <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b94ec:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b94fc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b950c:	666e 456f 0000 0000                         nfoE....

000b9514 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9514:	0000 0000 94e0 000b 80b9 000b 80cd 000b     ................
   b9524:	81b9 000b 81b9 000b 808f 000b 7fd1 000b     ................
   b9534:	818d 000b 8119 000b 80e1 000b               ............

000b9540 <_ZTISt9type_info>:
   b9540:	94bc 000b 9548 000b                         ....H...

000b9548 <_ZTSSt9type_info>:
   b9548:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9558:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9568:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b9578:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b9588:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b9598:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b95a8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b95b8:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b95c5 <_ctype_>:
   b95c5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b95d5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b95e5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b95f5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9605:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9615:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9625:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9635:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9645:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b96c6 <link_const_variable_data_end>:
	...

000b96c8 <link_constructors_location>:
   b96c8:	000b4321 	.word	0x000b4321
   b96cc:	000b7195 	.word	0x000b7195
   b96d0:	000b720d 	.word	0x000b720d
   b96d4:	000b73d5 	.word	0x000b73d5
   b96d8:	000b7535 	.word	0x000b7535
   b96dc:	000b76b9 	.word	0x000b76b9
   b96e0:	000b79b5 	.word	0x000b79b5
   b96e4:	000b79d9 	.word	0x000b79d9
   b96e8:	000b7c01 	.word	0x000b7c01

000b96ec <link_constructors_end>:
   b96ec:	00000000 	.word	0x00000000
