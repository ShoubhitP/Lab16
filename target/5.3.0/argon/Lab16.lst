
/Users/shoubhitsstuff/Desktop/Lab16/target/5.3.0/argon/Lab16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005710  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b972c  000b972c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e548  000b9750  0000e548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000023c  2003e5b4  2003e5b4  0001e5b4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b97bc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b97c0  000b97c0  000197c0  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b97c6  000b97c6  000197c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b97ea  000b97ea  000197ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0013d47d  00000000  00000000  000197ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000151ce  00000000  00000000  00156c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00044c26  00000000  00000000  0016be39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000033c0  00000000  00000000  001b0a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b3d0  00000000  00000000  001b3e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f77f  00000000  00000000  001bf1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004cb6f  00000000  00000000  001fe96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013d991  00000000  00000000  0024b4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009914  00000000  00000000  00388e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f004 f91f 	bl	b8294 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f004 f941 	bl	b82e4 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e548 	.word	0x2003e548
   b406c:	000b9750 	.word	0x000b9750
   b4070:	2003e5b4 	.word	0x2003e5b4
   b4074:	2003e5b4 	.word	0x2003e5b4
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f003 fea9 	bl	b7dd8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b9708 	.word	0x000b9708
   b40a0:	000b972c 	.word	0x000b972c

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b8e0 	b.w	b4268 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f831 	bl	b4110 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f003 be49 	b.w	b7d48 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f001 be45 	b.w	b5d44 <malloc>

000b40ba <_Znaj>:
   b40ba:	f001 be43 	b.w	b5d44 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f001 be49 	b.w	b5d54 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f001 fd96 	bl	b5bfc <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b58fd 	.word	0x000b58fd
   b40d8:	000b85b0 	.word	0x000b85b0

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_Z14refreshDisplayv>:
        }
    }
}

void refreshDisplay()
{
   b40ec:	b510      	push	{r4, lr}
    display.clearDisplay();
   b40ee:	4c07      	ldr	r4, [pc, #28]	; (b410c <_Z14refreshDisplayv+0x20>)
   b40f0:	4620      	mov	r0, r4
   b40f2:	f000 ff63 	bl	b4fbc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   b40f6:	2101      	movs	r1, #1
   b40f8:	4620      	mov	r0, r4
   b40fa:	f000 fda6 	bl	b4c4a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b40fe:	2200      	movs	r2, #0
   b4100:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4104:	e9c4 2304 	strd	r2, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
   b4108:	bd10      	pop	{r4, pc}
   b410a:	bf00      	nop
   b410c:	2003e61c 	.word	0x2003e61c

000b4110 <loop>:
{
   b4110:	b530      	push	{r4, r5, lr}
    display.loop();
   b4112:	482f      	ldr	r0, [pc, #188]	; (b41d0 <loop+0xc0>)
{
   b4114:	b08b      	sub	sp, #44	; 0x2c
    display.loop();
   b4116:	f001 fb1c 	bl	b5752 <_ZN16OledWingAdafruit4loopEv>
    if (!BLE.connected())
   b411a:	f002 f9bf 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b411e:	f002 fa25 	bl	b656c <_ZNK8particle14BleLocalDevice9connectedEv>
   b4122:	4602      	mov	r2, r0
   b4124:	bb30      	cbnz	r0, b4174 <loop+0x64>
        RGB.color(255, 255, 0);
   b4126:	21ff      	movs	r1, #255	; 0xff
   b4128:	4608      	mov	r0, r1
   b412a:	f003 faed 	bl	b7708 <_ZN8RGBClass5colorEiii>
    if (disconnectControl)
   b412e:	4d29      	ldr	r5, [pc, #164]	; (b41d4 <loop+0xc4>)
    delay(5000);
   b4130:	f241 3088 	movw	r0, #5000	; 0x1388
   b4134:	f001 fe46 	bl	b5dc4 <delay>
    if (disconnectControl)
   b4138:	782b      	ldrb	r3, [r5, #0]
   b413a:	b1cb      	cbz	r3, b4170 <loop+0x60>
        BLE.disconnect();
   b413c:	f002 f9ae 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4140:	f002 fda2 	bl	b6c88 <_ZNK8particle14BleLocalDevice10disconnectEv>
        disconnectControl = false;
   b4144:	2400      	movs	r4, #0
        RGB.color(255, 255, 0);
   b4146:	21ff      	movs	r1, #255	; 0xff
   b4148:	4622      	mov	r2, r4
   b414a:	4608      	mov	r0, r1
        disconnectControl = false;
   b414c:	702c      	strb	r4, [r5, #0]
        RGB.color(255, 255, 0);
   b414e:	f003 fadb 	bl	b7708 <_ZN8RGBClass5colorEiii>
        refreshDisplay();
   b4152:	f7ff ffcb 	bl	b40ec <_Z14refreshDisplayv>
        display.println("Disconnected");
   b4156:	4920      	ldr	r1, [pc, #128]	; (b41d8 <loop+0xc8>)
   b4158:	481d      	ldr	r0, [pc, #116]	; (b41d0 <loop+0xc0>)
   b415a:	f003 fa6c 	bl	b7636 <_ZN5Print7printlnEPKc>
        display.display();
   b415e:	481c      	ldr	r0, [pc, #112]	; (b41d0 <loop+0xc0>)
   b4160:	f001 f99a 	bl	b5498 <_ZN16Adafruit_SSD13067displayEv>
        delay(5000);
   b4164:	f241 3088 	movw	r0, #5000	; 0x1388
   b4168:	f001 fe2c 	bl	b5dc4 <delay>
        refreshControl = false;
   b416c:	4b1b      	ldr	r3, [pc, #108]	; (b41dc <loop+0xcc>)
   b416e:	701c      	strb	r4, [r3, #0]
}
   b4170:	b00b      	add	sp, #44	; 0x2c
   b4172:	bd30      	pop	{r4, r5, pc}
    else if(BLE.connected())
   b4174:	f002 f992 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4178:	f002 f9f8 	bl	b656c <_ZNK8particle14BleLocalDevice9connectedEv>
   b417c:	2800      	cmp	r0, #0
   b417e:	d0d6      	beq.n	b412e <loop+0x1e>
        if (refreshControl == false)
   b4180:	4c16      	ldr	r4, [pc, #88]	; (b41dc <loop+0xcc>)
   b4182:	7823      	ldrb	r3, [r4, #0]
   b4184:	b943      	cbnz	r3, b4198 <loop+0x88>
            refreshDisplay();
   b4186:	f7ff ffb1 	bl	b40ec <_Z14refreshDisplayv>
            display.display();
   b418a:	4811      	ldr	r0, [pc, #68]	; (b41d0 <loop+0xc0>)
   b418c:	f001 f984 	bl	b5498 <_ZN16Adafruit_SSD13067displayEv>
            refreshControl = !refreshControl;
   b4190:	7823      	ldrb	r3, [r4, #0]
   b4192:	f083 0301 	eor.w	r3, r3, #1
   b4196:	7023      	strb	r3, [r4, #0]
        RGB.color(0, 0, 255);
   b4198:	2100      	movs	r1, #0
   b419a:	22ff      	movs	r2, #255	; 0xff
   b419c:	4608      	mov	r0, r1
   b419e:	f003 fab3 	bl	b7708 <_ZN8RGBClass5colorEiii>
        String message = "Yo!\n";
   b41a2:	490f      	ldr	r1, [pc, #60]	; (b41e0 <loop+0xd0>)
   b41a4:	a801      	add	r0, sp, #4
   b41a6:	f003 fbc6 	bl	b7936 <_ZN6StringC1EPK19__FlashStringHelper>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b41aa:	9a03      	ldr	r2, [sp, #12]
   b41ac:	a905      	add	r1, sp, #20
   b41ae:	a801      	add	r0, sp, #4
   b41b0:	2300      	movs	r3, #0
   b41b2:	3201      	adds	r2, #1
   b41b4:	f003 fc1c 	bl	b79f0 <_ZNK6String8getBytesEPhjj>
        txCharacteristic.setValue(txBuf, message.length() + 1);
   b41b8:	9a03      	ldr	r2, [sp, #12]
   b41ba:	480a      	ldr	r0, [pc, #40]	; (b41e4 <loop+0xd4>)
   b41bc:	2300      	movs	r3, #0
   b41be:	3201      	adds	r2, #1
   b41c0:	a905      	add	r1, sp, #20
   b41c2:	f002 f849 	bl	b6258 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        String message = "Yo!\n";
   b41c6:	a801      	add	r0, sp, #4
   b41c8:	f003 fb6a 	bl	b78a0 <_ZN6StringD1Ev>
   b41cc:	e7af      	b.n	b412e <loop+0x1e>
   b41ce:	bf00      	nop
   b41d0:	2003e61c 	.word	0x2003e61c
   b41d4:	2003e618 	.word	0x2003e618
   b41d8:	000b85ca 	.word	0x000b85ca
   b41dc:	2003e68c 	.word	0x2003e68c
   b41e0:	000b85c5 	.word	0x000b85c5
   b41e4:	2003e6a4 	.word	0x2003e6a4

000b41e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
{
   b41e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        charToStr = String(data[i]);
   b41ec:	4f1a      	ldr	r7, [pc, #104]	; (b4258 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
            disconnectControl = true;
   b41ee:	f8df 8070 	ldr.w	r8, [pc, #112]	; b4260 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>
            display.println("1!");
   b41f2:	f8df 9070 	ldr.w	r9, [pc, #112]	; b4264 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>
{
   b41f6:	b085      	sub	sp, #20
   b41f8:	4604      	mov	r4, r0
   b41fa:	1846      	adds	r6, r0, r1
    for (size_t i = 0; i < len; i++)
   b41fc:	42b4      	cmp	r4, r6
   b41fe:	d028      	beq.n	b4252 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
        charToStr = String(data[i]);
   b4200:	220a      	movs	r2, #10
   b4202:	7821      	ldrb	r1, [r4, #0]
   b4204:	4668      	mov	r0, sp
   b4206:	f003 fbe1 	bl	b79cc <_ZN6StringC1Ehh>
   b420a:	4669      	mov	r1, sp
   b420c:	4638      	mov	r0, r7
   b420e:	f003 fbc3 	bl	b7998 <_ZN6StringaSEOS_>
   b4212:	4668      	mov	r0, sp
   b4214:	f003 fb44 	bl	b78a0 <_ZN6StringD1Ev>
        int strToInt = charToStr.toInt();
   b4218:	4638      	mov	r0, r7
   b421a:	f003 fc01 	bl	b7a20 <_ZNK6String5toIntEv>
   b421e:	4605      	mov	r5, r0
        Serial.write(data[i]);
   b4220:	f003 fcd0 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b4224:	6803      	ldr	r3, [r0, #0]
   b4226:	f814 1b01 	ldrb.w	r1, [r4], #1
   b422a:	689b      	ldr	r3, [r3, #8]
   b422c:	4798      	blx	r3
        if (strToInt == 49) //Entering a 1
   b422e:	2d31      	cmp	r5, #49	; 0x31
   b4230:	d109      	bne.n	b4246 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
            refreshDisplay();
   b4232:	f7ff ff5b 	bl	b40ec <_Z14refreshDisplayv>
            display.println("1!");
   b4236:	4649      	mov	r1, r9
   b4238:	4808      	ldr	r0, [pc, #32]	; (b425c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   b423a:	f003 f9fc 	bl	b7636 <_ZN5Print7printlnEPKc>
            display.display();
   b423e:	4807      	ldr	r0, [pc, #28]	; (b425c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   b4240:	f001 f92a 	bl	b5498 <_ZN16Adafruit_SSD13067displayEv>
        if (strToInt == 48) //Entering a 0
   b4244:	e7da      	b.n	b41fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
   b4246:	2d30      	cmp	r5, #48	; 0x30
   b4248:	d1d8      	bne.n	b41fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
            disconnectControl = true;
   b424a:	2301      	movs	r3, #1
   b424c:	f888 3000 	strb.w	r3, [r8]
    for (size_t i = 0; i < len; i++)
   b4250:	e7d4      	b.n	b41fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
}
   b4252:	b005      	add	sp, #20
   b4254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4258:	2003e5fc 	.word	0x2003e5fc
   b425c:	2003e61c 	.word	0x2003e61c
   b4260:	2003e618 	.word	0x2003e618
   b4264:	000b85d7 	.word	0x000b85d7

000b4268 <setup>:
{
   b4268:	b570      	push	{r4, r5, r6, lr}
    display.setup();
   b426a:	482f      	ldr	r0, [pc, #188]	; (b4328 <setup+0xc0>)
   b426c:	4c2f      	ldr	r4, [pc, #188]	; (b432c <setup+0xc4>)
{
   b426e:	b08e      	sub	sp, #56	; 0x38
    display.setup();
   b4270:	f001 fa46 	bl	b5700 <_ZN16OledWingAdafruit5setupEv>
    BLE.on();
   b4274:	f002 f912 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4278:	f002 f95a 	bl	b6530 <_ZNK8particle14BleLocalDevice2onEv>
    RGB.control(true);
   b427c:	2001      	movs	r0, #1
   b427e:	f003 fa33 	bl	b76e8 <_ZN8RGBClass7controlEb>
    Serial.begin(9600);
   b4282:	f003 fc9f 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b4286:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b428a:	f003 fc8f 	bl	b7bac <_ZN9USBSerial5beginEl>
    refreshDisplay();
   b428e:	f7ff ff2d 	bl	b40ec <_Z14refreshDisplayv>
    BLE.addCharacteristic(txCharacteristic);
   b4292:	f002 f903 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4296:	4a26      	ldr	r2, [pc, #152]	; (b4330 <setup+0xc8>)
   b4298:	4601      	mov	r1, r0
   b429a:	a809      	add	r0, sp, #36	; 0x24
   b429c:	f002 feae 	bl	b6ffc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b42a0:	a809      	add	r0, sp, #36	; 0x24
   b42a2:	f002 fa00 	bl	b66a6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b42a6:	f002 f8f9 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42aa:	4a22      	ldr	r2, [pc, #136]	; (b4334 <setup+0xcc>)
   b42ac:	4601      	mov	r1, r0
   b42ae:	a809      	add	r0, sp, #36	; 0x24
   b42b0:	f002 fea4 	bl	b6ffc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b42b4:	a809      	add	r0, sp, #36	; 0x24
   b42b6:	f002 f9f6 	bl	b66a6 <_ZN8particle17BleCharacteristicD1Ev>
    txCharacteristic.setValue(txBuf, 10); // here we are sending all 10 bytes
   b42ba:	491f      	ldr	r1, [pc, #124]	; (b4338 <setup+0xd0>)
   b42bc:	481c      	ldr	r0, [pc, #112]	; (b4330 <setup+0xc8>)
   b42be:	2300      	movs	r3, #0
   b42c0:	220a      	movs	r2, #10
   b42c2:	f001 ffc9 	bl	b6258 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    datas.appendServiceUUID(serviceUuid);
   b42c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b42c8:	ad04      	add	r5, sp, #16
   b42ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b42cc:	ad04      	add	r5, sp, #16
   b42ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b42d0:	6826      	ldr	r6, [r4, #0]
   b42d2:	ac09      	add	r4, sp, #36	; 0x24
   b42d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42d6:	a809      	add	r0, sp, #36	; 0x24
        BleUuid tempUUID(uuid);
   b42d8:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42da:	f001 fee1 	bl	b60a0 <_ZNK8particle7BleUuid4typeEv>
   b42de:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b42e0:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42e2:	b9cc      	cbnz	r4, b4318 <setup+0xb0>
            uint16_t uuid16 = tempUUID.shorted();
   b42e4:	f001 fef8 	bl	b60d8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42e8:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b42ea:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42ee:	2302      	movs	r3, #2
   b42f0:	f10d 020e 	add.w	r2, sp, #14
   b42f4:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b42f6:	4811      	ldr	r0, [pc, #68]	; (b433c <setup+0xd4>)
   b42f8:	f002 fb00 	bl	b68fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&datas);
   b42fc:	f002 f8ce 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4300:	490e      	ldr	r1, [pc, #56]	; (b433c <setup+0xd4>)
   b4302:	2200      	movs	r2, #0
   b4304:	f002 f973 	bl	b65ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    BLE.setDeviceName("Shoubhit!");
   b4308:	f002 f8c8 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b430c:	490c      	ldr	r1, [pc, #48]	; (b4340 <setup+0xd8>)
}
   b430e:	b00e      	add	sp, #56	; 0x38
   b4310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BLE.setDeviceName("Shoubhit!");
   b4314:	f002 b913 	b.w	b653e <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>
   b4318:	f001 fee0 	bl	b60dc <_ZNK8particle7BleUuid8rawBytesEv>
   b431c:	2300      	movs	r3, #0
   b431e:	9300      	str	r3, [sp, #0]
   b4320:	4602      	mov	r2, r0
   b4322:	2310      	movs	r3, #16
   b4324:	2107      	movs	r1, #7
   b4326:	e7e6      	b.n	b42f6 <setup+0x8e>
   b4328:	2003e61c 	.word	0x2003e61c
   b432c:	2003e5c0 	.word	0x2003e5c0
   b4330:	2003e6a4 	.word	0x2003e6a4
   b4334:	2003e690 	.word	0x2003e690
   b4338:	2003e698 	.word	0x2003e698
   b433c:	2003e60c 	.word	0x2003e60c
   b4340:	000b85da 	.word	0x000b85da

000b4344 <_GLOBAL__sub_I_SystemMode>:
   b4344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4348:	4b40      	ldr	r3, [pc, #256]	; (b444c <_GLOBAL__sub_I_SystemMode+0x108>)
    SleepResult() {}
   b434a:	4a41      	ldr	r2, [pc, #260]	; (b4450 <_GLOBAL__sub_I_SystemMode+0x10c>)
   b434c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b434e:	2400      	movs	r4, #0
   b4350:	b099      	sub	sp, #100	; 0x64
   b4352:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4356:	2003      	movs	r0, #3
   b4358:	f001 fc60 	bl	b5c1c <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b435c:	4621      	mov	r1, r4
   b435e:	2001      	movs	r0, #1
   b4360:	f001 fc6c 	bl	b5c3c <system_thread_set_state>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4364:	4d3b      	ldr	r5, [pc, #236]	; (b4454 <_GLOBAL__sub_I_SystemMode+0x110>)
BleAdvertisingData datas;
   b4366:	483c      	ldr	r0, [pc, #240]	; (b4458 <_GLOBAL__sub_I_SystemMode+0x114>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4368:	4e3c      	ldr	r6, [pc, #240]	; (b445c <_GLOBAL__sub_I_SystemMode+0x118>)
BleAdvertisingData datas;
   b436a:	f002 fad2 	bl	b6912 <_ZN8particle18BleAdvertisingDataC1Ev>
OledWingAdafruit display;
   b436e:	2107      	movs	r1, #7
   b4370:	483b      	ldr	r0, [pc, #236]	; (b4460 <_GLOBAL__sub_I_SystemMode+0x11c>)
   b4372:	f001 f997 	bl	b56a4 <_ZN16OledWingAdafruitC1Ei>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4376:	493b      	ldr	r1, [pc, #236]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x120>)
   b4378:	4628      	mov	r0, r5
   b437a:	f001 ff2f 	bl	b61dc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b437e:	493a      	ldr	r1, [pc, #232]	; (b4468 <_GLOBAL__sub_I_SystemMode+0x124>)
   b4380:	4630      	mov	r0, r6
   b4382:	f001 ff2b 	bl	b61dc <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4386:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4388:	af04      	add	r7, sp, #16
   b438a:	46a8      	mov	r8, r5
   b438c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b438e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b4392:	f8d6 9000 	ldr.w	r9, [r6]
   b4396:	f8c7 9000 	str.w	r9, [r7]
   b439a:	ae09      	add	r6, sp, #36	; 0x24
   b439c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b439e:	af04      	add	r7, sp, #16
   b43a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b43a2:	f8d8 e000 	ldr.w	lr, [r8]
   b43a6:	f8c6 e000 	str.w	lr, [r6]
   b43aa:	ae0e      	add	r6, sp, #56	; 0x38
   b43ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b43ae:	f8df c0d8 	ldr.w	ip, [pc, #216]	; b4488 <_GLOBAL__sub_I_SystemMode+0x144>
   b43b2:	f8c6 9000 	str.w	r9, [r6]
        BleUuid sUuid(svcUuid);
   b43b6:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b43b8:	e9cc 4400 	strd	r4, r4, [ip]
   b43bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b43be:	ae13      	add	r6, sp, #76	; 0x4c
   b43c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b43c2:	4f2a      	ldr	r7, [pc, #168]	; (b446c <_GLOBAL__sub_I_SystemMode+0x128>)
   b43c4:	f8c6 e000 	str.w	lr, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b43c8:	4b29      	ldr	r3, [pc, #164]	; (b4470 <_GLOBAL__sub_I_SystemMode+0x12c>)
   b43ca:	9301      	str	r3, [sp, #4]
   b43cc:	ae13      	add	r6, sp, #76	; 0x4c
   b43ce:	ab0e      	add	r3, sp, #56	; 0x38
   b43d0:	4660      	mov	r0, ip
   b43d2:	f04f 0204 	mov.w	r2, #4
   b43d6:	4927      	ldr	r1, [pc, #156]	; (b4474 <_GLOBAL__sub_I_SystemMode+0x130>)
   b43d8:	9402      	str	r4, [sp, #8]
   b43da:	9600      	str	r6, [sp, #0]
   b43dc:	f002 fce4 	bl	b6da8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b43e0:	4925      	ldr	r1, [pc, #148]	; (b4478 <_GLOBAL__sub_I_SystemMode+0x134>)
   b43e2:	4638      	mov	r0, r7
   b43e4:	f001 fefa 	bl	b61dc <_ZN8particle7BleUuidC1EPKc>
   b43e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b43ea:	f10d 0c10 	add.w	ip, sp, #16
   b43ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b43f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b43f4:	f8d7 e000 	ldr.w	lr, [r7]
   b43f8:	f8d8 8000 	ldr.w	r8, [r8]
   b43fc:	f8cc e000 	str.w	lr, [ip]
   b4400:	af09      	add	r7, sp, #36	; 0x24
   b4402:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4404:	f8c7 8000 	str.w	r8, [r7]
        BleUuid cUuid(charUuid);
   b4408:	af04      	add	r7, sp, #16
   b440a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b440c:	ad0e      	add	r5, sp, #56	; 0x38
   b440e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b4410:	f8df c078 	ldr.w	ip, [pc, #120]	; b448c <_GLOBAL__sub_I_SystemMode+0x148>
   b4414:	f8c5 e000 	str.w	lr, [r5]
        BleUuid sUuid(svcUuid);
   b4418:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b441a:	e9cc 4400 	strd	r4, r4, [ip]
   b441e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4420:	4635      	mov	r5, r6
   b4422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4424:	4660      	mov	r0, ip
        BleUuid sUuid(svcUuid);
   b4426:	f8c5 8000 	str.w	r8, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b442a:	4914      	ldr	r1, [pc, #80]	; (b447c <_GLOBAL__sub_I_SystemMode+0x138>)
   b442c:	9600      	str	r6, [sp, #0]
   b442e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4432:	ab0e      	add	r3, sp, #56	; 0x38
   b4434:	f04f 0210 	mov.w	r2, #16
   b4438:	f002 fcb6 	bl	b6da8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
String charToStr;
   b443c:	4910      	ldr	r1, [pc, #64]	; (b4480 <_GLOBAL__sub_I_SystemMode+0x13c>)
   b443e:	4811      	ldr	r0, [pc, #68]	; (b4484 <_GLOBAL__sub_I_SystemMode+0x140>)
   b4440:	b019      	add	sp, #100	; 0x64
   b4442:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
String charToStr;
   b4446:	f003 ba76 	b.w	b7936 <_ZN6StringC1EPK19__FlashStringHelper>
   b444a:	bf00      	nop
   b444c:	2003e5b4 	.word	0x2003e5b4
   b4450:	ffff0000 	.word	0xffff0000
   b4454:	2003e5c0 	.word	0x2003e5c0
   b4458:	2003e60c 	.word	0x2003e60c
   b445c:	2003e5d4 	.word	0x2003e5d4
   b4460:	2003e61c 	.word	0x2003e61c
   b4464:	000b85e4 	.word	0x000b85e4
   b4468:	000b8609 	.word	0x000b8609
   b446c:	2003e5e8 	.word	0x2003e5e8
   b4470:	000b41e9 	.word	0x000b41e9
   b4474:	000b862e 	.word	0x000b862e
   b4478:	000b8631 	.word	0x000b8631
   b447c:	000b8656 	.word	0x000b8656
   b4480:	000b85c9 	.word	0x000b85c9
   b4484:	2003e5fc 	.word	0x2003e5fc
   b4488:	2003e690 	.word	0x2003e690
   b448c:	2003e6a4 	.word	0x2003e6a4

000b4490 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4494:	b085      	sub	sp, #20
   b4496:	461f      	mov	r7, r3
   b4498:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b449c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b44a0:	eba8 0902 	sub.w	r9, r8, r2
   b44a4:	eba7 0a01 	sub.w	sl, r7, r1
   b44a8:	f1b9 0f00 	cmp.w	r9, #0
   b44ac:	bfb8      	it	lt
   b44ae:	f1c9 0900 	rsblt	r9, r9, #0
   b44b2:	f1ba 0f00 	cmp.w	sl, #0
   b44b6:	bfb8      	it	lt
   b44b8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b44bc:	45d1      	cmp	r9, sl
        uint16_t color) {
   b44be:	4683      	mov	fp, r0
   b44c0:	460c      	mov	r4, r1
   b44c2:	4615      	mov	r5, r2
    if (steep) {
   b44c4:	dd04      	ble.n	b44d0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b44c6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b44c8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b44ca:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b44cc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b44ce:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b44d0:	42bc      	cmp	r4, r7
   b44d2:	dd05      	ble.n	b44e0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b44d4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b44d6:	4645      	mov	r5, r8
   b44d8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b44da:	4622      	mov	r2, r4
   b44dc:	463c      	mov	r4, r7
   b44de:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b44e0:	1b3e      	subs	r6, r7, r4
   b44e2:	b2b2      	uxth	r2, r6
   b44e4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b44e6:	eba8 0205 	sub.w	r2, r8, r5
   b44ea:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b44ee:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b44f2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b44f6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b44fa:	4545      	cmp	r5, r8
   b44fc:	bfb4      	ite	lt
   b44fe:	2201      	movlt	r2, #1
   b4500:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4504:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4506:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4508:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b450a:	42bc      	cmp	r4, r7
   b450c:	dc1c      	bgt.n	b4548 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b450e:	f8db 2000 	ldr.w	r2, [fp]
   b4512:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4514:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4516:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b451a:	bfc7      	ittee	gt
   b451c:	4629      	movgt	r1, r5
   b451e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4520:	462a      	movle	r2, r5
   b4522:	4621      	movle	r1, r4
   b4524:	4658      	mov	r0, fp
   b4526:	47c0      	blx	r8
        }
        err -= dy;
   b4528:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b452a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b452c:	1ab6      	subs	r6, r6, r2
   b452e:	b2b1      	uxth	r1, r6
   b4530:	b236      	sxth	r6, r6
        if (err < 0) {
   b4532:	2e00      	cmp	r6, #0
   b4534:	da05      	bge.n	b4542 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4536:	9a02      	ldr	r2, [sp, #8]
   b4538:	4415      	add	r5, r2
            err += dx;
   b453a:	9a00      	ldr	r2, [sp, #0]
   b453c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b453e:	b22d      	sxth	r5, r5
            err += dx;
   b4540:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4542:	3401      	adds	r4, #1
   b4544:	b224      	sxth	r4, r4
   b4546:	e7e0      	b.n	b450a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4548:	b005      	add	sp, #20
   b454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b454e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b454e:	4770      	bx	lr

000b4550 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4550:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4552:	6804      	ldr	r4, [r0, #0]
   b4554:	6924      	ldr	r4, [r4, #16]
   b4556:	46a4      	mov	ip, r4
}
   b4558:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b455c:	4760      	bx	ip

000b455e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b455e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4560:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4562:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4566:	9502      	str	r5, [sp, #8]
   b4568:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b456a:	46a4      	mov	ip, r4
}
   b456c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b456e:	4760      	bx	ip

000b4570 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4570:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4572:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4574:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4578:	9502      	str	r5, [sp, #8]
   b457a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b457c:	46a4      	mov	ip, r4
}
   b457e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4580:	4760      	bx	ip

000b4582 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4582:	b470      	push	{r4, r5, r6}
   b4584:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4588:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b458c:	6804      	ldr	r4, [r0, #0]
   b458e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4592:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4594:	46a4      	mov	ip, r4
}
   b4596:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4598:	4760      	bx	ip

000b459a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b459a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b459e:	461c      	mov	r4, r3
    startWrite();
   b45a0:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b45a2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b45a6:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b45a8:	4605      	mov	r5, r0
   b45aa:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b45ac:	3c01      	subs	r4, #1
   b45ae:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b45b0:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b45b2:	b224      	sxth	r4, r4
    startWrite();
   b45b4:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b45b6:	682b      	ldr	r3, [r5, #0]
   b45b8:	f8cd 8004 	str.w	r8, [sp, #4]
   b45bc:	9400      	str	r4, [sp, #0]
   b45be:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b45c0:	4628      	mov	r0, r5
   b45c2:	463b      	mov	r3, r7
   b45c4:	4632      	mov	r2, r6
   b45c6:	4639      	mov	r1, r7
   b45c8:	47a0      	blx	r4
    endWrite();
   b45ca:	682b      	ldr	r3, [r5, #0]
   b45cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45ce:	4628      	mov	r0, r5
}
   b45d0:	b002      	add	sp, #8
   b45d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b45d6:	4718      	bx	r3

000b45d8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b45d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b45dc:	461d      	mov	r5, r3
    startWrite();
   b45de:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b45e0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b45e4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b45e6:	4604      	mov	r4, r0
   b45e8:	4617      	mov	r7, r2
   b45ea:	460e      	mov	r6, r1
    startWrite();
   b45ec:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b45ee:	e9cd 7800 	strd	r7, r8, [sp]
   b45f2:	6822      	ldr	r2, [r4, #0]
   b45f4:	1e6b      	subs	r3, r5, #1
   b45f6:	4433      	add	r3, r6
   b45f8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b45fa:	4620      	mov	r0, r4
   b45fc:	b21b      	sxth	r3, r3
   b45fe:	463a      	mov	r2, r7
   b4600:	4631      	mov	r1, r6
   b4602:	47a8      	blx	r5
    endWrite();
   b4604:	6823      	ldr	r3, [r4, #0]
   b4606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4608:	4620      	mov	r0, r4
}
   b460a:	b002      	add	sp, #8
   b460c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4610:	4718      	bx	r3

000b4612 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4612:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4616:	461e      	mov	r6, r3
    startWrite();
   b4618:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b461a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b461e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4620:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4624:	460c      	mov	r4, r1
   b4626:	4605      	mov	r5, r0
   b4628:	4617      	mov	r7, r2
    startWrite();
   b462a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b462c:	4426      	add	r6, r4
   b462e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4630:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4632:	da0b      	bge.n	b464c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4634:	f8cd 8000 	str.w	r8, [sp]
   b4638:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b463c:	4621      	mov	r1, r4
   b463e:	464b      	mov	r3, r9
   b4640:	463a      	mov	r2, r7
   b4642:	4628      	mov	r0, r5
   b4644:	3401      	adds	r4, #1
   b4646:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4648:	b224      	sxth	r4, r4
   b464a:	e7f0      	b.n	b462e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b464e:	4628      	mov	r0, r5
}
   b4650:	b002      	add	sp, #8
   b4652:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4656:	4718      	bx	r3

000b4658 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4658:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b465a:	6802      	ldr	r2, [r0, #0]
   b465c:	9101      	str	r1, [sp, #4]
   b465e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4662:	9100      	str	r1, [sp, #0]
   b4664:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4666:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b466a:	2200      	movs	r2, #0
   b466c:	4611      	mov	r1, r2
   b466e:	47a0      	blx	r4
}
   b4670:	b002      	add	sp, #8
   b4672:	bd10      	pop	{r4, pc}

000b4674 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4678:	4299      	cmp	r1, r3
        uint16_t color) {
   b467a:	4616      	mov	r6, r2
   b467c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4680:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4684:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4686:	4680      	mov	r8, r0
   b4688:	460d      	mov	r5, r1
   b468a:	461c      	mov	r4, r3
    if(x0 == x1){
   b468c:	d113      	bne.n	b46b6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b468e:	42be      	cmp	r6, r7
   b4690:	bfc8      	it	gt
   b4692:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4694:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4698:	bfc4      	itt	gt
   b469a:	463e      	movgt	r6, r7
   b469c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b469e:	1c7b      	adds	r3, r7, #1
   b46a0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b46a2:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b46a4:	b21b      	sxth	r3, r3
   b46a6:	4632      	mov	r2, r6
   b46a8:	4629      	mov	r1, r5
   b46aa:	4640      	mov	r0, r8
   b46ac:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b46ae:	b003      	add	sp, #12
   b46b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b46b4:	4760      	bx	ip
    } else if(y0 == y1){
   b46b6:	42be      	cmp	r6, r7
   b46b8:	d10a      	bne.n	b46d0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b46ba:	4299      	cmp	r1, r3
   b46bc:	bfc2      	ittt	gt
   b46be:	460b      	movgt	r3, r1
   b46c0:	4625      	movgt	r5, r4
   b46c2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b46c4:	1c63      	adds	r3, r4, #1
   b46c6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b46ca:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b46cc:	1b5b      	subs	r3, r3, r5
   b46ce:	e7e9      	b.n	b46a4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b46d0:	6953      	ldr	r3, [r2, #20]
   b46d2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b46d4:	e9cd 7900 	strd	r7, r9, [sp]
   b46d8:	f8d8 3000 	ldr.w	r3, [r8]
   b46dc:	4640      	mov	r0, r8
   b46de:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b46e0:	4632      	mov	r2, r6
   b46e2:	4623      	mov	r3, r4
   b46e4:	4629      	mov	r1, r5
   b46e6:	47b8      	blx	r7
        endWrite();
   b46e8:	f8d8 3000 	ldr.w	r3, [r8]
   b46ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46ee:	4640      	mov	r0, r8
}
   b46f0:	b003      	add	sp, #12
   b46f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b46f6:	4718      	bx	r3

000b46f8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b46f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b46fc:	461d      	mov	r5, r3
    startWrite();
   b46fe:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4700:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4704:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4706:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b470a:	4604      	mov	r4, r0
   b470c:	460f      	mov	r7, r1
   b470e:	4616      	mov	r6, r2
    startWrite();
   b4710:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4712:	6823      	ldr	r3, [r4, #0]
   b4714:	f8cd 8000 	str.w	r8, [sp]
   b4718:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b471c:	4632      	mov	r2, r6
   b471e:	462b      	mov	r3, r5
   b4720:	4639      	mov	r1, r7
   b4722:	4620      	mov	r0, r4
   b4724:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4726:	6823      	ldr	r3, [r4, #0]
   b4728:	f8cd 8000 	str.w	r8, [sp]
   b472c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4730:	4432      	add	r2, r6
   b4732:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4736:	4639      	mov	r1, r7
   b4738:	462b      	mov	r3, r5
   b473a:	4620      	mov	r0, r4
   b473c:	b212      	sxth	r2, r2
   b473e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4740:	6823      	ldr	r3, [r4, #0]
   b4742:	f8cd 8000 	str.w	r8, [sp]
   b4746:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b474a:	4632      	mov	r2, r6
   b474c:	464b      	mov	r3, r9
   b474e:	4639      	mov	r1, r7
   b4750:	4620      	mov	r0, r4
   b4752:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4754:	1e6b      	subs	r3, r5, #1
   b4756:	19d9      	adds	r1, r3, r7
   b4758:	6823      	ldr	r3, [r4, #0]
   b475a:	f8cd 8000 	str.w	r8, [sp]
   b475e:	6a1d      	ldr	r5, [r3, #32]
   b4760:	4620      	mov	r0, r4
   b4762:	464b      	mov	r3, r9
   b4764:	4632      	mov	r2, r6
   b4766:	b209      	sxth	r1, r1
   b4768:	47a8      	blx	r5
    endWrite();
   b476a:	6823      	ldr	r3, [r4, #0]
   b476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b476e:	4620      	mov	r0, r4
}
   b4770:	b002      	add	sp, #8
   b4772:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4776:	4718      	bx	r3

000b4778 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4778:	4770      	bx	lr

000b477a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b477a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b477e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4782:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4784:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4786:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b478a:	bf59      	ittee	pl
   b478c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b478e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4790:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4792:	81c3      	strhmi	r3, [r0, #14]
}
   b4794:	4770      	bx	lr
	...

000b4798 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4798:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b479a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b479c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b479e:	4a07      	ldr	r2, [pc, #28]	; (b47bc <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b47a0:	4d07      	ldr	r5, [pc, #28]	; (b47c0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b47a2:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b47a4:	2400      	movs	r4, #0
    _width    = WIDTH;
   b47a6:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b47a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b47ac:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b47b0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b47b2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b47b4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b47b6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b47b8:	6204      	str	r4, [r0, #32]
}
   b47ba:	bd30      	pop	{r4, r5, pc}
   b47bc:	01000101 	.word	0x01000101
   b47c0:	000b8b64 	.word	0x000b8b64

000b47c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b47c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47c8:	b089      	sub	sp, #36	; 0x24
   b47ca:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b47ce:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b47d0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b47d4:	9304      	str	r3, [sp, #16]
   b47d6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b47da:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b47dc:	9305      	str	r3, [sp, #20]
   b47de:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b47e2:	4604      	mov	r4, r0
    startWrite();
   b47e4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b47e6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b47ea:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b47ee:	bf48      	it	mi
   b47f0:	f108 020e 	addmi.w	r2, r8, #14
   b47f4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b47f8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b47fa:	4635      	mov	r5, r6
   b47fc:	9b03      	ldr	r3, [sp, #12]
   b47fe:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4800:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4804:	189a      	adds	r2, r3, r2
   b4806:	9b05      	ldr	r3, [sp, #20]
   b4808:	428b      	cmp	r3, r1
   b480a:	b212      	sxth	r2, r2
   b480c:	dd27      	ble.n	b485e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b480e:	9b04      	ldr	r3, [sp, #16]
   b4810:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4812:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4816:	9306      	str	r3, [sp, #24]
   b4818:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b481c:	4580      	cmp	r8, r0
   b481e:	fa1f f189 	uxth.w	r1, r9
   b4822:	dd17      	ble.n	b4854 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4824:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4826:	bf05      	ittet	eq
   b4828:	9b06      	ldreq	r3, [sp, #24]
   b482a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b482c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b482e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4830:	bf18      	it	ne
   b4832:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4834:	062b      	lsls	r3, r5, #24
   b4836:	d50a      	bpl.n	b484e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4838:	9b02      	ldr	r3, [sp, #8]
   b483a:	6820      	ldr	r0, [r4, #0]
   b483c:	9207      	str	r2, [sp, #28]
   b483e:	4419      	add	r1, r3
   b4840:	6983      	ldr	r3, [r0, #24]
   b4842:	b209      	sxth	r1, r1
   b4844:	461f      	mov	r7, r3
   b4846:	4620      	mov	r0, r4
   b4848:	4653      	mov	r3, sl
   b484a:	47b8      	blx	r7
   b484c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b484e:	f109 0901 	add.w	r9, r9, #1
   b4852:	e7e1      	b.n	b4818 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4854:	9b01      	ldr	r3, [sp, #4]
   b4856:	3301      	adds	r3, #1
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	445e      	add	r6, fp
   b485c:	e7ce      	b.n	b47fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b485e:	6823      	ldr	r3, [r4, #0]
   b4860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4862:	4620      	mov	r0, r4
}
   b4864:	b009      	add	sp, #36	; 0x24
   b4866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b486a:	4718      	bx	r3

000b486c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4870:	ed2d 8b02 	vpush	{d8}
   b4874:	b091      	sub	sp, #68	; 0x44
   b4876:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4878:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b487a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b487e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4882:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4886:	9103      	str	r1, [sp, #12]
   b4888:	461f      	mov	r7, r3
   b488a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b488e:	9304      	str	r3, [sp, #16]
   b4890:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4892:	2a00      	cmp	r2, #0
   b4894:	f040 80c5 	bne.w	b4a22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4898:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b489c:	428b      	cmp	r3, r1
   b489e:	f340 814c 	ble.w	b4b3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b48a2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b48a6:	42b3      	cmp	r3, r6
   b48a8:	f340 8147 	ble.w	b4b3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b48ac:	2306      	movs	r3, #6
   b48ae:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b48b2:	2b00      	cmp	r3, #0
   b48b4:	f340 8141 	ble.w	b4b3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b48b8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b48bc:	2b00      	cmp	r3, #0
   b48be:	f340 813c 	ble.w	b4b3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b48c2:	7f03      	ldrb	r3, [r0, #28]
   b48c4:	b91b      	cbnz	r3, b48ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b48c6:	2faf      	cmp	r7, #175	; 0xaf
   b48c8:	bf84      	itt	hi
   b48ca:	3701      	addhi	r7, #1
   b48cc:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b48ce:	f8db 3000 	ldr.w	r3, [fp]
   b48d2:	4658      	mov	r0, fp
   b48d4:	695b      	ldr	r3, [r3, #20]
   b48d6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b48d8:	2205      	movs	r2, #5
   b48da:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b48dc:	2200      	movs	r2, #0
   b48de:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b48e0:	4a98      	ldr	r2, [pc, #608]	; (b4b44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b48e2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b48e6:	18d3      	adds	r3, r2, r3
   b48e8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b48ea:	b2b3      	uxth	r3, r6
   b48ec:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b48ee:	9a05      	ldr	r2, [sp, #20]
   b48f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b48f2:	5c9b      	ldrb	r3, [r3, r2]
   b48f4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b48f6:	b2ab      	uxth	r3, r5
   b48f8:	930b      	str	r3, [sp, #44]	; 0x2c
   b48fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b48fe:	9308      	str	r3, [sp, #32]
   b4900:	9b03      	ldr	r3, [sp, #12]
   b4902:	fb02 f905 	mul.w	r9, r2, r5
   b4906:	fa19 f983 	uxtah	r9, r9, r3
   b490a:	fa0f f389 	sxth.w	r3, r9
   b490e:	ee08 3a10 	vmov	s16, r3
   b4912:	2308      	movs	r3, #8
   b4914:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4916:	9b03      	ldr	r3, [sp, #12]
   b4918:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b491c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4920:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4924:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4926:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b492a:	07d2      	lsls	r2, r2, #31
   b492c:	d552      	bpl.n	b49d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b492e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4930:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4934:	d13e      	bne.n	b49b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4936:	2c01      	cmp	r4, #1
   b4938:	d13c      	bne.n	b49b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b493a:	699b      	ldr	r3, [r3, #24]
   b493c:	9906      	ldr	r1, [sp, #24]
   b493e:	461f      	mov	r7, r3
   b4940:	9b04      	ldr	r3, [sp, #16]
   b4942:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4944:	b212      	sxth	r2, r2
   b4946:	4651      	mov	r1, sl
   b4948:	4658      	mov	r0, fp
   b494a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b494c:	f109 0301 	add.w	r3, r9, #1
   b4950:	fa4f f983 	sxtb.w	r9, r3
   b4954:	9b07      	ldr	r3, [sp, #28]
   b4956:	085b      	lsrs	r3, r3, #1
   b4958:	9307      	str	r3, [sp, #28]
   b495a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b495c:	3b01      	subs	r3, #1
   b495e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4962:	930a      	str	r3, [sp, #40]	; 0x28
   b4964:	d1de      	bne.n	b4924 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4966:	9f05      	ldr	r7, [sp, #20]
   b4968:	3701      	adds	r7, #1
   b496a:	b27b      	sxtb	r3, r7
   b496c:	9305      	str	r3, [sp, #20]
   b496e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4970:	3b01      	subs	r3, #1
   b4972:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4976:	9309      	str	r3, [sp, #36]	; 0x24
   b4978:	d1b9      	bne.n	b48ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b497a:	9b04      	ldr	r3, [sp, #16]
   b497c:	4543      	cmp	r3, r8
   b497e:	d00f      	beq.n	b49a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4980:	2d01      	cmp	r5, #1
   b4982:	f8db 3000 	ldr.w	r3, [fp]
   b4986:	d13b      	bne.n	b4a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4988:	2c01      	cmp	r4, #1
   b498a:	d139      	bne.n	b4a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b498c:	9908      	ldr	r1, [sp, #32]
   b498e:	f8cd 8000 	str.w	r8, [sp]
   b4992:	3105      	adds	r1, #5
   b4994:	6a1c      	ldr	r4, [r3, #32]
   b4996:	4632      	mov	r2, r6
   b4998:	2308      	movs	r3, #8
   b499a:	b209      	sxth	r1, r1
   b499c:	4658      	mov	r0, fp
   b499e:	47a0      	blx	r4
        endWrite();
   b49a0:	f8db 3000 	ldr.w	r3, [fp]
   b49a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49a6:	4658      	mov	r0, fp
}
   b49a8:	b011      	add	sp, #68	; 0x44
   b49aa:	ecbd 8b02 	vpop	{d8}
   b49ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b49b2:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b49b4:	9906      	ldr	r1, [sp, #24]
   b49b6:	fb14 f202 	smulbb	r2, r4, r2
   b49ba:	440a      	add	r2, r1
   b49bc:	9904      	ldr	r1, [sp, #16]
   b49be:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b49c0:	9400      	str	r4, [sp, #0]
   b49c2:	69db      	ldr	r3, [r3, #28]
   b49c4:	ee18 1a10 	vmov	r1, s16
   b49c8:	461f      	mov	r7, r3
   b49ca:	b212      	sxth	r2, r2
   b49cc:	462b      	mov	r3, r5
   b49ce:	4658      	mov	r0, fp
   b49d0:	47b8      	blx	r7
   b49d2:	e7bb      	b.n	b494c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b49d4:	9a04      	ldr	r2, [sp, #16]
   b49d6:	4542      	cmp	r2, r8
   b49d8:	d0b8      	beq.n	b494c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b49da:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b49dc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b49e0:	d107      	bne.n	b49f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b49e2:	2c01      	cmp	r4, #1
   b49e4:	d105      	bne.n	b49f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b49e6:	699b      	ldr	r3, [r3, #24]
   b49e8:	9906      	ldr	r1, [sp, #24]
   b49ea:	461f      	mov	r7, r3
   b49ec:	440a      	add	r2, r1
   b49ee:	4643      	mov	r3, r8
   b49f0:	e7a8      	b.n	b4944 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b49f2:	9906      	ldr	r1, [sp, #24]
   b49f4:	f8cd 8004 	str.w	r8, [sp, #4]
   b49f8:	fb14 f202 	smulbb	r2, r4, r2
   b49fc:	440a      	add	r2, r1
   b49fe:	e7df      	b.n	b49c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4a02:	f8cd 8004 	str.w	r8, [sp, #4]
   b4a06:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4a0a:	9a08      	ldr	r2, [sp, #32]
   b4a0c:	00e4      	lsls	r4, r4, #3
   b4a0e:	440a      	add	r2, r1
   b4a10:	4611      	mov	r1, r2
   b4a12:	9400      	str	r4, [sp, #0]
   b4a14:	69dc      	ldr	r4, [r3, #28]
   b4a16:	4632      	mov	r2, r6
   b4a18:	462b      	mov	r3, r5
   b4a1a:	b209      	sxth	r1, r1
   b4a1c:	4658      	mov	r0, fp
   b4a1e:	47a0      	blx	r4
        endWrite();
   b4a20:	e7be      	b.n	b49a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4a22:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4a24:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4a26:	6812      	ldr	r2, [r2, #0]
   b4a28:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4a2a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4a2c:	b2ff      	uxtb	r7, r7
   b4a2e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4a32:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4a36:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4a38:	789a      	ldrb	r2, [r3, #2]
   b4a3a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4a3c:	78da      	ldrb	r2, [r3, #3]
   b4a3e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4a40:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4a42:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4a46:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4a4a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4a4c:	d801      	bhi.n	b4a52 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4a4e:	2c01      	cmp	r4, #1
   b4a50:	d957      	bls.n	b4b02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4a52:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4a56:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4a58:	fa0f f38a 	sxth.w	r3, sl
   b4a5c:	9307      	str	r3, [sp, #28]
        startWrite();
   b4a5e:	f8db 3000 	ldr.w	r3, [fp]
   b4a62:	4658      	mov	r0, fp
   b4a64:	695b      	ldr	r3, [r3, #20]
   b4a66:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a68:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4a6a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a6e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a70:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4a74:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4a76:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a78:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4a7c:	429f      	cmp	r7, r3
   b4a7e:	d28f      	bcs.n	b49a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a80:	9b07      	ldr	r3, [sp, #28]
   b4a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4a84:	443b      	add	r3, r7
   b4a86:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4a8a:	2200      	movs	r2, #0
   b4a8c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a90:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a92:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a96:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4a9a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4a9e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4aa2:	9905      	ldr	r1, [sp, #20]
   b4aa4:	4291      	cmp	r1, r2
   b4aa6:	d241      	bcs.n	b4b2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4aa8:	1c5a      	adds	r2, r3, #1
   b4aaa:	b2d2      	uxtb	r2, r2
   b4aac:	075b      	lsls	r3, r3, #29
   b4aae:	920d      	str	r2, [sp, #52]	; 0x34
   b4ab0:	d107      	bne.n	b4ac2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4ab2:	9b06      	ldr	r3, [sp, #24]
   b4ab4:	9906      	ldr	r1, [sp, #24]
   b4ab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4ab8:	3301      	adds	r3, #1
   b4aba:	b29b      	uxth	r3, r3
   b4abc:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4ac0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4ac2:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4ac6:	d012      	beq.n	b4aee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4ac8:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4aca:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4ace:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4ad2:	d11a      	bne.n	b4b0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4ad4:	2c01      	cmp	r4, #1
   b4ad6:	d118      	bne.n	b4b0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4ada:	699b      	ldr	r3, [r3, #24]
   b4adc:	4411      	add	r1, r2
   b4ade:	9a05      	ldr	r2, [sp, #20]
   b4ae0:	4411      	add	r1, r2
   b4ae2:	461e      	mov	r6, r3
   b4ae4:	4652      	mov	r2, sl
   b4ae6:	9b04      	ldr	r3, [sp, #16]
   b4ae8:	b209      	sxth	r1, r1
   b4aea:	4658      	mov	r0, fp
   b4aec:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4aee:	9e05      	ldr	r6, [sp, #20]
   b4af0:	3601      	adds	r6, #1
   b4af2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4af4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4af8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4afa:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4b00:	e7ce      	b.n	b4aa0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4b02:	2300      	movs	r3, #0
   b4b04:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4b08:	e7a9      	b.n	b4a5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b0a:	9805      	ldr	r0, [sp, #20]
   b4b0c:	9a08      	ldr	r2, [sp, #32]
   b4b0e:	4402      	add	r2, r0
   b4b10:	fb02 1105 	mla	r1, r2, r5, r1
   b4b14:	9a04      	ldr	r2, [sp, #16]
   b4b16:	e9cd 4200 	strd	r4, r2, [sp]
   b4b1a:	69db      	ldr	r3, [r3, #28]
   b4b1c:	ee18 2a10 	vmov	r2, s16
   b4b20:	461e      	mov	r6, r3
   b4b22:	b209      	sxth	r1, r1
   b4b24:	462b      	mov	r3, r5
   b4b26:	4658      	mov	r0, fp
   b4b28:	47b0      	blx	r6
   b4b2a:	e7e0      	b.n	b4aee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4b2e:	3701      	adds	r7, #1
   b4b30:	4498      	add	r8, r3
   b4b32:	fa5f f888 	uxtb.w	r8, r8
   b4b36:	b2ff      	uxtb	r7, r7
   b4b38:	e79f      	b.n	b4a7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4b3a:	b011      	add	sp, #68	; 0x44
   b4b3c:	ecbd 8b02 	vpop	{d8}
   b4b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b44:	000b8659 	.word	0x000b8659

000b4b48 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4b4a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4b4c:	b085      	sub	sp, #20
   b4b4e:	4604      	mov	r4, r0
   b4b50:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4b52:	2a00      	cmp	r2, #0
   b4b54:	d134      	bne.n	b4bc0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4b56:	290a      	cmp	r1, #10
   b4b58:	d108      	bne.n	b4b6c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4b5a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4b5c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4b5e:	7e42      	ldrb	r2, [r0, #25]
   b4b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4b64:	8263      	strh	r3, [r4, #18]
}
   b4b66:	2001      	movs	r0, #1
   b4b68:	b005      	add	sp, #20
   b4b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4b6c:	290d      	cmp	r1, #13
   b4b6e:	d0fa      	beq.n	b4b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4b70:	7ee1      	ldrb	r1, [r4, #27]
   b4b72:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4b74:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4b76:	b171      	cbz	r1, b4b96 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4b78:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4b7c:	2106      	movs	r1, #6
   b4b7e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4b82:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4b86:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4b88:	bfc1      	itttt	gt
   b4b8a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4b8e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4b90:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4b94:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4b96:	8ae2      	ldrh	r2, [r4, #22]
   b4b98:	9201      	str	r2, [sp, #4]
   b4b9a:	8aa2      	ldrh	r2, [r4, #20]
   b4b9c:	9200      	str	r2, [sp, #0]
   b4b9e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4ba2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4ba6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4baa:	4620      	mov	r0, r4
   b4bac:	f7ff fe5e 	bl	b486c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4bb0:	7e23      	ldrb	r3, [r4, #24]
   b4bb2:	8a22      	ldrh	r2, [r4, #16]
   b4bb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4bb8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4bbc:	8223      	strh	r3, [r4, #16]
   b4bbe:	e7d2      	b.n	b4b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4bc0:	290a      	cmp	r1, #10
   b4bc2:	d107      	bne.n	b4bd4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4bc4:	2300      	movs	r3, #0
   b4bc6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4bc8:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4bca:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4bcc:	8a43      	ldrh	r3, [r0, #18]
   b4bce:	fb01 3302 	mla	r3, r1, r2, r3
   b4bd2:	e7c7      	b.n	b4b64 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4bd4:	290d      	cmp	r1, #13
   b4bd6:	d0c6      	beq.n	b4b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4bd8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4bda:	42a9      	cmp	r1, r5
   b4bdc:	d3c3      	bcc.n	b4b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4bde:	7a51      	ldrb	r1, [r2, #9]
   b4be0:	4299      	cmp	r1, r3
   b4be2:	d3c0      	bcc.n	b4b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4be4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4be6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4be8:	b2ed      	uxtb	r5, r5
   b4bea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4bee:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4bf0:	b328      	cbz	r0, b4c3e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4bf2:	78e9      	ldrb	r1, [r5, #3]
   b4bf4:	b319      	cbz	r1, b4c3e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4bf6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4bf8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4bfa:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4bfc:	b191      	cbz	r1, b4c24 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4bfe:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4c02:	4408      	add	r0, r1
   b4c04:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4c08:	fb06 1100 	mla	r1, r6, r0, r1
   b4c0c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4c10:	4281      	cmp	r1, r0
   b4c12:	dd07      	ble.n	b4c24 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4c14:	2000      	movs	r0, #0
   b4c16:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4c18:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4c1c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4c1e:	fb02 1207 	mla	r2, r2, r7, r1
   b4c22:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4c24:	8ae2      	ldrh	r2, [r4, #22]
   b4c26:	9201      	str	r2, [sp, #4]
   b4c28:	8aa2      	ldrh	r2, [r4, #20]
   b4c2a:	9200      	str	r2, [sp, #0]
   b4c2c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4c30:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4c34:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4c38:	4620      	mov	r0, r4
   b4c3a:	f7ff fe17 	bl	b486c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4c3e:	7929      	ldrb	r1, [r5, #4]
   b4c40:	7e22      	ldrb	r2, [r4, #24]
   b4c42:	8a23      	ldrh	r3, [r4, #16]
   b4c44:	fb01 3302 	mla	r3, r1, r2, r3
   b4c48:	e7b8      	b.n	b4bbc <_ZN12Adafruit_GFX5writeEh+0x74>

000b4c4a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4c4a:	2901      	cmp	r1, #1
   b4c4c:	bf38      	it	cc
   b4c4e:	2101      	movcc	r1, #1
   b4c50:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4c52:	7641      	strb	r1, [r0, #25]
}
   b4c54:	4770      	bx	lr

000b4c56 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4c56:	4770      	bx	lr

000b4c58 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4c58:	b510      	push	{r4, lr}
  }
   b4c5a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4c5c:	4604      	mov	r4, r0
  }
   b4c5e:	f7ff fa2e 	bl	b40be <_ZdlPvj>
   b4c62:	4620      	mov	r0, r4
   b4c64:	bd10      	pop	{r4, pc}

000b4c66 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c66:	b40e      	push	{r1, r2, r3}
   b4c68:	b503      	push	{r0, r1, lr}
   b4c6a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4c6c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c6e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4c72:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4c74:	f002 fd07 	bl	b7686 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4c78:	b002      	add	sp, #8
   b4c7a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c7e:	b003      	add	sp, #12
   b4c80:	4770      	bx	lr
	...

000b4c84 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4c86:	4604      	mov	r4, r0
   b4c88:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4c8a:	7922      	ldrb	r2, [r4, #4]
   b4c8c:	68a3      	ldr	r3, [r4, #8]
   b4c8e:	b132      	cbz	r2, b4c9e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4c90:	b9a3      	cbnz	r3, b4cbc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4c92:	490b      	ldr	r1, [pc, #44]	; (b4cc0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4c94:	b002      	add	sp, #8
   b4c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4c9a:	f002 bcb9 	b.w	b7610 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4c9e:	4a09      	ldr	r2, [pc, #36]	; (b4cc4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4ca0:	7b26      	ldrb	r6, [r4, #12]
   b4ca2:	4d09      	ldr	r5, [pc, #36]	; (b4cc8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4ca4:	4909      	ldr	r1, [pc, #36]	; (b4ccc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4ca6:	7b64      	ldrb	r4, [r4, #13]
   b4ca8:	2e01      	cmp	r6, #1
   b4caa:	bf18      	it	ne
   b4cac:	4629      	movne	r1, r5
   b4cae:	e9cd 1400 	strd	r1, r4, [sp]
   b4cb2:	4907      	ldr	r1, [pc, #28]	; (b4cd0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4cb4:	f7ff ffd7 	bl	b4c66 <_ZN5Print6printfEPKcz>
  }
   b4cb8:	b002      	add	sp, #8
   b4cba:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4cbc:	4a05      	ldr	r2, [pc, #20]	; (b4cd4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4cbe:	e7ef      	b.n	b4ca0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4cc0:	000b8bc5 	.word	0x000b8bc5
   b4cc4:	000b85c9 	.word	0x000b85c9
   b4cc8:	000b8bc1 	.word	0x000b8bc1
   b4ccc:	000b8bbd 	.word	0x000b8bbd
   b4cd0:	000b8bdb 	.word	0x000b8bdb
   b4cd4:	000b8bb4 	.word	0x000b8bb4

000b4cd8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4cd8:	b510      	push	{r4, lr}
   b4cda:	4b04      	ldr	r3, [pc, #16]	; (b4cec <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4cdc:	6003      	str	r3, [r0, #0]
   b4cde:	4604      	mov	r4, r0
  if(buffer) {
   b4ce0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ce2:	b108      	cbz	r0, b4ce8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4ce4:	f001 f836 	bl	b5d54 <free>
    buffer = NULL;
  }
}
   b4ce8:	4620      	mov	r0, r4
   b4cea:	bd10      	pop	{r4, pc}
   b4cec:	000b90b4 	.word	0x000b90b4

000b4cf0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4cf0:	b510      	push	{r4, lr}
   b4cf2:	4604      	mov	r4, r0
}
   b4cf4:	f7ff fff0 	bl	b4cd8 <_ZN16Adafruit_SSD1306D1Ev>
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	2150      	movs	r1, #80	; 0x50
   b4cfc:	f7ff f9df 	bl	b40be <_ZdlPvj>
   b4d00:	4620      	mov	r0, r4
   b4d02:	bd10      	pop	{r4, pc}

000b4d04 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4d04:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4d06:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4d08:	db4b      	blt.n	b4da2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4d0a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4d0e:	428c      	cmp	r4, r1
   b4d10:	dd47      	ble.n	b4da2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4d12:	2a00      	cmp	r2, #0
   b4d14:	db45      	blt.n	b4da2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4d16:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4d1a:	4294      	cmp	r4, r2
   b4d1c:	dd41      	ble.n	b4da2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4d1e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4d20:	2c02      	cmp	r4, #2
   b4d22:	d01f      	beq.n	b4d64 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4d24:	2c03      	cmp	r4, #3
   b4d26:	d026      	beq.n	b4d76 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4d28:	2c01      	cmp	r4, #1
   b4d2a:	d104      	bne.n	b4d36 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4d2c:	8904      	ldrh	r4, [r0, #8]
   b4d2e:	43d2      	mvns	r2, r2
   b4d30:	4414      	add	r4, r2
      break;
   b4d32:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4d34:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4d36:	2b01      	cmp	r3, #1
   b4d38:	d023      	beq.n	b4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4d3a:	2b02      	cmp	r3, #2
   b4d3c:	d032      	beq.n	b4da4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4d3e:	bb83      	cbnz	r3, b4da2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4d40:	2a00      	cmp	r2, #0
   b4d42:	4613      	mov	r3, r2
   b4d44:	8904      	ldrh	r4, [r0, #8]
   b4d46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4d48:	bfb8      	it	lt
   b4d4a:	1dd3      	addlt	r3, r2, #7
   b4d4c:	10db      	asrs	r3, r3, #3
   b4d4e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4d52:	f002 0207 	and.w	r2, r2, #7
   b4d56:	2301      	movs	r3, #1
   b4d58:	4093      	lsls	r3, r2
   b4d5a:	5c42      	ldrb	r2, [r0, r1]
   b4d5c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4d60:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4d62:	e01e      	b.n	b4da2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4d64:	8904      	ldrh	r4, [r0, #8]
   b4d66:	3c01      	subs	r4, #1
   b4d68:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4d6a:	8944      	ldrh	r4, [r0, #10]
   b4d6c:	43d2      	mvns	r2, r2
   b4d6e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4d70:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4d72:	b212      	sxth	r2, r2
      break;
   b4d74:	e7df      	b.n	b4d36 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4d76:	8944      	ldrh	r4, [r0, #10]
   b4d78:	3c01      	subs	r4, #1
   b4d7a:	1a64      	subs	r4, r4, r1
      break;
   b4d7c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4d7e:	b222      	sxth	r2, r4
      break;
   b4d80:	e7d9      	b.n	b4d36 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4d82:	2a00      	cmp	r2, #0
   b4d84:	8904      	ldrh	r4, [r0, #8]
   b4d86:	4613      	mov	r3, r2
   b4d88:	bfb8      	it	lt
   b4d8a:	1dd3      	addlt	r3, r2, #7
   b4d8c:	10db      	asrs	r3, r3, #3
   b4d8e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4d92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4d94:	f002 0007 	and.w	r0, r2, #7
   b4d98:	2201      	movs	r2, #1
   b4d9a:	4082      	lsls	r2, r0
   b4d9c:	5c58      	ldrb	r0, [r3, r1]
   b4d9e:	4302      	orrs	r2, r0
   b4da0:	545a      	strb	r2, [r3, r1]
}
   b4da2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4da4:	2a00      	cmp	r2, #0
   b4da6:	4613      	mov	r3, r2
   b4da8:	8904      	ldrh	r4, [r0, #8]
   b4daa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4dac:	bfb8      	it	lt
   b4dae:	1dd3      	addlt	r3, r2, #7
   b4db0:	10db      	asrs	r3, r3, #3
   b4db2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4db6:	f002 0207 	and.w	r2, r2, #7
   b4dba:	2301      	movs	r3, #1
   b4dbc:	fa03 f202 	lsl.w	r2, r3, r2
   b4dc0:	5c43      	ldrb	r3, [r0, r1]
   b4dc2:	405a      	eors	r2, r3
   b4dc4:	e7cc      	b.n	b4d60 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4dc8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4dc8:	b570      	push	{r4, r5, r6, lr}
   b4dca:	4604      	mov	r4, r0
   b4dcc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4dce:	2600      	movs	r6, #0
   b4dd0:	f7ff fce2 	bl	b4798 <_ZN12Adafruit_GFXC1Ess>
   b4dd4:	4b11      	ldr	r3, [pc, #68]	; (b4e1c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4dd6:	6023      	str	r3, [r4, #0]
   b4dd8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4dda:	b915      	cbnz	r5, b4de2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4ddc:	f003 f8c4 	bl	b7f68 <_Z19__fetch_global_Wirev>
   b4de0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4de2:	23ff      	movs	r3, #255	; 0xff
   b4de4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4de8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4dec:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4df0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4df4:	4b0a      	ldr	r3, [pc, #40]	; (b4e20 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4df6:	63a3      	str	r3, [r4, #56]	; 0x38
   b4df8:	2301      	movs	r3, #1
   b4dfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4dfe:	9b05      	ldr	r3, [sp, #20]
   b4e00:	64a3      	str	r3, [r4, #72]	; 0x48
   b4e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4e06:	9b06      	ldr	r3, [sp, #24]
   b4e08:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4e0a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4e0e:	6426      	str	r6, [r4, #64]	; 0x40
   b4e10:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4e14:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4e16:	4620      	mov	r0, r4
   b4e18:	bd70      	pop	{r4, r5, r6, pc}
   b4e1a:	bf00      	nop
   b4e1c:	000b90b4 	.word	0x000b90b4
   b4e20:	000b8c00 	.word	0x000b8c00

000b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e26:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4e28:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4e2a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4e2c:	b190      	cbz	r0, b4e54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4e2e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4e32:	f002 fa89 	bl	b7348 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4e36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e38:	6803      	ldr	r3, [r0, #0]
   b4e3a:	2100      	movs	r1, #0
   b4e3c:	689b      	ldr	r3, [r3, #8]
   b4e3e:	4798      	blx	r3
    WIRE_WRITE(c);
   b4e40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e42:	6803      	ldr	r3, [r0, #0]
   b4e44:	4629      	mov	r1, r5
   b4e46:	689b      	ldr	r3, [r3, #8]
   b4e48:	4798      	blx	r3
    wire->endTransmission();
   b4e4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4e4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4e50:	f002 ba81 	b.w	b7356 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4e54:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4e58:	4601      	mov	r1, r0
   b4e5a:	b298      	uxth	r0, r3
   b4e5c:	f003 f83d 	bl	b7eda <digitalWrite>
  if(spi) {
   b4e60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4e62:	b120      	cbz	r0, b4e6e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4e64:	4629      	mov	r1, r5
}
   b4e66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4e6a:	f002 bd13 	b.w	b7894 <_ZN8SPIClass8transferEh>
   b4e6e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4e70:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4e72:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4e76:	ea05 0107 	and.w	r1, r5, r7
   b4e7a:	b280      	uxth	r0, r0
   b4e7c:	f003 f82d 	bl	b7eda <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4e80:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4e84:	2101      	movs	r1, #1
   b4e86:	b280      	uxth	r0, r0
   b4e88:	f003 f827 	bl	b7eda <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4e8c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4e90:	2100      	movs	r1, #0
   b4e92:	b280      	uxth	r0, r0
   b4e94:	f003 f821 	bl	b7eda <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4e98:	3e01      	subs	r6, #1
   b4e9a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4e9e:	d1e8      	bne.n	b4e72 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ea2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4ea2:	b538      	push	{r3, r4, r5, lr}
   b4ea4:	4604      	mov	r4, r0
  TRANSACTION_START
   b4ea6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4ea8:	460d      	mov	r5, r1
  TRANSACTION_START
   b4eaa:	b180      	cbz	r0, b4ece <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4eac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4eae:	f002 fa3d 	bl	b732c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4eb2:	2d00      	cmp	r5, #0
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	bf14      	ite	ne
   b4eb8:	21a7      	movne	r1, #167	; 0xa7
   b4eba:	21a6      	moveq	r1, #166	; 0xa6
   b4ebc:	f7ff ffb2 	bl	b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4ec0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ec2:	b188      	cbz	r0, b4ee8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4ec4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4eca:	f002 ba2f 	b.w	b732c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4ed0:	b118      	cbz	r0, b4eda <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4ed2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4ed6:	f002 fc6f 	bl	b77b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4eda:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ede:	2100      	movs	r1, #0
   b4ee0:	b280      	uxth	r0, r0
   b4ee2:	f002 fffa 	bl	b7eda <digitalWrite>
   b4ee6:	e7e4      	b.n	b4eb2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4ee8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4eec:	2101      	movs	r1, #1
   b4eee:	b280      	uxth	r0, r0
   b4ef0:	f002 fff3 	bl	b7eda <digitalWrite>
   b4ef4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4ef6:	b118      	cbz	r0, b4f00 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4efc:	f002 bc42 	b.w	b7784 <_ZN8SPIClass14endTransactionEv>
}
   b4f00:	bd38      	pop	{r3, r4, r5, pc}

000b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4f02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4f06:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4f08:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4f0a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4f0c:	188f      	adds	r7, r1, r2
   b4f0e:	b340      	cbz	r0, b4f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4f10:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4f14:	f002 fa18 	bl	b7348 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4f18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f1a:	6803      	ldr	r3, [r0, #0]
   b4f1c:	2100      	movs	r1, #0
   b4f1e:	689b      	ldr	r3, [r3, #8]
   b4f20:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4f22:	2601      	movs	r6, #1
    while(n--) {
   b4f24:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4f26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4f28:	d017      	beq.n	b4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4f2a:	2e1f      	cmp	r6, #31
   b4f2c:	d90c      	bls.n	b4f48 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4f2e:	f002 fa12 	bl	b7356 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4f32:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4f36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f38:	f002 fa06 	bl	b7348 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4f3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f3e:	6803      	ldr	r3, [r0, #0]
   b4f40:	2100      	movs	r1, #0
   b4f42:	689b      	ldr	r3, [r3, #8]
   b4f44:	4798      	blx	r3
        bytesOut = 1;
   b4f46:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4f48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f4a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4f4e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4f50:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4f52:	689b      	ldr	r3, [r3, #8]
   b4f54:	4798      	blx	r3
      bytesOut++;
   b4f56:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4f58:	e7e4      	b.n	b4f24 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4f5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4f5e:	f002 b9fa 	b.w	b7356 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4f62:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4f66:	4601      	mov	r1, r0
   b4f68:	b298      	uxth	r0, r3
   b4f6a:	f002 ffb6 	bl	b7eda <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4f6e:	42bd      	cmp	r5, r7
   b4f70:	d022      	beq.n	b4fb8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4f74:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4f78:	b118      	cbz	r0, b4f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4f7a:	4649      	mov	r1, r9
   b4f7c:	f002 fc8a 	bl	b7894 <_ZN8SPIClass8transferEh>
   b4f80:	e7f5      	b.n	b4f6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4f82:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4f84:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4f88:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4f8c:	ea09 0108 	and.w	r1, r9, r8
   b4f90:	b280      	uxth	r0, r0
   b4f92:	f002 ffa2 	bl	b7eda <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4f96:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f9a:	2101      	movs	r1, #1
   b4f9c:	b280      	uxth	r0, r0
   b4f9e:	f002 ff9c 	bl	b7eda <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4fa2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4fa6:	2100      	movs	r1, #0
   b4fa8:	b280      	uxth	r0, r0
   b4faa:	f002 ff96 	bl	b7eda <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4fae:	3e01      	subs	r6, #1
   b4fb0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4fb4:	d1e8      	bne.n	b4f88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4fb6:	e7da      	b.n	b4f6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4fbc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4fbc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4fc0:	1dda      	adds	r2, r3, #7
   b4fc2:	bf48      	it	mi
   b4fc4:	f103 020e 	addmi.w	r2, r3, #14
   b4fc8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4fcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4fce:	10d2      	asrs	r2, r2, #3
   b4fd0:	435a      	muls	r2, r3
   b4fd2:	2100      	movs	r1, #0
   b4fd4:	f003 b986 	b.w	b82e4 <memset>

000b4fd8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4fd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4fdc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4fde:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4fe0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4fe4:	4604      	mov	r4, r0
   b4fe6:	460f      	mov	r7, r1
   b4fe8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4fea:	b1c3      	cbz	r3, b501e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4fec:	4620      	mov	r0, r4
   b4fee:	f7ff ffe5 	bl	b4fbc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4ff2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4ff6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4ffa:	2820      	cmp	r0, #32
   b4ffc:	dc21      	bgt.n	b5042 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4ffe:	2320      	movs	r3, #32
   b5000:	2201      	movs	r2, #1
   b5002:	3820      	subs	r0, #32
   b5004:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5008:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b500c:	2373      	movs	r3, #115	; 0x73
   b500e:	3973      	subs	r1, #115	; 0x73
   b5010:	9300      	str	r3, [sp, #0]
   b5012:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5016:	4b89      	ldr	r3, [pc, #548]	; (b523c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5018:	f340 024f 	sbfx	r2, r0, #1, #16
   b501c:	e021      	b.n	b5062 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b501e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5022:	1dd8      	adds	r0, r3, #7
   b5024:	bf48      	it	mi
   b5026:	f103 000e 	addmi.w	r0, r3, #14
   b502a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b502e:	10c0      	asrs	r0, r0, #3
   b5030:	4358      	muls	r0, r3
   b5032:	f000 fe87 	bl	b5d44 <malloc>
   b5036:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5038:	2800      	cmp	r0, #0
   b503a:	d1d7      	bne.n	b4fec <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b503c:	b004      	add	sp, #16
   b503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5042:	3840      	subs	r0, #64	; 0x40
   b5044:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5048:	fa02 f280 	sxtah	r2, r2, r0
   b504c:	2340      	movs	r3, #64	; 0x40
   b504e:	2001      	movs	r0, #1
   b5050:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5054:	2352      	movs	r3, #82	; 0x52
   b5056:	3952      	subs	r1, #82	; 0x52
   b5058:	9300      	str	r3, [sp, #0]
   b505a:	4b79      	ldr	r3, [pc, #484]	; (b5240 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b505c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5060:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5062:	4620      	mov	r0, r4
   b5064:	f341 014f 	sbfx	r1, r1, #1, #16
   b5068:	f7ff fbac 	bl	b47c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b506c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b506e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5072:	2800      	cmp	r0, #0
   b5074:	d078      	beq.n	b5168 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5076:	2d00      	cmp	r5, #0
   b5078:	d174      	bne.n	b5164 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b507a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b507e:	2b20      	cmp	r3, #32
   b5080:	bf0c      	ite	eq
   b5082:	253c      	moveq	r5, #60	; 0x3c
   b5084:	253d      	movne	r5, #61	; 0x3d
   b5086:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b508a:	f1b8 0f00 	cmp.w	r8, #0
   b508e:	d001      	beq.n	b5094 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5090:	f002 f950 	bl	b7334 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5094:	b1fe      	cbz	r6, b50d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5096:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b509a:	2800      	cmp	r0, #0
   b509c:	db1b      	blt.n	b50d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b509e:	2101      	movs	r1, #1
   b50a0:	b280      	uxth	r0, r0
   b50a2:	f002 ff09 	bl	b7eb8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b50a6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50aa:	2101      	movs	r1, #1
   b50ac:	b280      	uxth	r0, r0
   b50ae:	f002 ff14 	bl	b7eda <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b50b2:	2001      	movs	r0, #1
   b50b4:	f000 fe86 	bl	b5dc4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b50b8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50bc:	2100      	movs	r1, #0
   b50be:	b280      	uxth	r0, r0
   b50c0:	f002 ff0b 	bl	b7eda <digitalWrite>
    delay(10);                  // Wait 10 ms
   b50c4:	200a      	movs	r0, #10
   b50c6:	f000 fe7d 	bl	b5dc4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b50ca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50ce:	2101      	movs	r1, #1
   b50d0:	b280      	uxth	r0, r0
   b50d2:	f002 ff02 	bl	b7eda <digitalWrite>
  TRANSACTION_START
   b50d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b50d8:	2800      	cmp	r0, #0
   b50da:	d074      	beq.n	b51c6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b50dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b50de:	f002 f925 	bl	b732c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b50e2:	2204      	movs	r2, #4
   b50e4:	4957      	ldr	r1, [pc, #348]	; (b5244 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b50e6:	4620      	mov	r0, r4
   b50e8:	f7ff ff0b 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b50ec:	8961      	ldrh	r1, [r4, #10]
   b50ee:	3901      	subs	r1, #1
   b50f0:	b2c9      	uxtb	r1, r1
   b50f2:	4620      	mov	r0, r4
   b50f4:	f7ff fe96 	bl	b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b50f8:	4953      	ldr	r1, [pc, #332]	; (b5248 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b50fa:	2204      	movs	r2, #4
   b50fc:	4620      	mov	r0, r4
   b50fe:	f7ff ff00 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5102:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5106:	2b01      	cmp	r3, #1
   b5108:	bf0c      	ite	eq
   b510a:	2110      	moveq	r1, #16
   b510c:	2114      	movne	r1, #20
   b510e:	4620      	mov	r0, r4
   b5110:	f7ff fe88 	bl	b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5114:	2204      	movs	r2, #4
   b5116:	494d      	ldr	r1, [pc, #308]	; (b524c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5118:	4620      	mov	r0, r4
   b511a:	f7ff fef2 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b511e:	68a3      	ldr	r3, [r4, #8]
   b5120:	4a4b      	ldr	r2, [pc, #300]	; (b5250 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5122:	4293      	cmp	r3, r2
   b5124:	d15c      	bne.n	b51e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5126:	494b      	ldr	r1, [pc, #300]	; (b5254 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5128:	2204      	movs	r2, #4
   b512a:	4620      	mov	r0, r4
   b512c:	f7ff fee9 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5130:	21d9      	movs	r1, #217	; 0xd9
   b5132:	4620      	mov	r0, r4
   b5134:	f7ff fe76 	bl	b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5138:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b513c:	2b01      	cmp	r3, #1
   b513e:	bf0c      	ite	eq
   b5140:	2122      	moveq	r1, #34	; 0x22
   b5142:	21f1      	movne	r1, #241	; 0xf1
   b5144:	4620      	mov	r0, r4
   b5146:	f7ff fe6d 	bl	b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b514a:	4620      	mov	r0, r4
   b514c:	4942      	ldr	r1, [pc, #264]	; (b5258 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b514e:	2206      	movs	r2, #6
   b5150:	f7ff fed7 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5154:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5156:	2800      	cmp	r0, #0
   b5158:	d063      	beq.n	b5222 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b515a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b515c:	f002 f8e6 	bl	b732c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5160:	2001      	movs	r0, #1
   b5162:	e76b      	b.n	b503c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5164:	b26d      	sxtb	r5, r5
   b5166:	e78e      	b.n	b5086 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5168:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b516c:	2101      	movs	r1, #1
   b516e:	b280      	uxth	r0, r0
   b5170:	f002 fea2 	bl	b7eb8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5174:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5178:	2101      	movs	r1, #1
   b517a:	b280      	uxth	r0, r0
   b517c:	f002 fe9c 	bl	b7eb8 <pinMode>
    SSD1306_DESELECT
   b5180:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5184:	2101      	movs	r1, #1
   b5186:	b280      	uxth	r0, r0
   b5188:	f002 fea7 	bl	b7eda <digitalWrite>
    if(spi) { // Hardware SPI
   b518c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b518e:	b13d      	cbz	r5, b51a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5190:	f1b8 0f00 	cmp.w	r8, #0
   b5194:	f43f af7e 	beq.w	b5094 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5198:	4628      	mov	r0, r5
   b519a:	f002 fadf 	bl	b775c <_ZN8SPIClass5beginEv>
   b519e:	e779      	b.n	b5094 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b51a0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b51a4:	2101      	movs	r1, #1
   b51a6:	b280      	uxth	r0, r0
   b51a8:	f002 fe86 	bl	b7eb8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b51ac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51b0:	2101      	movs	r1, #1
   b51b2:	b280      	uxth	r0, r0
   b51b4:	f002 fe80 	bl	b7eb8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b51b8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51bc:	4629      	mov	r1, r5
   b51be:	b280      	uxth	r0, r0
   b51c0:	f002 fe8b 	bl	b7eda <digitalWrite>
   b51c4:	e766      	b.n	b5094 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b51c8:	b118      	cbz	r0, b51d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b51ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b51ce:	f002 faf3 	bl	b77b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b51d2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b51d6:	2100      	movs	r1, #0
   b51d8:	b280      	uxth	r0, r0
   b51da:	f002 fe7e 	bl	b7eda <digitalWrite>
   b51de:	e780      	b.n	b50e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b51e0:	4a1e      	ldr	r2, [pc, #120]	; (b525c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b51e2:	4293      	cmp	r3, r2
   b51e4:	d10e      	bne.n	b5204 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b51e6:	491e      	ldr	r1, [pc, #120]	; (b5260 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b51e8:	2203      	movs	r2, #3
   b51ea:	4620      	mov	r0, r4
   b51ec:	f7ff fe89 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b51f0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b51f4:	2b01      	cmp	r3, #1
   b51f6:	bf0c      	ite	eq
   b51f8:	219f      	moveq	r1, #159	; 0x9f
   b51fa:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b51fc:	4620      	mov	r0, r4
   b51fe:	f7ff fe11 	bl	b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5202:	e795      	b.n	b5130 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5204:	4a17      	ldr	r2, [pc, #92]	; (b5264 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5206:	4293      	cmp	r3, r2
   b5208:	d192      	bne.n	b5130 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b520a:	4917      	ldr	r1, [pc, #92]	; (b5268 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b520c:	2203      	movs	r2, #3
   b520e:	4620      	mov	r0, r4
   b5210:	f7ff fe77 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5214:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5218:	2b01      	cmp	r3, #1
   b521a:	bf0c      	ite	eq
   b521c:	2110      	moveq	r1, #16
   b521e:	21af      	movne	r1, #175	; 0xaf
   b5220:	e7ec      	b.n	b51fc <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5222:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5226:	2101      	movs	r1, #1
   b5228:	b280      	uxth	r0, r0
   b522a:	f002 fe56 	bl	b7eda <digitalWrite>
   b522e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5230:	2800      	cmp	r0, #0
   b5232:	d095      	beq.n	b5160 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5234:	f002 faa6 	bl	b7784 <_ZN8SPIClass14endTransactionEv>
   b5238:	e792      	b.n	b5160 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b523a:	bf00      	nop
   b523c:	000b8ecc 	.word	0x000b8ecc
   b5240:	000b8c0c 	.word	0x000b8c0c
   b5244:	000b9114 	.word	0x000b9114
   b5248:	000b9118 	.word	0x000b9118
   b524c:	000b911c 	.word	0x000b911c
   b5250:	00200080 	.word	0x00200080
   b5254:	000b9126 	.word	0x000b9126
   b5258:	000b9120 	.word	0x000b9120
   b525c:	00400080 	.word	0x00400080
   b5260:	000b912a 	.word	0x000b912a
   b5264:	00100060 	.word	0x00100060
   b5268:	000b912d 	.word	0x000b912d

000b526c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b526c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b526e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5270:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5274:	db3d      	blt.n	b52f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5276:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b527a:	4294      	cmp	r4, r2
   b527c:	dd39      	ble.n	b52f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b527e:	2900      	cmp	r1, #0
      w += x;
   b5280:	bfbe      	ittt	lt
   b5282:	185b      	addlt	r3, r3, r1
   b5284:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5286:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5288:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b528c:	18ce      	adds	r6, r1, r3
   b528e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5290:	bfc4      	itt	gt
   b5292:	1a63      	subgt	r3, r4, r1
   b5294:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5296:	2b00      	cmp	r3, #0
   b5298:	dd2b      	ble.n	b52f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b529a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b529c:	10d6      	asrs	r6, r2, #3
   b529e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b52a2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b52a4:	f002 0007 	and.w	r0, r2, #7
   b52a8:	2201      	movs	r2, #1
   b52aa:	4082      	lsls	r2, r0
      switch(color) {
   b52ac:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b52ae:	b2d2      	uxtb	r2, r2
      switch(color) {
   b52b0:	d016      	beq.n	b52e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b52b2:	2d02      	cmp	r5, #2
   b52b4:	d00b      	beq.n	b52ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b52b6:	b9e5      	cbnz	r5, b52f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b52b8:	43d2      	mvns	r2, r2
   b52ba:	b2d2      	uxtb	r2, r2
   b52bc:	440b      	add	r3, r1
   b52be:	4299      	cmp	r1, r3
   b52c0:	d017      	beq.n	b52f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52c6:	4010      	ands	r0, r2
   b52c8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52cc:	e7f7      	b.n	b52be <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b52ce:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b52d0:	4299      	cmp	r1, r3
   b52d2:	d00e      	beq.n	b52f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52d4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52d8:	4050      	eors	r0, r2
   b52da:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52de:	e7f7      	b.n	b52d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b52e0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b52e2:	4299      	cmp	r1, r3
   b52e4:	d005      	beq.n	b52f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52e6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52ea:	4310      	orrs	r0, r2
   b52ec:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52f0:	e7f7      	b.n	b52e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b52f2:	bd70      	pop	{r4, r5, r6, pc}

000b52f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b52f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b52f6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b52f8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b52fc:	db76      	blt.n	b53ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b52fe:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5302:	42b1      	cmp	r1, r6
   b5304:	da72      	bge.n	b53ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5306:	2a00      	cmp	r2, #0
      __h += __y;
   b5308:	bfbe      	ittt	lt
   b530a:	189b      	addlt	r3, r3, r2
   b530c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b530e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5310:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5314:	18d7      	adds	r7, r2, r3
   b5316:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5318:	bfc4      	itt	gt
   b531a:	1aa3      	subgt	r3, r4, r2
   b531c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b531e:	2b00      	cmp	r3, #0
   b5320:	dd64      	ble.n	b53ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5322:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5326:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5328:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b532c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5330:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5332:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5336:	d023      	beq.n	b5380 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5338:	f1c2 0208 	rsb	r2, r2, #8
   b533c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b533e:	492d      	ldr	r1, [pc, #180]	; (b53f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5340:	4293      	cmp	r3, r2
   b5342:	bf3c      	itt	cc
   b5344:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5348:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b534c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b534e:	bf3c      	itt	cc
   b5350:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5354:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5358:	2d01      	cmp	r5, #1
   b535a:	d007      	beq.n	b536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b535c:	2d02      	cmp	r5, #2
   b535e:	d02e      	beq.n	b53be <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5360:	b94d      	cbnz	r5, b5376 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5362:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5366:	ea2c 0101 	bic.w	r1, ip, r1
   b536a:	e003      	b.n	b5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b536c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5370:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5374:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5376:	4293      	cmp	r3, r2
   b5378:	d338      	bcc.n	b53ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b537a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b537e:	440c      	add	r4, r1
        h -= mod;
   b5380:	1a9a      	subs	r2, r3, r2
   b5382:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5384:	2a07      	cmp	r2, #7
   b5386:	d90e      	bls.n	b53a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5388:	2d02      	cmp	r5, #2
   b538a:	d11d      	bne.n	b53c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b538c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b538e:	7821      	ldrb	r1, [r4, #0]
   b5390:	43c9      	mvns	r1, r1
   b5392:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5394:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5396:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b539a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b539c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b539e:	440c      	add	r4, r1
            } while(h >= 8);
   b53a0:	d8f5      	bhi.n	b538e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b53a2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b53a6:	b30a      	cbz	r2, b53ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b53a8:	4b13      	ldr	r3, [pc, #76]	; (b53f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b53aa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b53ac:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b53ae:	d01a      	beq.n	b53e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b53b0:	2d02      	cmp	r5, #2
   b53b2:	d01c      	beq.n	b53ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b53b4:	b9d5      	cbnz	r5, b53ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b53b6:	7822      	ldrb	r2, [r4, #0]
   b53b8:	ea22 0303 	bic.w	r3, r2, r3
   b53bc:	e015      	b.n	b53ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b53be:	f817 c006 	ldrb.w	ip, [r7, r6]
   b53c2:	ea81 010c 	eor.w	r1, r1, ip
   b53c6:	e7d5      	b.n	b5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b53c8:	1e29      	subs	r1, r5, #0
   b53ca:	bf18      	it	ne
   b53cc:	2101      	movne	r1, #1
   b53ce:	4249      	negs	r1, r1
   b53d0:	b2c9      	uxtb	r1, r1
   b53d2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b53d4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b53d6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b53d8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b53dc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b53de:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b53e0:	4434      	add	r4, r6
            } while(h >= 8);
   b53e2:	d8f7      	bhi.n	b53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b53e4:	e7dd      	b.n	b53a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b53e6:	7822      	ldrb	r2, [r4, #0]
   b53e8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b53ea:	7023      	strb	r3, [r4, #0]
}
   b53ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b53ee:	7822      	ldrb	r2, [r4, #0]
   b53f0:	4053      	eors	r3, r2
   b53f2:	e7fa      	b.n	b53ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b53f4:	000b9104 	.word	0x000b9104
   b53f8:	000b910c 	.word	0x000b910c

000b53fc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b53fc:	b470      	push	{r4, r5, r6}
   b53fe:	4614      	mov	r4, r2
  switch(rotation) {
   b5400:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5402:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5406:	2a02      	cmp	r2, #2
   b5408:	d00d      	beq.n	b5426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b540a:	2a03      	cmp	r2, #3
   b540c:	d018      	beq.n	b5440 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b540e:	2a01      	cmp	r2, #1
   b5410:	d111      	bne.n	b5436 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5412:	8902      	ldrh	r2, [r0, #8]
   b5414:	43e4      	mvns	r4, r4
   b5416:	4414      	add	r4, r2
   b5418:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b541a:	9603      	str	r6, [sp, #12]
   b541c:	460a      	mov	r2, r1
   b541e:	4621      	mov	r1, r4
}
   b5420:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5422:	f7ff bf67 	b.w	b52f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5426:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5428:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b542a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b542c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b542e:	4414      	add	r4, r2
    x -= (w-1);
   b5430:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5432:	b224      	sxth	r4, r4
    x -= (w-1);
   b5434:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5436:	9603      	str	r6, [sp, #12]
   b5438:	4622      	mov	r2, r4
}
   b543a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b543c:	f7ff bf16 	b.w	b526c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5440:	8945      	ldrh	r5, [r0, #10]
   b5442:	4419      	add	r1, r3
   b5444:	1a69      	subs	r1, r5, r1
   b5446:	b209      	sxth	r1, r1
    break;
   b5448:	e7e7      	b.n	b541a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b544a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b544a:	b430      	push	{r4, r5}
   b544c:	4614      	mov	r4, r2
  switch(rotation) {
   b544e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5450:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5454:	2a02      	cmp	r2, #2
   b5456:	d00d      	beq.n	b5474 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5458:	2a03      	cmp	r2, #3
   b545a:	d018      	beq.n	b548e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b545c:	2a01      	cmp	r2, #1
   b545e:	d111      	bne.n	b5484 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5460:	18e2      	adds	r2, r4, r3
   b5462:	8904      	ldrh	r4, [r0, #8]
   b5464:	1aa4      	subs	r4, r4, r2
   b5466:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5468:	9502      	str	r5, [sp, #8]
   b546a:	460a      	mov	r2, r1
   b546c:	4621      	mov	r1, r4
}
   b546e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5470:	f7ff befc 	b.w	b526c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5474:	8902      	ldrh	r2, [r0, #8]
   b5476:	43c9      	mvns	r1, r1
   b5478:	4411      	add	r1, r2
    y -= (h-1);
   b547a:	18e2      	adds	r2, r4, r3
   b547c:	8944      	ldrh	r4, [r0, #10]
   b547e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5480:	b209      	sxth	r1, r1
    y -= (h-1);
   b5482:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5484:	9502      	str	r5, [sp, #8]
   b5486:	4622      	mov	r2, r4
}
   b5488:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b548a:	f7ff bf33 	b.w	b52f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b548e:	8942      	ldrh	r2, [r0, #10]
   b5490:	43c9      	mvns	r1, r1
   b5492:	4411      	add	r1, r2
   b5494:	b209      	sxth	r1, r1
    break;
   b5496:	e7e7      	b.n	b5468 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5498 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b549c:	4604      	mov	r4, r0
  TRANSACTION_START
   b549e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b54a0:	2800      	cmp	r0, #0
   b54a2:	d042      	beq.n	b552a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b54a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b54a6:	f001 ff41 	bl	b732c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b54aa:	4947      	ldr	r1, [pc, #284]	; (b55c8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b54ac:	2205      	movs	r2, #5
   b54ae:	4620      	mov	r0, r4
   b54b0:	f7ff fd27 	bl	b4f02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b54b4:	8921      	ldrh	r1, [r4, #8]
   b54b6:	3901      	subs	r1, #1
   b54b8:	4620      	mov	r0, r4
   b54ba:	b2c9      	uxtb	r1, r1
   b54bc:	f7ff fcb2 	bl	b4e24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b54c0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b54c4:	1dde      	adds	r6, r3, #7
   b54c6:	bf48      	it	mi
   b54c8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b54cc:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b54d0:	8923      	ldrh	r3, [r4, #8]
   b54d2:	10f6      	asrs	r6, r6, #3
   b54d4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b54d8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b54dc:	2800      	cmp	r0, #0
   b54de:	d03a      	beq.n	b5556 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b54e0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b54e4:	f001 ff30 	bl	b7348 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b54e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b54ea:	6803      	ldr	r3, [r0, #0]
   b54ec:	2140      	movs	r1, #64	; 0x40
   b54ee:	689b      	ldr	r3, [r3, #8]
   b54f0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b54f2:	2701      	movs	r7, #1
    while(count--) {
   b54f4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b54f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b54f8:	d024      	beq.n	b5544 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b54fa:	2f1f      	cmp	r7, #31
   b54fc:	d90c      	bls.n	b5518 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b54fe:	f001 ff2a 	bl	b7356 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5502:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5506:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5508:	f001 ff1e 	bl	b7348 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b550c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b550e:	6803      	ldr	r3, [r0, #0]
   b5510:	2140      	movs	r1, #64	; 0x40
   b5512:	689b      	ldr	r3, [r3, #8]
   b5514:	4798      	blx	r3
        bytesOut = 1;
   b5516:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5518:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b551a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b551e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5520:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5522:	689b      	ldr	r3, [r3, #8]
   b5524:	4798      	blx	r3
      bytesOut++;
   b5526:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5528:	e7e4      	b.n	b54f4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b552a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b552c:	b118      	cbz	r0, b5536 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b552e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5532:	f002 f941 	bl	b77b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5536:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b553a:	2100      	movs	r1, #0
   b553c:	b280      	uxth	r0, r0
   b553e:	f002 fccc 	bl	b7eda <digitalWrite>
   b5542:	e7b2      	b.n	b54aa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5544:	f001 ff07 	bl	b7356 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b554a:	b378      	cbz	r0, b55ac <_ZN16Adafruit_SSD13067displayEv+0x114>
   b554c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b554e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5552:	f001 beeb 	b.w	b732c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5556:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b555a:	2101      	movs	r1, #1
   b555c:	b280      	uxth	r0, r0
   b555e:	f002 fcbc 	bl	b7eda <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5562:	42ae      	cmp	r6, r5
   b5564:	d0f0      	beq.n	b5548 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5566:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5568:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b556c:	b118      	cbz	r0, b5576 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b556e:	4649      	mov	r1, r9
   b5570:	f002 f990 	bl	b7894 <_ZN8SPIClass8transferEh>
   b5574:	e7f5      	b.n	b5562 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5576:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5578:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b557c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5580:	ea09 0108 	and.w	r1, r9, r8
   b5584:	b280      	uxth	r0, r0
   b5586:	f002 fca8 	bl	b7eda <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b558a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b558e:	2101      	movs	r1, #1
   b5590:	b280      	uxth	r0, r0
   b5592:	f002 fca2 	bl	b7eda <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5596:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b559a:	2100      	movs	r1, #0
   b559c:	b280      	uxth	r0, r0
   b559e:	f002 fc9c 	bl	b7eda <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b55a2:	3f01      	subs	r7, #1
   b55a4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b55a8:	d1e8      	bne.n	b557c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b55aa:	e7da      	b.n	b5562 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b55ac:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b55b0:	2101      	movs	r1, #1
   b55b2:	b280      	uxth	r0, r0
   b55b4:	f002 fc91 	bl	b7eda <digitalWrite>
   b55b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b55ba:	b118      	cbz	r0, b55c4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b55bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b55c0:	f002 b8e0 	b.w	b7784 <_ZN8SPIClass14endTransactionEv>
}
   b55c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b55c8:	000b9130 	.word	0x000b9130

000b55cc <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b55cc:	2100      	movs	r1, #0
   b55ce:	220a      	movs	r2, #10
   b55d0:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b55d4:	4770      	bx	lr

000b55d6 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b55d6:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b55d8:	b510      	push	{r4, lr}
   b55da:	4604      	mov	r4, r0
    this->pin = pin;
   b55dc:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b55de:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b55e0:	b288      	uxth	r0, r1
   b55e2:	f002 fc93 	bl	b7f0c <digitalRead>
   b55e6:	b108      	cbz	r0, b55ec <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b55e8:	2303      	movs	r3, #3
   b55ea:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b55ec:	f000 f98e 	bl	b590c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b55f0:	6020      	str	r0, [r4, #0]
#endif
}
   b55f2:	bd10      	pop	{r4, pc}

000b55f4 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b55f4:	b538      	push	{r3, r4, r5, lr}
   b55f6:	460c      	mov	r4, r1
   b55f8:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b55fa:	4611      	mov	r1, r2
   b55fc:	b2a0      	uxth	r0, r4
   b55fe:	f002 fc5b 	bl	b7eb8 <pinMode>
  
  this->attach(pin);
   b5602:	4621      	mov	r1, r4
   b5604:	4628      	mov	r0, r5
}
   b5606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b560a:	f7ff bfe4 	b.w	b55d6 <_ZN8Debounce6attachEi>

000b560e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b560e:	b538      	push	{r3, r4, r5, lr}
   b5610:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5612:	79c0      	ldrb	r0, [r0, #7]
   b5614:	f002 fc7a 	bl	b7f0c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5618:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b561a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b561c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5620:	bf18      	it	ne
   b5622:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5624:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5628:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b562a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b562c:	d00a      	beq.n	b5644 <_ZN8Debounce6updateEv+0x36>
   b562e:	f000 f96d 	bl	b590c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5632:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5634:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5636:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b563a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b563c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b563e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5642:	bd38      	pop	{r3, r4, r5, pc}
   b5644:	f000 f962 	bl	b590c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5648:	6823      	ldr	r3, [r4, #0]
   b564a:	1ac0      	subs	r0, r0, r3
   b564c:	88a3      	ldrh	r3, [r4, #4]
   b564e:	4298      	cmp	r0, r3
   b5650:	d3f4      	bcc.n	b563c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5652:	79a3      	ldrb	r3, [r4, #6]
   b5654:	f003 0301 	and.w	r3, r3, #1
   b5658:	42ab      	cmp	r3, r5
   b565a:	d0ef      	beq.n	b563c <_ZN8Debounce6updateEv+0x2e>
   b565c:	f000 f956 	bl	b590c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5660:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5662:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5664:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5668:	f043 0308 	orr.w	r3, r3, #8
   b566c:	e7e5      	b.n	b563a <_ZN8Debounce6updateEv+0x2c>
	...

000b5670 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5670:	b510      	push	{r4, lr}
   b5672:	4b06      	ldr	r3, [pc, #24]	; (b568c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5674:	6003      	str	r3, [r0, #0]
   b5676:	4604      	mov	r4, r0
	if (mutex) {
   b5678:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b567a:	b108      	cbz	r0, b5680 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b567c:	f000 f916 	bl	b58ac <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5680:	4620      	mov	r0, r4
   b5682:	f7ff fb29 	bl	b4cd8 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5686:	4620      	mov	r0, r4
   b5688:	bd10      	pop	{r4, pc}
   b568a:	bf00      	nop
   b568c:	000b9140 	.word	0x000b9140

000b5690 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5690:	b510      	push	{r4, lr}
   b5692:	4604      	mov	r4, r0
}
   b5694:	f7ff ffec 	bl	b5670 <_ZN16OledWingAdafruitD1Ev>
   b5698:	4620      	mov	r0, r4
   b569a:	2170      	movs	r1, #112	; 0x70
   b569c:	f7fe fd0f 	bl	b40be <_ZdlPvj>
   b56a0:	4620      	mov	r0, r4
   b56a2:	bd10      	pop	{r4, pc}

000b56a4 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b56a4:	b530      	push	{r4, r5, lr}
   b56a6:	b085      	sub	sp, #20
   b56a8:	4604      	mov	r4, r0
   b56aa:	460d      	mov	r5, r1
   b56ac:	f002 fc5c 	bl	b7f68 <_Z19__fetch_global_Wirev>
   b56b0:	4a10      	ldr	r2, [pc, #64]	; (b56f4 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b56b2:	4911      	ldr	r1, [pc, #68]	; (b56f8 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b56b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b56b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b56bc:	2180      	movs	r1, #128	; 0x80
   b56be:	4603      	mov	r3, r0
   b56c0:	9200      	str	r2, [sp, #0]
   b56c2:	4620      	mov	r0, r4
   b56c4:	2220      	movs	r2, #32
   b56c6:	f7ff fb7f 	bl	b4dc8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b56ca:	4b0c      	ldr	r3, [pc, #48]	; (b56fc <_ZN16OledWingAdafruitC1Ei+0x58>)
   b56cc:	6023      	str	r3, [r4, #0]
   b56ce:	2300      	movs	r3, #0
   b56d0:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b56d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b56d8:	f7ff ff78 	bl	b55cc <_ZN8DebounceC1Ev>
   b56dc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b56e0:	f7ff ff74 	bl	b55cc <_ZN8DebounceC1Ev>
   b56e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b56e8:	f7ff ff70 	bl	b55cc <_ZN8DebounceC1Ev>
}
   b56ec:	4620      	mov	r0, r4
   b56ee:	b005      	add	sp, #20
   b56f0:	bd30      	pop	{r4, r5, pc}
   b56f2:	bf00      	nop
   b56f4:	00061a80 	.word	0x00061a80
   b56f8:	000186a0 	.word	0x000186a0
   b56fc:	000b9140 	.word	0x000b9140

000b5700 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5700:	b513      	push	{r0, r1, r4, lr}
   b5702:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5704:	3050      	adds	r0, #80	; 0x50
   b5706:	f000 f8c9 	bl	b589c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b570a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b570c:	07d9      	lsls	r1, r3, #31
   b570e:	d505      	bpl.n	b571c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5710:	2202      	movs	r2, #2
   b5712:	2104      	movs	r1, #4
   b5714:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5718:	f7ff ff6c 	bl	b55f4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b571c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b571e:	079a      	lsls	r2, r3, #30
   b5720:	d505      	bpl.n	b572e <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5722:	2200      	movs	r2, #0
   b5724:	2103      	movs	r1, #3
   b5726:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b572a:	f7ff ff63 	bl	b55f4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b572e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5730:	075b      	lsls	r3, r3, #29
   b5732:	d505      	bpl.n	b5740 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5734:	2202      	movs	r2, #2
   b5736:	4611      	mov	r1, r2
   b5738:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b573c:	f7ff ff5a 	bl	b55f4 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5740:	2301      	movs	r3, #1
   b5742:	9300      	str	r3, [sp, #0]
   b5744:	223c      	movs	r2, #60	; 0x3c
   b5746:	2102      	movs	r1, #2
   b5748:	4620      	mov	r0, r4
   b574a:	f7ff fc45 	bl	b4fd8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b574e:	b002      	add	sp, #8
   b5750:	bd10      	pop	{r4, pc}

000b5752 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5752:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5754:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5756:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5758:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b575a:	d502      	bpl.n	b5762 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b575c:	3058      	adds	r0, #88	; 0x58
   b575e:	f7ff ff56 	bl	b560e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5762:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5764:	079a      	lsls	r2, r3, #30
   b5766:	d503      	bpl.n	b5770 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5768:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b576c:	f7ff ff4f 	bl	b560e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5770:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5772:	075b      	lsls	r3, r3, #29
   b5774:	d505      	bpl.n	b5782 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5776:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b577e:	f7ff bf46 	b.w	b560e <_ZN8Debounce6updateEv>
}
   b5782:	bd10      	pop	{r4, pc}

000b5784 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <hal_ble_stack_init+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	689b      	ldr	r3, [r3, #8]
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	00030278 	.word	0x00030278

000b5794 <hal_ble_gap_set_device_name>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
DYNALIB_FN(8, hal_ble, hal_ble_gap_set_device_name, int(const char*, size_t, void*))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <hal_ble_gap_set_device_name+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	6a1b      	ldr	r3, [r3, #32]
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	00030278 	.word	0x00030278

000b57a4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <hal_ble_gap_set_advertising_data+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	00030278 	.word	0x00030278

000b57b4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <hal_ble_gap_set_scan_response_data+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	00030278 	.word	0x00030278

000b57c4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <hal_ble_gap_start_advertising+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	00030278 	.word	0x00030278

000b57d4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b03      	ldr	r3, [pc, #12]	; (b57e4 <hal_ble_gap_disconnect+0x10>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b57de:	9301      	str	r3, [sp, #4]
   b57e0:	bd08      	pop	{r3, pc}
   b57e2:	0000      	.short	0x0000
   b57e4:	00030278 	.word	0x00030278

000b57e8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b03      	ldr	r3, [pc, #12]	; (b57f8 <hal_ble_gatt_server_add_service+0x10>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b57f2:	9301      	str	r3, [sp, #4]
   b57f4:	bd08      	pop	{r3, pc}
   b57f6:	0000      	.short	0x0000
   b57f8:	00030278 	.word	0x00030278

000b57fc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b57fc:	b508      	push	{r3, lr}
   b57fe:	4b03      	ldr	r3, [pc, #12]	; (b580c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5800:	681b      	ldr	r3, [r3, #0]
   b5802:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5806:	9301      	str	r3, [sp, #4]
   b5808:	bd08      	pop	{r3, pc}
   b580a:	0000      	.short	0x0000
   b580c:	00030278 	.word	0x00030278

000b5810 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5810:	b508      	push	{r3, lr}
   b5812:	4b03      	ldr	r3, [pc, #12]	; (b5820 <hal_ble_gatt_client_write_with_response+0x10>)
   b5814:	681b      	ldr	r3, [r3, #0]
   b5816:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b581a:	9301      	str	r3, [sp, #4]
   b581c:	bd08      	pop	{r3, pc}
   b581e:	0000      	.short	0x0000
   b5820:	00030278 	.word	0x00030278

000b5824 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b03      	ldr	r3, [pc, #12]	; (b5834 <hal_ble_gatt_client_write_without_response+0x10>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b582e:	9301      	str	r3, [sp, #4]
   b5830:	bd08      	pop	{r3, pc}
   b5832:	0000      	.short	0x0000
   b5834:	00030278 	.word	0x00030278

000b5838 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b03      	ldr	r3, [pc, #12]	; (b5848 <hal_ble_gap_get_connection_info+0x10>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b5842:	9301      	str	r3, [sp, #4]
   b5844:	bd08      	pop	{r3, pc}
   b5846:	0000      	.short	0x0000
   b5848:	00030278 	.word	0x00030278

000b584c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b584c:	b508      	push	{r3, lr}
   b584e:	4b03      	ldr	r3, [pc, #12]	; (b585c <hal_ble_gatt_server_add_characteristic+0x10>)
   b5850:	681b      	ldr	r3, [r3, #0]
   b5852:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5856:	9301      	str	r3, [sp, #4]
   b5858:	bd08      	pop	{r3, pc}
   b585a:	0000      	.short	0x0000
   b585c:	00030278 	.word	0x00030278

000b5860 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5860:	b508      	push	{r3, lr}
   b5862:	4b03      	ldr	r3, [pc, #12]	; (b5870 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5864:	681b      	ldr	r3, [r3, #0]
   b5866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b586a:	9301      	str	r3, [sp, #4]
   b586c:	bd08      	pop	{r3, pc}
   b586e:	0000      	.short	0x0000
   b5870:	00030278 	.word	0x00030278

000b5874 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5874:	b508      	push	{r3, lr}
   b5876:	4b03      	ldr	r3, [pc, #12]	; (b5884 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b587e:	9301      	str	r3, [sp, #4]
   b5880:	bd08      	pop	{r3, pc}
   b5882:	0000      	.short	0x0000
   b5884:	00030278 	.word	0x00030278

000b5888 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b03      	ldr	r3, [pc, #12]	; (b5898 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5892:	9301      	str	r3, [sp, #4]
   b5894:	bd08      	pop	{r3, pc}
   b5896:	0000      	.short	0x0000
   b5898:	00030278 	.word	0x00030278

000b589c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <os_mutex_create+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	00030248 	.word	0x00030248

000b58ac <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <os_mutex_destroy+0xc>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b58b4:	9301      	str	r3, [sp, #4]
   b58b6:	bd08      	pop	{r3, pc}
   b58b8:	00030248 	.word	0x00030248

000b58bc <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b58bc:	b508      	push	{r3, lr}
   b58be:	4b02      	ldr	r3, [pc, #8]	; (b58c8 <os_mutex_recursive_create+0xc>)
   b58c0:	681b      	ldr	r3, [r3, #0]
   b58c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58c4:	9301      	str	r3, [sp, #4]
   b58c6:	bd08      	pop	{r3, pc}
   b58c8:	00030248 	.word	0x00030248

000b58cc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b02      	ldr	r3, [pc, #8]	; (b58d8 <os_mutex_recursive_lock+0xc>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b58d4:	9301      	str	r3, [sp, #4]
   b58d6:	bd08      	pop	{r3, pc}
   b58d8:	00030248 	.word	0x00030248

000b58dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <os_mutex_recursive_unlock+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	00030248 	.word	0x00030248

000b58ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <HAL_RNG_GetRandomNumber+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	685b      	ldr	r3, [r3, #4]
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	00030218 	.word	0x00030218

000b58fc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b58fc:	b508      	push	{r3, lr}
   b58fe:	4b02      	ldr	r3, [pc, #8]	; (b5908 <HAL_Delay_Microseconds+0xc>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	68db      	ldr	r3, [r3, #12]
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	bd08      	pop	{r3, pc}
   b5908:	00030218 	.word	0x00030218

000b590c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	695b      	ldr	r3, [r3, #20]
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	00030218 	.word	0x00030218

000b591c <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b02      	ldr	r3, [pc, #8]	; (b5928 <hal_gpio_mode+0xc>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	689b      	ldr	r3, [r3, #8]
   b5924:	9301      	str	r3, [sp, #4]
   b5926:	bd08      	pop	{r3, pc}
   b5928:	0003022c 	.word	0x0003022c

000b592c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b592c:	b508      	push	{r3, lr}
   b592e:	4b02      	ldr	r3, [pc, #8]	; (b5938 <hal_gpio_get_mode+0xc>)
   b5930:	681b      	ldr	r3, [r3, #0]
   b5932:	68db      	ldr	r3, [r3, #12]
   b5934:	9301      	str	r3, [sp, #4]
   b5936:	bd08      	pop	{r3, pc}
   b5938:	0003022c 	.word	0x0003022c

000b593c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b593c:	b508      	push	{r3, lr}
   b593e:	4b02      	ldr	r3, [pc, #8]	; (b5948 <hal_gpio_write+0xc>)
   b5940:	681b      	ldr	r3, [r3, #0]
   b5942:	691b      	ldr	r3, [r3, #16]
   b5944:	9301      	str	r3, [sp, #4]
   b5946:	bd08      	pop	{r3, pc}
   b5948:	0003022c 	.word	0x0003022c

000b594c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b594c:	b508      	push	{r3, lr}
   b594e:	4b02      	ldr	r3, [pc, #8]	; (b5958 <hal_gpio_read+0xc>)
   b5950:	681b      	ldr	r3, [r3, #0]
   b5952:	695b      	ldr	r3, [r3, #20]
   b5954:	9301      	str	r3, [sp, #4]
   b5956:	bd08      	pop	{r3, pc}
   b5958:	0003022c 	.word	0x0003022c

000b595c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b595c:	b508      	push	{r3, lr}
   b595e:	4b02      	ldr	r3, [pc, #8]	; (b5968 <hal_i2c_set_speed+0xc>)
   b5960:	681b      	ldr	r3, [r3, #0]
   b5962:	681b      	ldr	r3, [r3, #0]
   b5964:	9301      	str	r3, [sp, #4]
   b5966:	bd08      	pop	{r3, pc}
   b5968:	00030228 	.word	0x00030228

000b596c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b596c:	b508      	push	{r3, lr}
   b596e:	4b02      	ldr	r3, [pc, #8]	; (b5978 <hal_i2c_begin+0xc>)
   b5970:	681b      	ldr	r3, [r3, #0]
   b5972:	68db      	ldr	r3, [r3, #12]
   b5974:	9301      	str	r3, [sp, #4]
   b5976:	bd08      	pop	{r3, pc}
   b5978:	00030228 	.word	0x00030228

000b597c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b597c:	b508      	push	{r3, lr}
   b597e:	4b02      	ldr	r3, [pc, #8]	; (b5988 <hal_i2c_begin_transmission+0xc>)
   b5980:	681b      	ldr	r3, [r3, #0]
   b5982:	699b      	ldr	r3, [r3, #24]
   b5984:	9301      	str	r3, [sp, #4]
   b5986:	bd08      	pop	{r3, pc}
   b5988:	00030228 	.word	0x00030228

000b598c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b598c:	b508      	push	{r3, lr}
   b598e:	4b02      	ldr	r3, [pc, #8]	; (b5998 <hal_i2c_end_transmission+0xc>)
   b5990:	681b      	ldr	r3, [r3, #0]
   b5992:	69db      	ldr	r3, [r3, #28]
   b5994:	9301      	str	r3, [sp, #4]
   b5996:	bd08      	pop	{r3, pc}
   b5998:	00030228 	.word	0x00030228

000b599c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b599c:	b508      	push	{r3, lr}
   b599e:	4b02      	ldr	r3, [pc, #8]	; (b59a8 <hal_i2c_write+0xc>)
   b59a0:	681b      	ldr	r3, [r3, #0]
   b59a2:	6a1b      	ldr	r3, [r3, #32]
   b59a4:	9301      	str	r3, [sp, #4]
   b59a6:	bd08      	pop	{r3, pc}
   b59a8:	00030228 	.word	0x00030228

000b59ac <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b59ac:	b508      	push	{r3, lr}
   b59ae:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <hal_i2c_available+0xc>)
   b59b0:	681b      	ldr	r3, [r3, #0]
   b59b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b59b4:	9301      	str	r3, [sp, #4]
   b59b6:	bd08      	pop	{r3, pc}
   b59b8:	00030228 	.word	0x00030228

000b59bc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b59bc:	b508      	push	{r3, lr}
   b59be:	4b02      	ldr	r3, [pc, #8]	; (b59c8 <hal_i2c_read+0xc>)
   b59c0:	681b      	ldr	r3, [r3, #0]
   b59c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b59c4:	9301      	str	r3, [sp, #4]
   b59c6:	bd08      	pop	{r3, pc}
   b59c8:	00030228 	.word	0x00030228

000b59cc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b59cc:	b508      	push	{r3, lr}
   b59ce:	4b02      	ldr	r3, [pc, #8]	; (b59d8 <hal_i2c_peek+0xc>)
   b59d0:	681b      	ldr	r3, [r3, #0]
   b59d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59d4:	9301      	str	r3, [sp, #4]
   b59d6:	bd08      	pop	{r3, pc}
   b59d8:	00030228 	.word	0x00030228

000b59dc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b59dc:	b508      	push	{r3, lr}
   b59de:	4b02      	ldr	r3, [pc, #8]	; (b59e8 <hal_i2c_flush+0xc>)
   b59e0:	681b      	ldr	r3, [r3, #0]
   b59e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b59e4:	9301      	str	r3, [sp, #4]
   b59e6:	bd08      	pop	{r3, pc}
   b59e8:	00030228 	.word	0x00030228

000b59ec <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b59ec:	b508      	push	{r3, lr}
   b59ee:	4b02      	ldr	r3, [pc, #8]	; (b59f8 <hal_i2c_is_enabled+0xc>)
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b59f4:	9301      	str	r3, [sp, #4]
   b59f6:	bd08      	pop	{r3, pc}
   b59f8:	00030228 	.word	0x00030228

000b59fc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b59fc:	b508      	push	{r3, lr}
   b59fe:	4b02      	ldr	r3, [pc, #8]	; (b5a08 <hal_i2c_init+0xc>)
   b5a00:	681b      	ldr	r3, [r3, #0]
   b5a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a04:	9301      	str	r3, [sp, #4]
   b5a06:	bd08      	pop	{r3, pc}
   b5a08:	00030228 	.word	0x00030228

000b5a0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <inet_inet_ntop+0xc>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	695b      	ldr	r3, [r3, #20]
   b5a14:	9301      	str	r3, [sp, #4]
   b5a16:	bd08      	pop	{r3, pc}
   b5a18:	00030264 	.word	0x00030264

000b5a1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <netdb_freeaddrinfo+0xc>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	689b      	ldr	r3, [r3, #8]
   b5a24:	9301      	str	r3, [sp, #4]
   b5a26:	bd08      	pop	{r3, pc}
   b5a28:	00030268 	.word	0x00030268

000b5a2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a2c:	b508      	push	{r3, lr}
   b5a2e:	4b02      	ldr	r3, [pc, #8]	; (b5a38 <netdb_getaddrinfo+0xc>)
   b5a30:	681b      	ldr	r3, [r3, #0]
   b5a32:	68db      	ldr	r3, [r3, #12]
   b5a34:	9301      	str	r3, [sp, #4]
   b5a36:	bd08      	pop	{r3, pc}
   b5a38:	00030268 	.word	0x00030268

000b5a3c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5a3c:	b508      	push	{r3, lr}
   b5a3e:	4b02      	ldr	r3, [pc, #8]	; (b5a48 <hal_spi_begin+0xc>)
   b5a40:	681b      	ldr	r3, [r3, #0]
   b5a42:	681b      	ldr	r3, [r3, #0]
   b5a44:	9301      	str	r3, [sp, #4]
   b5a46:	bd08      	pop	{r3, pc}
   b5a48:	00030230 	.word	0x00030230

000b5a4c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5a4c:	b508      	push	{r3, lr}
   b5a4e:	4b02      	ldr	r3, [pc, #8]	; (b5a58 <hal_spi_transfer+0xc>)
   b5a50:	681b      	ldr	r3, [r3, #0]
   b5a52:	695b      	ldr	r3, [r3, #20]
   b5a54:	9301      	str	r3, [sp, #4]
   b5a56:	bd08      	pop	{r3, pc}
   b5a58:	00030230 	.word	0x00030230

000b5a5c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5a5c:	b508      	push	{r3, lr}
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <hal_spi_init+0xc>)
   b5a60:	681b      	ldr	r3, [r3, #0]
   b5a62:	69db      	ldr	r3, [r3, #28]
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	bd08      	pop	{r3, pc}
   b5a68:	00030230 	.word	0x00030230

000b5a6c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <hal_spi_is_enabled+0xc>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	6a1b      	ldr	r3, [r3, #32]
   b5a74:	9301      	str	r3, [sp, #4]
   b5a76:	bd08      	pop	{r3, pc}
   b5a78:	00030230 	.word	0x00030230

000b5a7c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5a7c:	b508      	push	{r3, lr}
   b5a7e:	4b02      	ldr	r3, [pc, #8]	; (b5a88 <hal_spi_info+0xc>)
   b5a80:	681b      	ldr	r3, [r3, #0]
   b5a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5a84:	9301      	str	r3, [sp, #4]
   b5a86:	bd08      	pop	{r3, pc}
   b5a88:	00030230 	.word	0x00030230

000b5a8c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5a8c:	b508      	push	{r3, lr}
   b5a8e:	4b02      	ldr	r3, [pc, #8]	; (b5a98 <hal_spi_set_settings+0xc>)
   b5a90:	681b      	ldr	r3, [r3, #0]
   b5a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5a94:	9301      	str	r3, [sp, #4]
   b5a96:	bd08      	pop	{r3, pc}
   b5a98:	00030230 	.word	0x00030230

000b5a9c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5a9c:	b508      	push	{r3, lr}
   b5a9e:	4b02      	ldr	r3, [pc, #8]	; (b5aa8 <hal_spi_acquire+0xc>)
   b5aa0:	681b      	ldr	r3, [r3, #0]
   b5aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5aa4:	9301      	str	r3, [sp, #4]
   b5aa6:	bd08      	pop	{r3, pc}
   b5aa8:	00030230 	.word	0x00030230

000b5aac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5aac:	b508      	push	{r3, lr}
   b5aae:	4b02      	ldr	r3, [pc, #8]	; (b5ab8 <hal_spi_release+0xc>)
   b5ab0:	681b      	ldr	r3, [r3, #0]
   b5ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ab4:	9301      	str	r3, [sp, #4]
   b5ab6:	bd08      	pop	{r3, pc}
   b5ab8:	00030230 	.word	0x00030230

000b5abc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5abc:	b508      	push	{r3, lr}
   b5abe:	4b02      	ldr	r3, [pc, #8]	; (b5ac8 <hal_usart_write+0xc>)
   b5ac0:	681b      	ldr	r3, [r3, #0]
   b5ac2:	68db      	ldr	r3, [r3, #12]
   b5ac4:	9301      	str	r3, [sp, #4]
   b5ac6:	bd08      	pop	{r3, pc}
   b5ac8:	0003023c 	.word	0x0003023c

000b5acc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5acc:	b508      	push	{r3, lr}
   b5ace:	4b02      	ldr	r3, [pc, #8]	; (b5ad8 <hal_usart_available+0xc>)
   b5ad0:	681b      	ldr	r3, [r3, #0]
   b5ad2:	691b      	ldr	r3, [r3, #16]
   b5ad4:	9301      	str	r3, [sp, #4]
   b5ad6:	bd08      	pop	{r3, pc}
   b5ad8:	0003023c 	.word	0x0003023c

000b5adc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5adc:	b508      	push	{r3, lr}
   b5ade:	4b02      	ldr	r3, [pc, #8]	; (b5ae8 <hal_usart_read+0xc>)
   b5ae0:	681b      	ldr	r3, [r3, #0]
   b5ae2:	695b      	ldr	r3, [r3, #20]
   b5ae4:	9301      	str	r3, [sp, #4]
   b5ae6:	bd08      	pop	{r3, pc}
   b5ae8:	0003023c 	.word	0x0003023c

000b5aec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5aec:	b508      	push	{r3, lr}
   b5aee:	4b02      	ldr	r3, [pc, #8]	; (b5af8 <hal_usart_peek+0xc>)
   b5af0:	681b      	ldr	r3, [r3, #0]
   b5af2:	699b      	ldr	r3, [r3, #24]
   b5af4:	9301      	str	r3, [sp, #4]
   b5af6:	bd08      	pop	{r3, pc}
   b5af8:	0003023c 	.word	0x0003023c

000b5afc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5afc:	b508      	push	{r3, lr}
   b5afe:	4b02      	ldr	r3, [pc, #8]	; (b5b08 <hal_usart_flush+0xc>)
   b5b00:	681b      	ldr	r3, [r3, #0]
   b5b02:	69db      	ldr	r3, [r3, #28]
   b5b04:	9301      	str	r3, [sp, #4]
   b5b06:	bd08      	pop	{r3, pc}
   b5b08:	0003023c 	.word	0x0003023c

000b5b0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5b0c:	b508      	push	{r3, lr}
   b5b0e:	4b02      	ldr	r3, [pc, #8]	; (b5b18 <hal_usart_is_enabled+0xc>)
   b5b10:	681b      	ldr	r3, [r3, #0]
   b5b12:	6a1b      	ldr	r3, [r3, #32]
   b5b14:	9301      	str	r3, [sp, #4]
   b5b16:	bd08      	pop	{r3, pc}
   b5b18:	0003023c 	.word	0x0003023c

000b5b1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5b1c:	b508      	push	{r3, lr}
   b5b1e:	4b02      	ldr	r3, [pc, #8]	; (b5b28 <hal_usart_available_data_for_write+0xc>)
   b5b20:	681b      	ldr	r3, [r3, #0]
   b5b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b24:	9301      	str	r3, [sp, #4]
   b5b26:	bd08      	pop	{r3, pc}
   b5b28:	0003023c 	.word	0x0003023c

000b5b2c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5b2c:	b508      	push	{r3, lr}
   b5b2e:	4b02      	ldr	r3, [pc, #8]	; (b5b38 <hal_usart_init_ex+0xc>)
   b5b30:	681b      	ldr	r3, [r3, #0]
   b5b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b34:	9301      	str	r3, [sp, #4]
   b5b36:	bd08      	pop	{r3, pc}
   b5b38:	0003023c 	.word	0x0003023c

000b5b3c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5b3c:	b508      	push	{r3, lr}
   b5b3e:	4b02      	ldr	r3, [pc, #8]	; (b5b48 <HAL_USB_USART_Init+0xc>)
   b5b40:	681b      	ldr	r3, [r3, #0]
   b5b42:	681b      	ldr	r3, [r3, #0]
   b5b44:	9301      	str	r3, [sp, #4]
   b5b46:	bd08      	pop	{r3, pc}
   b5b48:	0003024c 	.word	0x0003024c

000b5b4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5b4c:	b508      	push	{r3, lr}
   b5b4e:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <HAL_USB_USART_Begin+0xc>)
   b5b50:	681b      	ldr	r3, [r3, #0]
   b5b52:	685b      	ldr	r3, [r3, #4]
   b5b54:	9301      	str	r3, [sp, #4]
   b5b56:	bd08      	pop	{r3, pc}
   b5b58:	0003024c 	.word	0x0003024c

000b5b5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <HAL_USB_USART_Available_Data+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	691b      	ldr	r3, [r3, #16]
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	0003024c 	.word	0x0003024c

000b5b6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	695b      	ldr	r3, [r3, #20]
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	0003024c 	.word	0x0003024c

000b5b7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <HAL_USB_USART_Receive_Data+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	699b      	ldr	r3, [r3, #24]
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	0003024c 	.word	0x0003024c

000b5b8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <HAL_USB_USART_Send_Data+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	69db      	ldr	r3, [r3, #28]
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	0003024c 	.word	0x0003024c

000b5b9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <HAL_USB_USART_Flush_Data+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	6a1b      	ldr	r3, [r3, #32]
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	0003024c 	.word	0x0003024c

000b5bac <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b02      	ldr	r3, [pc, #8]	; (b5bb8 <LED_SetSignalingColor+0xc>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	685b      	ldr	r3, [r3, #4]
   b5bb4:	9301      	str	r3, [sp, #4]
   b5bb6:	bd08      	pop	{r3, pc}
   b5bb8:	00030260 	.word	0x00030260

000b5bbc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b5bbc:	b508      	push	{r3, lr}
   b5bbe:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <LED_Signaling_Start+0xc>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	689b      	ldr	r3, [r3, #8]
   b5bc4:	9301      	str	r3, [sp, #4]
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	00030260 	.word	0x00030260

000b5bcc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b5bcc:	b508      	push	{r3, lr}
   b5bce:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <LED_Signaling_Stop+0xc>)
   b5bd0:	681b      	ldr	r3, [r3, #0]
   b5bd2:	68db      	ldr	r3, [r3, #12]
   b5bd4:	9301      	str	r3, [sp, #4]
   b5bd6:	bd08      	pop	{r3, pc}
   b5bd8:	00030260 	.word	0x00030260

000b5bdc <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b5bdc:	b508      	push	{r3, lr}
   b5bde:	4b02      	ldr	r3, [pc, #8]	; (b5be8 <LED_RGB_IsOverRidden+0xc>)
   b5be0:	681b      	ldr	r3, [r3, #0]
   b5be2:	699b      	ldr	r3, [r3, #24]
   b5be4:	9301      	str	r3, [sp, #4]
   b5be6:	bd08      	pop	{r3, pc}
   b5be8:	00030260 	.word	0x00030260

000b5bec <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5bec:	b508      	push	{r3, lr}
   b5bee:	4b02      	ldr	r3, [pc, #8]	; (b5bf8 <LED_On+0xc>)
   b5bf0:	681b      	ldr	r3, [r3, #0]
   b5bf2:	69db      	ldr	r3, [r3, #28]
   b5bf4:	9301      	str	r3, [sp, #4]
   b5bf6:	bd08      	pop	{r3, pc}
   b5bf8:	00030260 	.word	0x00030260

000b5bfc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5bfc:	b508      	push	{r3, lr}
   b5bfe:	4b02      	ldr	r3, [pc, #8]	; (b5c08 <panic_+0xc>)
   b5c00:	681b      	ldr	r3, [r3, #0]
   b5c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c04:	9301      	str	r3, [sp, #4]
   b5c06:	bd08      	pop	{r3, pc}
   b5c08:	00030260 	.word	0x00030260

000b5c0c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5c0c:	b508      	push	{r3, lr}
   b5c0e:	4b02      	ldr	r3, [pc, #8]	; (b5c18 <log_message+0xc>)
   b5c10:	681b      	ldr	r3, [r3, #0]
   b5c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5c14:	9301      	str	r3, [sp, #4]
   b5c16:	bd08      	pop	{r3, pc}
   b5c18:	00030260 	.word	0x00030260

000b5c1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5c1c:	b508      	push	{r3, lr}
   b5c1e:	4b02      	ldr	r3, [pc, #8]	; (b5c28 <set_system_mode+0xc>)
   b5c20:	681b      	ldr	r3, [r3, #0]
   b5c22:	685b      	ldr	r3, [r3, #4]
   b5c24:	9301      	str	r3, [sp, #4]
   b5c26:	bd08      	pop	{r3, pc}
   b5c28:	00030220 	.word	0x00030220

000b5c2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5c2c:	b508      	push	{r3, lr}
   b5c2e:	4b02      	ldr	r3, [pc, #8]	; (b5c38 <system_delay_ms+0xc>)
   b5c30:	681b      	ldr	r3, [r3, #0]
   b5c32:	695b      	ldr	r3, [r3, #20]
   b5c34:	9301      	str	r3, [sp, #4]
   b5c36:	bd08      	pop	{r3, pc}
   b5c38:	00030220 	.word	0x00030220

000b5c3c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <system_thread_set_state+0xc>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c44:	9301      	str	r3, [sp, #4]
   b5c46:	bd08      	pop	{r3, pc}
   b5c48:	00030220 	.word	0x00030220

000b5c4c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b03      	ldr	r3, [pc, #12]	; (b5c5c <system_ctrl_set_app_request_handler+0x10>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5c56:	9301      	str	r3, [sp, #4]
   b5c58:	bd08      	pop	{r3, pc}
   b5c5a:	0000      	.short	0x0000
   b5c5c:	00030220 	.word	0x00030220

000b5c60 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b03      	ldr	r3, [pc, #12]	; (b5c70 <system_ctrl_set_result+0x10>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5c6a:	9301      	str	r3, [sp, #4]
   b5c6c:	bd08      	pop	{r3, pc}
   b5c6e:	0000      	.short	0x0000
   b5c70:	00030220 	.word	0x00030220

000b5c74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5c74:	b508      	push	{r3, lr}
   b5c76:	4b02      	ldr	r3, [pc, #8]	; (b5c80 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5c78:	681b      	ldr	r3, [r3, #0]
   b5c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c7c:	9301      	str	r3, [sp, #4]
   b5c7e:	bd08      	pop	{r3, pc}
   b5c80:	00030244 	.word	0x00030244

000b5c84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5c84:	b508      	push	{r3, lr}
   b5c86:	4b02      	ldr	r3, [pc, #8]	; (b5c90 <network_connect+0xc>)
   b5c88:	681b      	ldr	r3, [r3, #0]
   b5c8a:	685b      	ldr	r3, [r3, #4]
   b5c8c:	9301      	str	r3, [sp, #4]
   b5c8e:	bd08      	pop	{r3, pc}
   b5c90:	00030240 	.word	0x00030240

000b5c94 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5c94:	b508      	push	{r3, lr}
   b5c96:	4b02      	ldr	r3, [pc, #8]	; (b5ca0 <network_connecting+0xc>)
   b5c98:	681b      	ldr	r3, [r3, #0]
   b5c9a:	689b      	ldr	r3, [r3, #8]
   b5c9c:	9301      	str	r3, [sp, #4]
   b5c9e:	bd08      	pop	{r3, pc}
   b5ca0:	00030240 	.word	0x00030240

000b5ca4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5ca4:	b508      	push	{r3, lr}
   b5ca6:	4b02      	ldr	r3, [pc, #8]	; (b5cb0 <network_disconnect+0xc>)
   b5ca8:	681b      	ldr	r3, [r3, #0]
   b5caa:	68db      	ldr	r3, [r3, #12]
   b5cac:	9301      	str	r3, [sp, #4]
   b5cae:	bd08      	pop	{r3, pc}
   b5cb0:	00030240 	.word	0x00030240

000b5cb4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5cb4:	b508      	push	{r3, lr}
   b5cb6:	4b02      	ldr	r3, [pc, #8]	; (b5cc0 <network_ready+0xc>)
   b5cb8:	681b      	ldr	r3, [r3, #0]
   b5cba:	691b      	ldr	r3, [r3, #16]
   b5cbc:	9301      	str	r3, [sp, #4]
   b5cbe:	bd08      	pop	{r3, pc}
   b5cc0:	00030240 	.word	0x00030240

000b5cc4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5cc4:	b508      	push	{r3, lr}
   b5cc6:	4b02      	ldr	r3, [pc, #8]	; (b5cd0 <network_on+0xc>)
   b5cc8:	681b      	ldr	r3, [r3, #0]
   b5cca:	695b      	ldr	r3, [r3, #20]
   b5ccc:	9301      	str	r3, [sp, #4]
   b5cce:	bd08      	pop	{r3, pc}
   b5cd0:	00030240 	.word	0x00030240

000b5cd4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5cd4:	b508      	push	{r3, lr}
   b5cd6:	4b02      	ldr	r3, [pc, #8]	; (b5ce0 <network_off+0xc>)
   b5cd8:	681b      	ldr	r3, [r3, #0]
   b5cda:	699b      	ldr	r3, [r3, #24]
   b5cdc:	9301      	str	r3, [sp, #4]
   b5cde:	bd08      	pop	{r3, pc}
   b5ce0:	00030240 	.word	0x00030240

000b5ce4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5ce4:	b508      	push	{r3, lr}
   b5ce6:	4b02      	ldr	r3, [pc, #8]	; (b5cf0 <network_listen+0xc>)
   b5ce8:	681b      	ldr	r3, [r3, #0]
   b5cea:	69db      	ldr	r3, [r3, #28]
   b5cec:	9301      	str	r3, [sp, #4]
   b5cee:	bd08      	pop	{r3, pc}
   b5cf0:	00030240 	.word	0x00030240

000b5cf4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5cf4:	b508      	push	{r3, lr}
   b5cf6:	4b02      	ldr	r3, [pc, #8]	; (b5d00 <network_listening+0xc>)
   b5cf8:	681b      	ldr	r3, [r3, #0]
   b5cfa:	6a1b      	ldr	r3, [r3, #32]
   b5cfc:	9301      	str	r3, [sp, #4]
   b5cfe:	bd08      	pop	{r3, pc}
   b5d00:	00030240 	.word	0x00030240

000b5d04 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5d04:	b508      	push	{r3, lr}
   b5d06:	4b02      	ldr	r3, [pc, #8]	; (b5d10 <network_set_listen_timeout+0xc>)
   b5d08:	681b      	ldr	r3, [r3, #0]
   b5d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d0c:	9301      	str	r3, [sp, #4]
   b5d0e:	bd08      	pop	{r3, pc}
   b5d10:	00030240 	.word	0x00030240

000b5d14 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5d14:	b508      	push	{r3, lr}
   b5d16:	4b02      	ldr	r3, [pc, #8]	; (b5d20 <network_get_listen_timeout+0xc>)
   b5d18:	681b      	ldr	r3, [r3, #0]
   b5d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5d1c:	9301      	str	r3, [sp, #4]
   b5d1e:	bd08      	pop	{r3, pc}
   b5d20:	00030240 	.word	0x00030240

000b5d24 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5d24:	b508      	push	{r3, lr}
   b5d26:	4b02      	ldr	r3, [pc, #8]	; (b5d30 <network_is_on+0xc>)
   b5d28:	681b      	ldr	r3, [r3, #0]
   b5d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d2c:	9301      	str	r3, [sp, #4]
   b5d2e:	bd08      	pop	{r3, pc}
   b5d30:	00030240 	.word	0x00030240

000b5d34 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5d34:	b508      	push	{r3, lr}
   b5d36:	4b02      	ldr	r3, [pc, #8]	; (b5d40 <network_is_off+0xc>)
   b5d38:	681b      	ldr	r3, [r3, #0]
   b5d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d3c:	9301      	str	r3, [sp, #4]
   b5d3e:	bd08      	pop	{r3, pc}
   b5d40:	00030240 	.word	0x00030240

000b5d44 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5d44:	b508      	push	{r3, lr}
   b5d46:	4b02      	ldr	r3, [pc, #8]	; (b5d50 <malloc+0xc>)
   b5d48:	681b      	ldr	r3, [r3, #0]
   b5d4a:	681b      	ldr	r3, [r3, #0]
   b5d4c:	9301      	str	r3, [sp, #4]
   b5d4e:	bd08      	pop	{r3, pc}
   b5d50:	0003021c 	.word	0x0003021c

000b5d54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5d54:	b508      	push	{r3, lr}
   b5d56:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <free+0xc>)
   b5d58:	681b      	ldr	r3, [r3, #0]
   b5d5a:	685b      	ldr	r3, [r3, #4]
   b5d5c:	9301      	str	r3, [sp, #4]
   b5d5e:	bd08      	pop	{r3, pc}
   b5d60:	0003021c 	.word	0x0003021c

000b5d64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5d64:	b508      	push	{r3, lr}
   b5d66:	4b02      	ldr	r3, [pc, #8]	; (b5d70 <realloc+0xc>)
   b5d68:	681b      	ldr	r3, [r3, #0]
   b5d6a:	689b      	ldr	r3, [r3, #8]
   b5d6c:	9301      	str	r3, [sp, #4]
   b5d6e:	bd08      	pop	{r3, pc}
   b5d70:	0003021c 	.word	0x0003021c

000b5d74 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5d74:	b508      	push	{r3, lr}
   b5d76:	4b02      	ldr	r3, [pc, #8]	; (b5d80 <vsnprintf+0xc>)
   b5d78:	681b      	ldr	r3, [r3, #0]
   b5d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d7c:	9301      	str	r3, [sp, #4]
   b5d7e:	bd08      	pop	{r3, pc}
   b5d80:	0003021c 	.word	0x0003021c

000b5d84 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5d84:	b508      	push	{r3, lr}
   b5d86:	4b02      	ldr	r3, [pc, #8]	; (b5d90 <abort+0xc>)
   b5d88:	681b      	ldr	r3, [r3, #0]
   b5d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d8c:	9301      	str	r3, [sp, #4]
   b5d8e:	bd08      	pop	{r3, pc}
   b5d90:	0003021c 	.word	0x0003021c

000b5d94 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5d94:	b508      	push	{r3, lr}
   b5d96:	4b02      	ldr	r3, [pc, #8]	; (b5da0 <__errno+0xc>)
   b5d98:	681b      	ldr	r3, [r3, #0]
   b5d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5d9c:	9301      	str	r3, [sp, #4]
   b5d9e:	bd08      	pop	{r3, pc}
   b5da0:	0003021c 	.word	0x0003021c

000b5da4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5da4:	b508      	push	{r3, lr}
   b5da6:	4b02      	ldr	r3, [pc, #8]	; (b5db0 <__assert_func+0xc>)
   b5da8:	681b      	ldr	r3, [r3, #0]
   b5daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5dac:	9301      	str	r3, [sp, #4]
   b5dae:	bd08      	pop	{r3, pc}
   b5db0:	0003021c 	.word	0x0003021c

000b5db4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5db4:	b508      	push	{r3, lr}
   b5db6:	4b02      	ldr	r3, [pc, #8]	; (b5dc0 <newlib_impure_ptr_callback+0xc>)
   b5db8:	681b      	ldr	r3, [r3, #0]
   b5dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dbc:	9301      	str	r3, [sp, #4]
   b5dbe:	bd08      	pop	{r3, pc}
   b5dc0:	0003021c 	.word	0x0003021c

000b5dc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5dc4:	2100      	movs	r1, #0
   b5dc6:	f7ff bf31 	b.w	b5c2c <system_delay_ms>

000b5dca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5dca:	4770      	bx	lr

000b5dcc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5dcc:	4770      	bx	lr

000b5dce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5dce:	4770      	bx	lr

000b5dd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5dd0:	4770      	bx	lr
	...

000b5dd4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5dd4:	4b06      	ldr	r3, [pc, #24]	; (b5df0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5dd6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5dd8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5dda:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5dde:	d005      	beq.n	b5dec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5de0:	4608      	mov	r0, r1
   b5de2:	f002 f92b 	bl	b803c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5de6:	2800      	cmp	r0, #0
   b5de8:	bf08      	it	eq
   b5dea:	2400      	moveq	r4, #0
      }
   b5dec:	4620      	mov	r0, r4
   b5dee:	bd10      	pop	{r4, pc}
   b5df0:	000b9300 	.word	0x000b9300

000b5df4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5df4:	4b06      	ldr	r3, [pc, #24]	; (b5e10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5df6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5df8:	b510      	push	{r4, lr}
   b5dfa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5dfe:	d005      	beq.n	b5e0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5e00:	4608      	mov	r0, r1
   b5e02:	f002 f91b 	bl	b803c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5e06:	2800      	cmp	r0, #0
   b5e08:	bf08      	it	eq
   b5e0a:	2400      	moveq	r4, #0
      }
   b5e0c:	4620      	mov	r0, r4
   b5e0e:	bd10      	pop	{r4, pc}
   b5e10:	000b9300 	.word	0x000b9300

000b5e14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5e14:	4b06      	ldr	r3, [pc, #24]	; (b5e30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5e16:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5e18:	b510      	push	{r4, lr}
   b5e1a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5e1e:	d005      	beq.n	b5e2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5e20:	4608      	mov	r0, r1
   b5e22:	f002 f90b 	bl	b803c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5e26:	2800      	cmp	r0, #0
   b5e28:	bf08      	it	eq
   b5e2a:	2400      	moveq	r4, #0
      }
   b5e2c:	4620      	mov	r0, r4
   b5e2e:	bd10      	pop	{r4, pc}
   b5e30:	000b9300 	.word	0x000b9300

000b5e34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5e34:	b510      	push	{r4, lr}
   b5e36:	2168      	movs	r1, #104	; 0x68
   b5e38:	4604      	mov	r4, r0
   b5e3a:	f7fe f940 	bl	b40be <_ZdlPvj>
   b5e3e:	4620      	mov	r0, r4
   b5e40:	bd10      	pop	{r4, pc}

000b5e42 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5e42:	b510      	push	{r4, lr}
   b5e44:	2128      	movs	r1, #40	; 0x28
   b5e46:	4604      	mov	r4, r0
   b5e48:	f7fe f939 	bl	b40be <_ZdlPvj>
   b5e4c:	4620      	mov	r0, r4
   b5e4e:	bd10      	pop	{r4, pc}

000b5e50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5e50:	b510      	push	{r4, lr}
   b5e52:	2130      	movs	r1, #48	; 0x30
   b5e54:	4604      	mov	r4, r0
   b5e56:	f7fe f932 	bl	b40be <_ZdlPvj>
   b5e5a:	4620      	mov	r0, r4
   b5e5c:	bd10      	pop	{r4, pc}

000b5e5e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5e5e:	2168      	movs	r1, #104	; 0x68
   b5e60:	f7fe b92d 	b.w	b40be <_ZdlPvj>

000b5e64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5e64:	2128      	movs	r1, #40	; 0x28
   b5e66:	f7fe b92a 	b.w	b40be <_ZdlPvj>

000b5e6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5e6a:	2130      	movs	r1, #48	; 0x30
   b5e6c:	f7fe b927 	b.w	b40be <_ZdlPvj>

000b5e70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5e72:	2500      	movs	r5, #0
   b5e74:	1cec      	adds	r4, r5, #3
   b5e76:	428c      	cmp	r4, r1
   b5e78:	d80d      	bhi.n	b5e96 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b5e7a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5e7c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5e7e:	5d87      	ldrb	r7, [r0, r6]
   b5e80:	4297      	cmp	r7, r2
   b5e82:	d105      	bne.n	b5e90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5e84:	4426      	add	r6, r4
   b5e86:	42b1      	cmp	r1, r6
   b5e88:	d305      	bcc.n	b5e96 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b5e8a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5e8c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5e90:	3401      	adds	r4, #1
   b5e92:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5e94:	e7ee      	b.n	b5e74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5e96:	2000      	movs	r0, #0
   b5e98:	e7f9      	b.n	b5e8e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5e9c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5e9c:	4a02      	ldr	r2, [pc, #8]	; (b5ea8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b5e9e:	4903      	ldr	r1, [pc, #12]	; (b5eac <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b5ea0:	200a      	movs	r0, #10
   b5ea2:	f7ff beab 	b.w	b5bfc <panic_>
   b5ea6:	bf00      	nop
   b5ea8:	000b58fd 	.word	0x000b58fd
   b5eac:	000b9190 	.word	0x000b9190

000b5eb0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5eb0:	b430      	push	{r4, r5}
   b5eb2:	460d      	mov	r5, r1
   b5eb4:	4611      	mov	r1, r2
   b5eb6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b5eb8:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5eba:	6809      	ldr	r1, [r1, #0]
   b5ebc:	6828      	ldr	r0, [r5, #0]
   b5ebe:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5ec2:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5ec4:	bc30      	pop	{r4, r5}
   b5ec6:	4760      	bx	ip

000b5ec8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b5ec8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5eca:	b538      	push	{r3, r4, r5, lr}
   b5ecc:	4604      	mov	r4, r0
	switch (__op)
   b5ece:	d102      	bne.n	b5ed6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5ed0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5ed2:	6023      	str	r3, [r4, #0]
	}
   b5ed4:	e003      	b.n	b5ede <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b5ed6:	2a02      	cmp	r2, #2
   b5ed8:	d003      	beq.n	b5ee2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b5eda:	2a03      	cmp	r2, #3
   b5edc:	d00d      	beq.n	b5efa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5ede:	2000      	movs	r0, #0
   b5ee0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5ee2:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5ee4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5ee6:	f7fe f8e6 	bl	b40b6 <_Znwj>
   b5eea:	4603      	mov	r3, r0
   b5eec:	2800      	cmp	r0, #0
   b5eee:	d0f0      	beq.n	b5ed2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5ef4:	e883 0003 	stmia.w	r3, {r0, r1}
   b5ef8:	e7eb      	b.n	b5ed2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5efa:	6800      	ldr	r0, [r0, #0]
   b5efc:	2800      	cmp	r0, #0
   b5efe:	d0ee      	beq.n	b5ede <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5f00:	2108      	movs	r1, #8
   b5f02:	f7fe f8dc 	bl	b40be <_ZdlPvj>
   b5f06:	e7ea      	b.n	b5ede <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5f08 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5f08:	b510      	push	{r4, lr}
      if (_M_manager)
   b5f0a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5f0c:	4604      	mov	r4, r0
      if (_M_manager)
   b5f0e:	b113      	cbz	r3, b5f16 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5f10:	2203      	movs	r2, #3
   b5f12:	4601      	mov	r1, r0
   b5f14:	4798      	blx	r3
    }
   b5f16:	4620      	mov	r0, r4
   b5f18:	bd10      	pop	{r4, pc}

000b5f1a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5f1a:	b510      	push	{r4, lr}
   b5f1c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5f1e:	3058      	adds	r0, #88	; 0x58
   b5f20:	f7ff fff2 	bl	b5f08 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5f24:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5f2c:	f001 bcb8 	b.w	b78a0 <_ZN6StringD1Ev>

000b5f30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5f30:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5f32:	6843      	ldr	r3, [r0, #4]
   b5f34:	3b01      	subs	r3, #1
    {
   b5f36:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5f38:	6043      	str	r3, [r0, #4]
   b5f3a:	b963      	cbnz	r3, b5f56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5f3c:	6803      	ldr	r3, [r0, #0]
   b5f3e:	689b      	ldr	r3, [r3, #8]
   b5f40:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5f42:	68a3      	ldr	r3, [r4, #8]
   b5f44:	3b01      	subs	r3, #1
   b5f46:	60a3      	str	r3, [r4, #8]
   b5f48:	b92b      	cbnz	r3, b5f56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5f4a:	6823      	ldr	r3, [r4, #0]
   b5f4c:	4620      	mov	r0, r4
   b5f4e:	68db      	ldr	r3, [r3, #12]
    }
   b5f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5f54:	4718      	bx	r3
    }
   b5f56:	bd10      	pop	{r4, pc}

000b5f58 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5f58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5f5c:	b2da      	uxtb	r2, r3
   b5f5e:	2a09      	cmp	r2, #9
   b5f60:	d801      	bhi.n	b5f66 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b5f62:	4618      	mov	r0, r3
   b5f64:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5f66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5f6a:	2b05      	cmp	r3, #5
   b5f6c:	d801      	bhi.n	b5f72 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b5f6e:	3857      	subs	r0, #87	; 0x57
   b5f70:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b5f72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5f76:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5f78:	bf94      	ite	ls
   b5f7a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5f7c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b5f80:	4770      	bx	lr
	...

000b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5f84:	b510      	push	{r4, lr}
            locked_(false) {
   b5f86:	2300      	movs	r3, #0
   b5f88:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5f8a:	4b04      	ldr	r3, [pc, #16]	; (b5f9c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5f8c:	4604      	mov	r4, r0
   b5f8e:	6818      	ldr	r0, [r3, #0]
   b5f90:	f7ff fc9c 	bl	b58cc <os_mutex_recursive_lock>
        locked_ = true;
   b5f94:	2301      	movs	r3, #1
   b5f96:	7023      	strb	r3, [r4, #0]
    }
   b5f98:	4620      	mov	r0, r4
   b5f9a:	bd10      	pop	{r4, pc}
   b5f9c:	2003e6c0 	.word	0x2003e6c0

000b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5fa0:	b510      	push	{r4, lr}
        if (locked_) {
   b5fa2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5fa4:	4604      	mov	r4, r0
        if (locked_) {
   b5fa6:	b11b      	cbz	r3, b5fb0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5fa8:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5faa:	6818      	ldr	r0, [r3, #0]
   b5fac:	f7ff fc96 	bl	b58dc <os_mutex_recursive_unlock>
    }
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	bd10      	pop	{r4, pc}
   b5fb4:	2003e6c0 	.word	0x2003e6c0

000b5fb8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5fb8:	b082      	sub	sp, #8
   b5fba:	4603      	mov	r3, r0
    address_ = addr;
   b5fbc:	6808      	ldr	r0, [r1, #0]
   b5fbe:	6849      	ldr	r1, [r1, #4]
   b5fc0:	466a      	mov	r2, sp
   b5fc2:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5fc4:	466a      	mov	r2, sp
   b5fc6:	ca03      	ldmia	r2!, {r0, r1}
   b5fc8:	6018      	str	r0, [r3, #0]
}
   b5fca:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5fcc:	6059      	str	r1, [r3, #4]
}
   b5fce:	b002      	add	sp, #8
   b5fd0:	4770      	bx	lr

000b5fd2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5fd2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5fd4:	7982      	ldrb	r2, [r0, #6]
   b5fd6:	798b      	ldrb	r3, [r1, #6]
   b5fd8:	429a      	cmp	r2, r3
   b5fda:	d106      	bne.n	b5fea <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5fdc:	2206      	movs	r2, #6
   b5fde:	f002 f949 	bl	b8274 <memcmp>
   b5fe2:	fab0 f080 	clz	r0, r0
   b5fe6:	0940      	lsrs	r0, r0, #5
}
   b5fe8:	bd08      	pop	{r3, pc}
    return false;
   b5fea:	2000      	movs	r0, #0
   b5fec:	e7fc      	b.n	b5fe8 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5fee <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5ff2:	6003      	str	r3, [r0, #0]
   b5ff4:	8083      	strh	r3, [r0, #4]
}
   b5ff6:	2000      	movs	r0, #0
   b5ff8:	4770      	bx	lr

000b5ffa <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5ffa:	b508      	push	{r3, lr}
   b5ffc:	4602      	mov	r2, r0
        : address_{} {
   b5ffe:	2100      	movs	r1, #0
   b6000:	6001      	str	r1, [r0, #0]
   b6002:	6041      	str	r1, [r0, #4]
    clear();
   b6004:	f7ff fff3 	bl	b5fee <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6008:	7191      	strb	r1, [r2, #6]
}
   b600a:	4610      	mov	r0, r2
   b600c:	bd08      	pop	{r3, pc}
	...

000b6010 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6010:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6012:	2301      	movs	r3, #1
   b6014:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6016:	4b05      	ldr	r3, [pc, #20]	; (b602c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6018:	4602      	mov	r2, r0
   b601a:	f103 0110 	add.w	r1, r3, #16
   b601e:	f853 4b04 	ldr.w	r4, [r3], #4
   b6022:	f842 4b04 	str.w	r4, [r2], #4
   b6026:	428b      	cmp	r3, r1
   b6028:	d1f9      	bne.n	b601e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b602a:	bd10      	pop	{r4, pc}
   b602c:	000b858a 	.word	0x000b858a

000b6030 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6030:	b510      	push	{r4, lr}
    if (uuid128) {
   b6032:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6034:	4604      	mov	r4, r0
    if (uuid128) {
   b6036:	b1b1      	cbz	r1, b6066 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6038:	2a01      	cmp	r2, #1
   b603a:	f101 0210 	add.w	r2, r1, #16
   b603e:	d10a      	bne.n	b6056 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6040:	4601      	mov	r1, r0
   b6042:	f853 0b04 	ldr.w	r0, [r3], #4
   b6046:	f841 0b04 	str.w	r0, [r1], #4
   b604a:	4293      	cmp	r3, r2
   b604c:	d1f9      	bne.n	b6042 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b604e:	2301      	movs	r3, #1
   b6050:	6123      	str	r3, [r4, #16]
}
   b6052:	4620      	mov	r0, r4
   b6054:	bd10      	pop	{r4, pc}
   b6056:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6058:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b605c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6060:	429a      	cmp	r2, r3
   b6062:	d1f9      	bne.n	b6058 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6064:	e7f3      	b.n	b604e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6066:	2210      	movs	r2, #16
   b6068:	f002 f93c 	bl	b82e4 <memset>
   b606c:	e7f1      	b.n	b6052 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b606e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b606e:	b538      	push	{r3, r4, r5, lr}
   b6070:	4604      	mov	r4, r0
   b6072:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6074:	461a      	mov	r2, r3
   b6076:	f7ff ffdb 	bl	b6030 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b607a:	81a5      	strh	r5, [r4, #12]
}
   b607c:	4620      	mov	r0, r4
   b607e:	bd38      	pop	{r3, r4, r5, pc}

000b6080 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6080:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6082:	6902      	ldr	r2, [r0, #16]
   b6084:	b922      	cbnz	r2, b6090 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6086:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6088:	3800      	subs	r0, #0
   b608a:	bf18      	it	ne
   b608c:	2001      	movne	r0, #1
}
   b608e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6090:	4902      	ldr	r1, [pc, #8]	; (b609c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6092:	2210      	movs	r2, #16
   b6094:	f002 f8ee 	bl	b8274 <memcmp>
   b6098:	e7f6      	b.n	b6088 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b609a:	bf00      	nop
   b609c:	000b9318 	.word	0x000b9318

000b60a0 <_ZNK8particle7BleUuid4typeEv>:
}
   b60a0:	6900      	ldr	r0, [r0, #16]
   b60a2:	4770      	bx	lr

000b60a4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b60a4:	b538      	push	{r3, r4, r5, lr}
   b60a6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b60a8:	2214      	movs	r2, #20
   b60aa:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b60ac:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b60ae:	f002 f919 	bl	b82e4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b60b2:	6923      	ldr	r3, [r4, #16]
   b60b4:	b91b      	cbnz	r3, b60be <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b60b6:	89a3      	ldrh	r3, [r4, #12]
   b60b8:	802b      	strh	r3, [r5, #0]
}
   b60ba:	4628      	mov	r0, r5
   b60bc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b60be:	2301      	movs	r3, #1
   b60c0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b60c2:	4621      	mov	r1, r4
   b60c4:	462b      	mov	r3, r5
   b60c6:	f104 0210 	add.w	r2, r4, #16
   b60ca:	f851 0b04 	ldr.w	r0, [r1], #4
   b60ce:	f843 0b04 	str.w	r0, [r3], #4
   b60d2:	4291      	cmp	r1, r2
   b60d4:	d1f9      	bne.n	b60ca <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b60d6:	e7f0      	b.n	b60ba <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b60d8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b60d8:	8980      	ldrh	r0, [r0, #12]
   b60da:	4770      	bx	lr

000b60dc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b60dc:	4770      	bx	lr

000b60de <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b60de:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b60e0:	6902      	ldr	r2, [r0, #16]
   b60e2:	690b      	ldr	r3, [r1, #16]
   b60e4:	429a      	cmp	r2, r3
   b60e6:	d106      	bne.n	b60f6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b60e8:	2210      	movs	r2, #16
   b60ea:	f002 f8c3 	bl	b8274 <memcmp>
   b60ee:	fab0 f080 	clz	r0, r0
   b60f2:	0940      	lsrs	r0, r0, #5
}
   b60f4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b60f6:	2000      	movs	r0, #0
   b60f8:	e7fc      	b.n	b60f4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b60fc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b60fc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b60fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6102:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6104:	4b34      	ldr	r3, [pc, #208]	; (b61d8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6106:	460c      	mov	r4, r1
   b6108:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b610a:	4602      	mov	r2, r0
   b610c:	f103 0110 	add.w	r1, r3, #16
   b6110:	f853 0b04 	ldr.w	r0, [r3], #4
   b6114:	f842 0b04 	str.w	r0, [r2], #4
   b6118:	428b      	cmp	r3, r1
   b611a:	d1f9      	bne.n	b6110 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b611c:	b344      	cbz	r4, b6170 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b611e:	2124      	movs	r1, #36	; 0x24
   b6120:	4620      	mov	r0, r4
   b6122:	f002 f930 	bl	b8386 <strnlen>
   b6126:	2804      	cmp	r0, #4
   b6128:	f04f 0500 	mov.w	r5, #0
   b612c:	d123      	bne.n	b6176 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b612e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6132:	af01      	add	r7, sp, #4
   b6134:	1ca5      	adds	r5, r4, #2
   b6136:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6138:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b613c:	f7ff ff0c 	bl	b5f58 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6140:	f1b0 0800 	subs.w	r8, r0, #0
   b6144:	db12      	blt.n	b616c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6146:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b614a:	f7ff ff05 	bl	b5f58 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b614e:	2800      	cmp	r0, #0
   b6150:	db0c      	blt.n	b616c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6152:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6154:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6158:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b615a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b615e:	d1eb      	bne.n	b6138 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6160:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6164:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6166:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b616a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b616c:	2300      	movs	r3, #0
   b616e:	6133      	str	r3, [r6, #16]
}
   b6170:	b002      	add	sp, #8
   b6172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6176:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b617a:	2124      	movs	r1, #36	; 0x24
   b617c:	4620      	mov	r0, r4
   b617e:	f002 f902 	bl	b8386 <strnlen>
   b6182:	42a8      	cmp	r0, r5
   b6184:	d807      	bhi.n	b6196 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6186:	4642      	mov	r2, r8
   b6188:	2100      	movs	r1, #0
   b618a:	4630      	mov	r0, r6
}
   b618c:	b002      	add	sp, #8
   b618e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6192:	f002 b8a7 	b.w	b82e4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6196:	f1b8 0f00 	cmp.w	r8, #0
   b619a:	d0e9      	beq.n	b6170 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b619c:	5d60      	ldrb	r0, [r4, r5]
   b619e:	f7ff fedb 	bl	b5f58 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b61a2:	0603      	lsls	r3, r0, #24
   b61a4:	d415      	bmi.n	b61d2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b61a6:	0100      	lsls	r0, r0, #4
   b61a8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b61ac:	b2c7      	uxtb	r7, r0
   b61ae:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b61b2:	2124      	movs	r1, #36	; 0x24
   b61b4:	4620      	mov	r0, r4
   b61b6:	f002 f8e6 	bl	b8386 <strnlen>
   b61ba:	3501      	adds	r5, #1
   b61bc:	42a8      	cmp	r0, r5
   b61be:	d908      	bls.n	b61d2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b61c0:	5d60      	ldrb	r0, [r4, r5]
   b61c2:	f7ff fec9 	bl	b5f58 <_ZN8particle11hexToNibbleEc>
   b61c6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b61c8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b61ca:	bfa4      	itt	ge
   b61cc:	4338      	orrge	r0, r7
   b61ce:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b61d2:	3501      	adds	r5, #1
   b61d4:	e7d1      	b.n	b617a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b61d6:	bf00      	nop
   b61d8:	000b858a 	.word	0x000b858a

000b61dc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b61dc:	b513      	push	{r0, r1, r4, lr}
   b61de:	4604      	mov	r4, r0
   b61e0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b61e2:	f7ff ff15 	bl	b6010 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b61e6:	4620      	mov	r0, r4
   b61e8:	9901      	ldr	r1, [sp, #4]
   b61ea:	f7ff ff87 	bl	b60fc <_ZN8particle7BleUuid9constructEPKc>
}
   b61ee:	4620      	mov	r0, r4
   b61f0:	b002      	add	sp, #8
   b61f2:	bd10      	pop	{r4, pc}

000b61f4 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b61f4:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b61f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b61fa:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b61fc:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b61fe:	8043      	strh	r3, [r0, #2]
   b6200:	220e      	movs	r2, #14
   b6202:	4629      	mov	r1, r5
   b6204:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6206:	7105      	strb	r5, [r0, #4]
   b6208:	3006      	adds	r0, #6
   b620a:	f002 f86b 	bl	b82e4 <memset>
   b620e:	f104 0014 	add.w	r0, r4, #20
   b6212:	f7ff fefd 	bl	b6010 <_ZN8particle7BleUuidC1Ev>
   b6216:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b621a:	f7ff fef9 	bl	b6010 <_ZN8particle7BleUuidC1Ev>
   b621e:	4904      	ldr	r1, [pc, #16]	; (b6230 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6220:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6224:	f001 fb87 	bl	b7936 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6228:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b622a:	4620      	mov	r0, r4
   b622c:	bd38      	pop	{r3, r4, r5, pc}
   b622e:	bf00      	nop
   b6230:	000b85c9 	.word	0x000b85c9

000b6234 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6234:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6236:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b623a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b623e:	4293      	cmp	r3, r2
   b6240:	4618      	mov	r0, r3
   b6242:	d006      	beq.n	b6252 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6244:	6804      	ldr	r4, [r0, #0]
   b6246:	8824      	ldrh	r4, [r4, #0]
   b6248:	428c      	cmp	r4, r1
   b624a:	f103 0308 	add.w	r3, r3, #8
   b624e:	d1f6      	bne.n	b623e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6250:	bd10      	pop	{r4, pc}
        return nullptr;
   b6252:	2000      	movs	r0, #0
   b6254:	e7fc      	b.n	b6250 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6258 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6258:	b5f0      	push	{r4, r5, r6, r7, lr}
   b625a:	4606      	mov	r6, r0
   b625c:	b085      	sub	sp, #20
   b625e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6260:	460d      	mov	r5, r1
   b6262:	2900      	cmp	r1, #0
   b6264:	d050      	beq.n	b6308 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6266:	2a00      	cmp	r2, #0
   b6268:	d04e      	beq.n	b6308 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b626a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b626c:	7823      	ldrb	r3, [r4, #0]
   b626e:	2af4      	cmp	r2, #244	; 0xf4
   b6270:	bf28      	it	cs
   b6272:	22f4      	movcs	r2, #244	; 0xf4
   b6274:	b343      	cbz	r3, b62c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6276:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6278:	0798      	lsls	r0, r3, #30
   b627a:	d509      	bpl.n	b6290 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b627c:	89a0      	ldrh	r0, [r4, #12]
   b627e:	9203      	str	r2, [sp, #12]
   b6280:	2300      	movs	r3, #0
   b6282:	f7ff fabb 	bl	b57fc <hal_ble_gatt_server_set_characteristic_value>
   b6286:	2800      	cmp	r0, #0
   b6288:	9a03      	ldr	r2, [sp, #12]
   b628a:	da03      	bge.n	b6294 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b628c:	b005      	add	sp, #20
   b628e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6290:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6294:	6834      	ldr	r4, [r6, #0]
   b6296:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6298:	06d9      	lsls	r1, r3, #27
   b629a:	d509      	bpl.n	b62b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b629c:	2f01      	cmp	r7, #1
   b629e:	d007      	beq.n	b62b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b62a0:	89a0      	ldrh	r0, [r4, #12]
   b62a2:	2300      	movs	r3, #0
   b62a4:	4629      	mov	r1, r5
}
   b62a6:	b005      	add	sp, #20
   b62a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b62ac:	f7ff bae2 	b.w	b5874 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b62b0:	069b      	lsls	r3, r3, #26
   b62b2:	d5eb      	bpl.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b62b4:	2f02      	cmp	r7, #2
   b62b6:	d0e9      	beq.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b62b8:	89a0      	ldrh	r0, [r4, #12]
   b62ba:	2300      	movs	r3, #0
   b62bc:	4629      	mov	r1, r5
}
   b62be:	b005      	add	sp, #20
   b62c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b62c4:	f7ff bae0 	b.w	b5888 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b62c8:	8860      	ldrh	r0, [r4, #2]
   b62ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b62ce:	4288      	cmp	r0, r1
   b62d0:	d01c      	beq.n	b630c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b62d2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b62d4:	074e      	lsls	r6, r1, #29
   b62d6:	d501      	bpl.n	b62dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b62d8:	2f01      	cmp	r7, #1
   b62da:	d104      	bne.n	b62e6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b62dc:	070b      	lsls	r3, r1, #28
   b62de:	d409      	bmi.n	b62f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b62e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b62e4:	e7d2      	b.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b62e6:	89a1      	ldrh	r1, [r4, #12]
   b62e8:	9300      	str	r3, [sp, #0]
   b62ea:	4613      	mov	r3, r2
   b62ec:	462a      	mov	r2, r5
   b62ee:	f7ff fa99 	bl	b5824 <hal_ble_gatt_client_write_without_response>
   b62f2:	e7cb      	b.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b62f4:	2f02      	cmp	r7, #2
   b62f6:	d0f3      	beq.n	b62e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b62f8:	2300      	movs	r3, #0
   b62fa:	89a1      	ldrh	r1, [r4, #12]
   b62fc:	9300      	str	r3, [sp, #0]
   b62fe:	4613      	mov	r3, r2
   b6300:	462a      	mov	r2, r5
   b6302:	f7ff fa85 	bl	b5810 <hal_ble_gatt_client_write_with_response>
   b6306:	e7c1      	b.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6308:	4802      	ldr	r0, [pc, #8]	; (b6314 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b630a:	e7bf      	b.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b630c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6310:	e7bc      	b.n	b628c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6312:	bf00      	nop
   b6314:	fffffef2 	.word	0xfffffef2

000b6318 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b631c:	2600      	movs	r6, #0
   b631e:	6006      	str	r6, [r0, #0]
   b6320:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6322:	2028      	movs	r0, #40	; 0x28
   b6324:	460c      	mov	r4, r1
   b6326:	f7fd fec6 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b632a:	1e05      	subs	r5, r0, #0
   b632c:	f105 080c 	add.w	r8, r5, #12
   b6330:	d00f      	beq.n	b6352 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6332:	2301      	movs	r3, #1
   b6334:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6338:	4b08      	ldr	r3, [pc, #32]	; (b635c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b633a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b633c:	4640      	mov	r0, r8
   b633e:	f7ff fe67 	bl	b6010 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6344:	622e      	str	r6, [r5, #32]
   b6346:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b634a:	4646      	mov	r6, r8
   b634c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b634e:	6823      	ldr	r3, [r4, #0]
   b6350:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6352:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6356:	4638      	mov	r0, r7
   b6358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b635c:	000b92d0 	.word	0x000b92d0

000b6360 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6360:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6362:	2500      	movs	r5, #0
   b6364:	6005      	str	r5, [r0, #0]
   b6366:	4606      	mov	r6, r0
   b6368:	2030      	movs	r0, #48	; 0x30
   b636a:	f7fd fea4 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b636e:	4604      	mov	r4, r0
   b6370:	b188      	cbz	r0, b6396 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6372:	2301      	movs	r3, #1
   b6374:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6378:	4b09      	ldr	r3, [pc, #36]	; (b63a0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b637a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b637c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6380:	8183      	strh	r3, [r0, #12]
   b6382:	300e      	adds	r0, #14
   b6384:	f7ff fe39 	bl	b5ffa <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6388:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b638c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6390:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6394:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6396:	6074      	str	r4, [r6, #4]
   b6398:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b639a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b639c:	4630      	mov	r0, r6
   b639e:	bd70      	pop	{r4, r5, r6, pc}
   b63a0:	000b92ec 	.word	0x000b92ec

000b63a4 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b63a4:	b513      	push	{r0, r1, r4, lr}
   b63a6:	4604      	mov	r4, r0
    WiringBleLock lk;
   b63a8:	a801      	add	r0, sp, #4
   b63aa:	f7ff fdeb 	bl	b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b63ae:	6823      	ldr	r3, [r4, #0]
   b63b0:	881c      	ldrh	r4, [r3, #0]
   b63b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b63b6:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b63b8:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b63ba:	bf18      	it	ne
   b63bc:	2401      	movne	r4, #1
    WiringBleLock lk;
   b63be:	f7ff fdef 	bl	b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b63c2:	4620      	mov	r0, r4
   b63c4:	b002      	add	sp, #8
   b63c6:	bd10      	pop	{r4, pc}

000b63c8 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b63c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b63ca:	460d      	mov	r5, r1
   b63cc:	4604      	mov	r4, r0
    WiringBleLock lk;
   b63ce:	a801      	add	r0, sp, #4
   b63d0:	f7ff fdd8 	bl	b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b63d4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b63d6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b63da:	6023      	str	r3, [r4, #0]
   b63dc:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b63e0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b63e2:	a801      	add	r0, sp, #4
   b63e4:	f7ff fddc 	bl	b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b63e8:	4620      	mov	r0, r4
   b63ea:	b003      	add	sp, #12
   b63ec:	bd30      	pop	{r4, r5, pc}

000b63ee <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b63ee:	b530      	push	{r4, r5, lr}
   b63f0:	4605      	mov	r5, r0
   b63f2:	b087      	sub	sp, #28
   b63f4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b63f6:	a801      	add	r0, sp, #4
   b63f8:	f7ff fdc4 	bl	b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b63fc:	682a      	ldr	r2, [r5, #0]
   b63fe:	6823      	ldr	r3, [r4, #0]
   b6400:	8812      	ldrh	r2, [r2, #0]
   b6402:	881b      	ldrh	r3, [r3, #0]
   b6404:	429a      	cmp	r2, r3
   b6406:	d10d      	bne.n	b6424 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6408:	4629      	mov	r1, r5
   b640a:	a802      	add	r0, sp, #8
   b640c:	f7ff ffdc 	bl	b63c8 <_ZNK8particle13BlePeerDevice7addressEv>
   b6410:	4621      	mov	r1, r4
   b6412:	a804      	add	r0, sp, #16
   b6414:	f7ff ffd8 	bl	b63c8 <_ZNK8particle13BlePeerDevice7addressEv>
   b6418:	a904      	add	r1, sp, #16
   b641a:	a802      	add	r0, sp, #8
   b641c:	f7ff fdd9 	bl	b5fd2 <_ZNK8particle10BleAddresseqERKS0_>
   b6420:	4604      	mov	r4, r0
   b6422:	b900      	cbnz	r0, b6426 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6424:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6426:	a801      	add	r0, sp, #4
   b6428:	f7ff fdba 	bl	b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b642c:	4620      	mov	r0, r4
   b642e:	b007      	add	sp, #28
   b6430:	bd30      	pop	{r4, r5, pc}
	...

000b6434 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6434:	b510      	push	{r4, lr}
   b6436:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6438:	2064      	movs	r0, #100	; 0x64
   b643a:	f7fd fe3c 	bl	b40b6 <_Znwj>
   b643e:	b168      	cbz	r0, b645c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6440:	2300      	movs	r3, #0
   b6442:	e9c0 3300 	strd	r3, r3, [r0]
   b6446:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b644a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b644e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6452:	6203      	str	r3, [r0, #32]
   b6454:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6456:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6458:	64c3      	str	r3, [r0, #76]	; 0x4c
   b645a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b645c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b645e:	b920      	cbnz	r0, b646a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6460:	4a0a      	ldr	r2, [pc, #40]	; (b648c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6462:	490b      	ldr	r1, [pc, #44]	; (b6490 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6464:	200a      	movs	r0, #10
   b6466:	f7ff fbc9 	bl	b5bfc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b646a:	2000      	movs	r0, #0
   b646c:	f7ff f98a 	bl	b5784 <hal_ble_stack_init>
   b6470:	b120      	cbz	r0, b647c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6472:	4a06      	ldr	r2, [pc, #24]	; (b648c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6474:	4907      	ldr	r1, [pc, #28]	; (b6494 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6476:	200a      	movs	r0, #10
   b6478:	f7ff fbc0 	bl	b5bfc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b647c:	6821      	ldr	r1, [r4, #0]
   b647e:	4806      	ldr	r0, [pc, #24]	; (b6498 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6480:	2200      	movs	r2, #0
   b6482:	f7ff f9ed 	bl	b5860 <hal_ble_set_callback_on_periph_link_events>
}
   b6486:	4620      	mov	r0, r4
   b6488:	bd10      	pop	{r4, pc}
   b648a:	bf00      	nop
   b648c:	000b58fd 	.word	0x000b58fd
   b6490:	000b9190 	.word	0x000b9190
   b6494:	000b91ce 	.word	0x000b91ce
   b6498:	000b6a45 	.word	0x000b6a45

000b649c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b649c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b649e:	4c0a      	ldr	r4, [pc, #40]	; (b64c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b64a0:	7823      	ldrb	r3, [r4, #0]
   b64a2:	f3bf 8f5b 	dmb	ish
   b64a6:	07db      	lsls	r3, r3, #31
   b64a8:	d40c      	bmi.n	b64c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b64aa:	4620      	mov	r0, r4
   b64ac:	f7fd fe16 	bl	b40dc <__cxa_guard_acquire>
   b64b0:	b140      	cbz	r0, b64c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b64b2:	4806      	ldr	r0, [pc, #24]	; (b64cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b64b4:	f7ff ffbe 	bl	b6434 <_ZN8particle14BleLocalDeviceC1Ev>
   b64b8:	4620      	mov	r0, r4
   b64ba:	f7fd fe14 	bl	b40e6 <__cxa_guard_release>
   b64be:	4804      	ldr	r0, [pc, #16]	; (b64d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b64c0:	f001 fece 	bl	b8260 <atexit>
    return instance;
}
   b64c4:	4801      	ldr	r0, [pc, #4]	; (b64cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b64c6:	bd10      	pop	{r4, pc}
   b64c8:	2003e6b8 	.word	0x2003e6b8
   b64cc:	2003e6c4 	.word	0x2003e6c4
   b64d0:	000b6711 	.word	0x000b6711

000b64d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b64d4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b64d6:	6803      	ldr	r3, [r0, #0]
   b64d8:	3b09      	subs	r3, #9
   b64da:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b64dc:	b08d      	sub	sp, #52	; 0x34
   b64de:	4604      	mov	r4, r0
   b64e0:	460d      	mov	r5, r1
    switch (event->type) {
   b64e2:	d811      	bhi.n	b6508 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b64e4:	f7ff ffda 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b64e8:	88a1      	ldrh	r1, [r4, #4]
   b64ea:	6800      	ldr	r0, [r0, #0]
   b64ec:	f7ff fea2 	bl	b6234 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b64f0:	4603      	mov	r3, r0
   b64f2:	b958      	cbnz	r0, b650c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b64f4:	2220      	movs	r2, #32
   b64f6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b64fa:	4a0b      	ldr	r2, [pc, #44]	; (b6528 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b64fc:	9200      	str	r2, [sp, #0]
   b64fe:	490b      	ldr	r1, [pc, #44]	; (b652c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6500:	aa04      	add	r2, sp, #16
   b6502:	2032      	movs	r0, #50	; 0x32
   b6504:	f7ff fb82 	bl	b5c0c <log_message>
}
   b6508:	b00d      	add	sp, #52	; 0x34
   b650a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b650c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b650e:	2a00      	cmp	r2, #0
   b6510:	d0fa      	beq.n	b6508 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6512:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6516:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b651a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b651e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6520:	aa04      	add	r2, sp, #16
   b6522:	a903      	add	r1, sp, #12
   b6524:	47a0      	blx	r4
}
   b6526:	e7ef      	b.n	b6508 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6528:	000b9210 	.word	0x000b9210
   b652c:	000b91a7 	.word	0x000b91a7

000b6530 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6530:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6532:	2000      	movs	r0, #0
   b6534:	f7ff f926 	bl	b5784 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6538:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b653c:	bd08      	pop	{r3, pc}

000b653e <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>:

int BleLocalDevice::setDeviceName(const char* name, size_t len) const {
    return hal_ble_gap_set_device_name(name, len, nullptr);
}

int BleLocalDevice::setDeviceName(const char* name) const {
   b653e:	b510      	push	{r4, lr}
    return setDeviceName(name, name ? strnlen(name, BLE_MAX_DEV_NAME_LEN) : 0);
   b6540:	460c      	mov	r4, r1
   b6542:	b121      	cbz	r1, b654e <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc+0x10>
   b6544:	2114      	movs	r1, #20
   b6546:	4620      	mov	r0, r4
   b6548:	f001 ff1d 	bl	b8386 <strnlen>
   b654c:	4601      	mov	r1, r0
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b654e:	4620      	mov	r0, r4
   b6550:	2200      	movs	r2, #0
}
   b6552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b6556:	f7ff b91d 	b.w	b5794 <hal_ble_gap_set_device_name>

000b655a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b655a:	b919      	cbnz	r1, b6564 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b655c:	460a      	mov	r2, r1
   b655e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6560:	f7ff b920 	b.w	b57a4 <hal_ble_gap_set_advertising_data>
   b6564:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6568:	2200      	movs	r2, #0
   b656a:	e7f9      	b.n	b6560 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b656c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b656c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b656e:	69d8      	ldr	r0, [r3, #28]
}
   b6570:	2800      	cmp	r0, #0
   b6572:	bfd4      	ite	le
   b6574:	2000      	movle	r0, #0
   b6576:	2001      	movgt	r0, #1
   b6578:	4770      	bx	lr

000b657a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b657a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b657c:	1e14      	subs	r4, r2, #0
   b657e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6580:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6582:	db02      	blt.n	b658a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6584:	1862      	adds	r2, r4, r1
   b6586:	429a      	cmp	r2, r3
   b6588:	dd00      	ble.n	b658c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b658a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b658c:	682a      	ldr	r2, [r5, #0]
   b658e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6590:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6592:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6594:	1a52      	subs	r2, r2, r1
   b6596:	f001 fe8b 	bl	b82b0 <memmove>
    size_ -= n;
   b659a:	686a      	ldr	r2, [r5, #4]
   b659c:	1b12      	subs	r2, r2, r4
   b659e:	606a      	str	r2, [r5, #4]
}
   b65a0:	bd38      	pop	{r3, r4, r5, pc}

000b65a2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b65a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b65a4:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b65a6:	4604      	mov	r4, r0
   b65a8:	460d      	mov	r5, r1
   b65aa:	ab01      	add	r3, sp, #4
   b65ac:	e9d0 0100 	ldrd	r0, r1, [r0]
   b65b0:	f7ff fc5e 	bl	b5e70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b65b4:	4602      	mov	r2, r0
   b65b6:	b138      	cbz	r0, b65c8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b65b8:	9901      	ldr	r1, [sp, #4]
   b65ba:	4620      	mov	r0, r4
   b65bc:	f7ff ffdd 	bl	b657a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b65c0:	4629      	mov	r1, r5
   b65c2:	4620      	mov	r0, r4
   b65c4:	f7ff ffed 	bl	b65a2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b65c8:	b003      	add	sp, #12
   b65ca:	bd30      	pop	{r4, r5, pc}

000b65cc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b65cc:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b65ce:	460c      	mov	r4, r1
   b65d0:	b929      	cbnz	r1, b65de <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b65d2:	460a      	mov	r2, r1
   b65d4:	4608      	mov	r0, r1
}
   b65d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b65da:	f7ff b8eb 	b.w	b57b4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b65de:	2101      	movs	r1, #1
   b65e0:	4620      	mov	r0, r4
   b65e2:	f7ff ffde 	bl	b65a2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b65e6:	e9d4 0100 	ldrd	r0, r1, [r4]
   b65ea:	2200      	movs	r2, #0
   b65ec:	e7f3      	b.n	b65d6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b65ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b65ee:	b538      	push	{r3, r4, r5, lr}
   b65f0:	4604      	mov	r4, r0
   b65f2:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b65f4:	f7ff ffb1 	bl	b655a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b65f8:	2800      	cmp	r0, #0
   b65fa:	db0a      	blt.n	b6612 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b65fc:	4629      	mov	r1, r5
   b65fe:	4620      	mov	r0, r4
   b6600:	f7ff ffe4 	bl	b65cc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6604:	2800      	cmp	r0, #0
   b6606:	db04      	blt.n	b6612 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b6608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b660c:	2000      	movs	r0, #0
   b660e:	f7ff b8d9 	b.w	b57c4 <hal_ble_gap_start_advertising>
}
   b6612:	bd38      	pop	{r3, r4, r5, pc}

000b6614 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6614:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6616:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6618:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b661a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b661c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b661e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6620:	f7fd fd49 	bl	b40b6 <_Znwj>
   b6624:	b118      	cbz	r0, b662e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6626:	682b      	ldr	r3, [r5, #0]
   b6628:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b662a:	686b      	ldr	r3, [r5, #4]
   b662c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b662e:	4b03      	ldr	r3, [pc, #12]	; (b663c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6630:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6632:	4b03      	ldr	r3, [pc, #12]	; (b6640 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6634:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6636:	60a3      	str	r3, [r4, #8]
      }
   b6638:	4620      	mov	r0, r4
   b663a:	bd38      	pop	{r3, r4, r5, pc}
   b663c:	000b5eb1 	.word	0x000b5eb1
   b6640:	000b5ec9 	.word	0x000b5ec9

000b6644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6644:	680b      	ldr	r3, [r1, #0]
   b6646:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6648:	b113      	cbz	r3, b6650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b664a:	685a      	ldr	r2, [r3, #4]
   b664c:	3201      	adds	r2, #1
   b664e:	605a      	str	r2, [r3, #4]
      }
   b6650:	4770      	bx	lr

000b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6652:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6654:	f851 3b04 	ldr.w	r3, [r1], #4
   b6658:	4604      	mov	r4, r0
   b665a:	f840 3b04 	str.w	r3, [r0], #4
   b665e:	f7ff fff1 	bl	b6644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6662:	6823      	ldr	r3, [r4, #0]
   b6664:	b90b      	cbnz	r3, b666a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6666:	f7ff fc19 	bl	b5e9c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b666a:	4620      	mov	r0, r4
   b666c:	bd10      	pop	{r4, pc}

000b666e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b666e:	b510      	push	{r4, lr}
   b6670:	f851 3b04 	ldr.w	r3, [r1], #4
   b6674:	4604      	mov	r4, r0
   b6676:	f840 3b04 	str.w	r3, [r0], #4
   b667a:	f7ff ffe3 	bl	b6644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b667e:	4620      	mov	r0, r4
   b6680:	bd10      	pop	{r4, pc}

000b6682 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6682:	b510      	push	{r4, lr}
   b6684:	f851 3b04 	ldr.w	r3, [r1], #4
   b6688:	4604      	mov	r4, r0
   b668a:	f840 3b04 	str.w	r3, [r0], #4
   b668e:	f7ff ffd9 	bl	b6644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6692:	4620      	mov	r0, r4
   b6694:	bd10      	pop	{r4, pc}

000b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6696:	b510      	push	{r4, lr}
   b6698:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b669a:	6800      	ldr	r0, [r0, #0]
   b669c:	b108      	cbz	r0, b66a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b669e:	f7ff fc47 	bl	b5f30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b66a2:	4620      	mov	r0, r4
   b66a4:	bd10      	pop	{r4, pc}

000b66a6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b66a6:	b510      	push	{r4, lr}
   b66a8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b66aa:	3004      	adds	r0, #4
   b66ac:	f7ff fff3 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b66b0:	4620      	mov	r0, r4
   b66b2:	bd10      	pop	{r4, pc}

000b66b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b66b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b66b6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b66ba:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b66bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b66c0:	42ae      	cmp	r6, r5
   b66c2:	d004      	beq.n	b66ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b66c4:	1d28      	adds	r0, r5, #4
   b66c6:	f7ff ffe6 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66ca:	3508      	adds	r5, #8
   b66cc:	e7f8      	b.n	b66c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b66ce:	6820      	ldr	r0, [r4, #0]
   b66d0:	f7ff fb40 	bl	b5d54 <free>
}
   b66d4:	4620      	mov	r0, r4
   b66d6:	bd70      	pop	{r4, r5, r6, pc}

000b66d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b66d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b66da:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b66de:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b66e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b66e4:	42ae      	cmp	r6, r5
   b66e6:	d004      	beq.n	b66f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b66e8:	1d28      	adds	r0, r5, #4
   b66ea:	f7ff ffd4 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66ee:	3508      	adds	r5, #8
   b66f0:	e7f8      	b.n	b66e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b66f2:	6820      	ldr	r0, [r4, #0]
   b66f4:	f7ff fb2e 	bl	b5d54 <free>
}
   b66f8:	4620      	mov	r0, r4
   b66fa:	bd70      	pop	{r4, r5, r6, pc}

000b66fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b66fc:	b510      	push	{r4, lr}
   b66fe:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6700:	3024      	adds	r0, #36	; 0x24
   b6702:	f7ff ffe9 	bl	b66d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6706:	f104 0018 	add.w	r0, r4, #24
   b670a:	f7ff ffd3 	bl	b66b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b670e:	bd10      	pop	{r4, pc}

000b6710 <__tcf_0>:
    static BleLocalDevice instance;
   b6710:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6712:	4b17      	ldr	r3, [pc, #92]	; (b6770 <__tcf_0+0x60>)
   b6714:	681c      	ldr	r4, [r3, #0]
   b6716:	b354      	cbz	r4, b676e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6718:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b671c:	f7ff fbf4 	bl	b5f08 <_ZNSt14_Function_baseD1Ev>
   b6720:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6724:	f7ff fbf0 	bl	b5f08 <_ZNSt14_Function_baseD1Ev>
   b6728:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b672c:	f7ff fbec 	bl	b5f08 <_ZNSt14_Function_baseD1Ev>
   b6730:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6734:	f7ff fbe8 	bl	b5f08 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6738:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b673c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6740:	42ae      	cmp	r6, r5
   b6742:	d004      	beq.n	b674e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6744:	1d28      	adds	r0, r5, #4
   b6746:	f7ff ffa6 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b674a:	3508      	adds	r5, #8
   b674c:	e7f8      	b.n	b6740 <__tcf_0+0x30>
    ::free(ptr);
   b674e:	69a0      	ldr	r0, [r4, #24]
   b6750:	f7ff fb00 	bl	b5d54 <free>
    ~BleLocalDeviceImpl() = default;
   b6754:	f104 000c 	add.w	r0, r4, #12
   b6758:	f7ff ffbe 	bl	b66d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b675c:	4620      	mov	r0, r4
   b675e:	f7ff ffa9 	bl	b66b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6762:	4620      	mov	r0, r4
   b6764:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b676a:	f7fd bca8 	b.w	b40be <_ZdlPvj>
   b676e:	bd70      	pop	{r4, r5, r6, pc}
   b6770:	2003e6c4 	.word	0x2003e6c4

000b6774 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6774:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6776:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6778:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b677c:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6780:	6803      	ldr	r3, [r0, #0]
   b6782:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6784:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6786:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6788:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b678a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b678c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b678e:	f7ff ff82 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6792:	b002      	add	sp, #8
   b6794:	bd10      	pop	{r4, pc}

000b6796 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6796:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6798:	b510      	push	{r4, lr}
      if (_M_empty())
   b679a:	b90a      	cbnz	r2, b67a0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b679c:	f001 fc4a 	bl	b8034 <_ZSt25__throw_bad_function_callv>
    }
   b67a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b67a4:	68c3      	ldr	r3, [r0, #12]
   b67a6:	4718      	bx	r3

000b67a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b67a8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b67aa:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b67ac:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b67ae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b67b0:	dd03      	ble.n	b67ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b67b2:	f7ff fad7 	bl	b5d64 <realloc>
            if (!d) {
   b67b6:	b918      	cbnz	r0, b67c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b67b8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b67ba:	f7ff facb 	bl	b5d54 <free>
        T* d = nullptr;
   b67be:	2000      	movs	r0, #0
        data_ = d;
   b67c0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b67c2:	60a5      	str	r5, [r4, #8]
        return true;
   b67c4:	2001      	movs	r0, #1
   b67c6:	e7f7      	b.n	b67b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b67c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b67c8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b67ca:	6883      	ldr	r3, [r0, #8]
   b67cc:	428b      	cmp	r3, r1
   b67ce:	da02      	bge.n	b67d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b67d0:	f7ff ffea 	bl	b67a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b67d4:	bd08      	pop	{r3, pc}
    return true;
   b67d6:	2001      	movs	r0, #1
   b67d8:	e7fc      	b.n	b67d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b67da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b67da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67de:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b67e0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b67e2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b67e4:	4419      	add	r1, r3
   b67e6:	6883      	ldr	r3, [r0, #8]
   b67e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b67ea:	4604      	mov	r4, r0
   b67ec:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b67ee:	dc12      	bgt.n	b6816 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b67f0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b67f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b67f4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b67f6:	1bd2      	subs	r2, r2, r7
   b67f8:	4631      	mov	r1, r6
   b67fa:	1970      	adds	r0, r6, r5
   b67fc:	f001 fd58 	bl	b82b0 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6800:	462a      	mov	r2, r5
   b6802:	4641      	mov	r1, r8
   b6804:	4630      	mov	r0, r6
   b6806:	f001 fd45 	bl	b8294 <memcpy>
    size_ += n;
   b680a:	6863      	ldr	r3, [r4, #4]
   b680c:	442b      	add	r3, r5
   b680e:	6063      	str	r3, [r4, #4]
    return true;
   b6810:	2001      	movs	r0, #1
}
   b6812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6816:	f7ff ffc7 	bl	b67a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b681a:	2800      	cmp	r0, #0
   b681c:	d1e8      	bne.n	b67f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b681e:	e7f8      	b.n	b6812 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6820 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6822:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6824:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6828:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b682a:	4604      	mov	r4, r0
   b682c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b682e:	da0b      	bge.n	b6848 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6830:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6832:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6834:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6836:	1b52      	subs	r2, r2, r5
   b6838:	1c48      	adds	r0, r1, #1
   b683a:	f001 fd39 	bl	b82b0 <memmove>
    new(p) T(std::move(value));
   b683e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6840:	6863      	ldr	r3, [r4, #4]
   b6842:	3301      	adds	r3, #1
   b6844:	6063      	str	r3, [r4, #4]
}
   b6846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6848:	3101      	adds	r1, #1
   b684a:	f7ff ffad 	bl	b67a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b684e:	2800      	cmp	r0, #0
   b6850:	d1ee      	bne.n	b6830 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6852:	e7f8      	b.n	b6846 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6854 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6854:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6856:	6841      	ldr	r1, [r0, #4]
   b6858:	f7ff bfe2 	b.w	b6820 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b685c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b685c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6860:	4604      	mov	r4, r0
   b6862:	461d      	mov	r5, r3
   b6864:	460f      	mov	r7, r1
   b6866:	ab01      	add	r3, sp, #4
   b6868:	4690      	mov	r8, r2
   b686a:	460a      	mov	r2, r1
   b686c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6870:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6874:	f7ff fafc 	bl	b5e70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6878:	1cae      	adds	r6, r5, #2
   b687a:	6863      	ldr	r3, [r4, #4]
   b687c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b687e:	f1b9 0f00 	cmp.w	r9, #0
   b6882:	d126      	bne.n	b68d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6884:	b328      	cbz	r0, b68d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6886:	4433      	add	r3, r6
   b6888:	1a1b      	subs	r3, r3, r0
   b688a:	2bff      	cmp	r3, #255	; 0xff
   b688c:	d809      	bhi.n	b68a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b688e:	9901      	ldr	r1, [sp, #4]
   b6890:	4620      	mov	r0, r4
   b6892:	f7ff fe72 	bl	b657a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6896:	6861      	ldr	r1, [r4, #4]
   b6898:	4620      	mov	r0, r4
   b689a:	4431      	add	r1, r6
   b689c:	f7ff ff94 	bl	b67c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b68a0:	b918      	cbnz	r0, b68aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b68a2:	6860      	ldr	r0, [r4, #4]
}
   b68a4:	b003      	add	sp, #12
   b68a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b68aa:	1c6a      	adds	r2, r5, #1
   b68ac:	9901      	ldr	r1, [sp, #4]
   b68ae:	b2d2      	uxtb	r2, r2
   b68b0:	4620      	mov	r0, r4
   b68b2:	f7ff ffb5 	bl	b6820 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b68b6:	9901      	ldr	r1, [sp, #4]
   b68b8:	463a      	mov	r2, r7
   b68ba:	3101      	adds	r1, #1
   b68bc:	4620      	mov	r0, r4
   b68be:	f7ff ffaf 	bl	b6820 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b68c2:	9901      	ldr	r1, [sp, #4]
   b68c4:	462b      	mov	r3, r5
   b68c6:	4642      	mov	r2, r8
   b68c8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b68ca:	4620      	mov	r0, r4
   b68cc:	f7ff ff85 	bl	b67da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b68d0:	e7e7      	b.n	b68a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b68d2:	18f1      	adds	r1, r6, r3
   b68d4:	29ff      	cmp	r1, #255	; 0xff
   b68d6:	d8e4      	bhi.n	b68a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b68d8:	4620      	mov	r0, r4
   b68da:	f7ff ff75 	bl	b67c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b68de:	2800      	cmp	r0, #0
   b68e0:	d0df      	beq.n	b68a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b68e2:	1c69      	adds	r1, r5, #1
   b68e4:	b2c9      	uxtb	r1, r1
   b68e6:	4620      	mov	r0, r4
   b68e8:	f7ff ffb4 	bl	b6854 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b68ec:	4639      	mov	r1, r7
   b68ee:	4620      	mov	r0, r4
   b68f0:	f7ff ffb0 	bl	b6854 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b68f4:	6861      	ldr	r1, [r4, #4]
   b68f6:	462b      	mov	r3, r5
   b68f8:	4642      	mov	r2, r8
   b68fa:	e7e6      	b.n	b68ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b68fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b68fc:	b430      	push	{r4, r5}
   b68fe:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6902:	b11a      	cbz	r2, b690c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6904:	9502      	str	r5, [sp, #8]
}
   b6906:	bc30      	pop	{r4, r5}
   b6908:	f7ff bfa8 	b.w	b685c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b690c:	6840      	ldr	r0, [r0, #4]
}
   b690e:	bc30      	pop	{r4, r5}
   b6910:	4770      	bx	lr

000b6912 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6912:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6914:	2300      	movs	r3, #0
   b6916:	e9c0 3300 	strd	r3, r3, [r0]
   b691a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b691c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b691e:	9300      	str	r3, [sp, #0]
   b6920:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6922:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6926:	4619      	mov	r1, r3
   b6928:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b692c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b692e:	f7ff ffe5 	bl	b68fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6932:	4620      	mov	r0, r4
   b6934:	b004      	add	sp, #16
   b6936:	bd10      	pop	{r4, pc}

000b6938 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6938:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b693c:	4604      	mov	r4, r0
   b693e:	460d      	mov	r5, r1
   b6940:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6942:	d914      	bls.n	b696e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6944:	4290      	cmp	r0, r2
   b6946:	d213      	bcs.n	b6970 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6948:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b694c:	1a75      	subs	r5, r6, r1
   b694e:	f1a1 0708 	sub.w	r7, r1, #8
   b6952:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6954:	42b7      	cmp	r7, r6
   b6956:	d018      	beq.n	b698a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6958:	b11c      	cbz	r4, b6962 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b695a:	4631      	mov	r1, r6
   b695c:	4620      	mov	r0, r4
   b695e:	f7ff fe90 	bl	b6682 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6962:	1d30      	adds	r0, r6, #4
   b6964:	f7ff fe97 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6968:	3e08      	subs	r6, #8
   b696a:	3c08      	subs	r4, #8
   b696c:	e7f2      	b.n	b6954 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b696e:	d00c      	beq.n	b698a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6970:	42b5      	cmp	r5, r6
   b6972:	d00a      	beq.n	b698a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6974:	b11c      	cbz	r4, b697e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6976:	4629      	mov	r1, r5
   b6978:	4620      	mov	r0, r4
   b697a:	f7ff fe82 	bl	b6682 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b697e:	1d28      	adds	r0, r5, #4
   b6980:	f7ff fe89 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6984:	3508      	adds	r5, #8
   b6986:	3408      	adds	r4, #8
   b6988:	e7f2      	b.n	b6970 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b698c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b698c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b698e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6990:	6846      	ldr	r6, [r0, #4]
   b6992:	4668      	mov	r0, sp
   b6994:	f7ff fe75 	bl	b6682 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6998:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b699c:	429f      	cmp	r7, r3
   b699e:	db12      	blt.n	b69c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b69a0:	3701      	adds	r7, #1
        if (n > 0) {
   b69a2:	2f00      	cmp	r7, #0
   b69a4:	dd29      	ble.n	b69fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b69a6:	00f8      	lsls	r0, r7, #3
   b69a8:	f7ff f9cc 	bl	b5d44 <malloc>
            if (!d) {
   b69ac:	4605      	mov	r5, r0
   b69ae:	b1f0      	cbz	r0, b69ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b69b0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b69b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b69b8:	f7ff ffbe 	bl	b6938 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b69bc:	6820      	ldr	r0, [r4, #0]
   b69be:	f7ff f9c9 	bl	b5d54 <free>
        data_ = d;
   b69c2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b69c4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b69c6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b69c8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b69ca:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b69ce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b69d2:	4631      	mov	r1, r6
   b69d4:	f106 0008 	add.w	r0, r6, #8
   b69d8:	f7ff ffae 	bl	b6938 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b69dc:	b11e      	cbz	r6, b69e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b69de:	4669      	mov	r1, sp
   b69e0:	4630      	mov	r0, r6
   b69e2:	f7ff fe4e 	bl	b6682 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b69e6:	6863      	ldr	r3, [r4, #4]
   b69e8:	3301      	adds	r3, #1
   b69ea:	6063      	str	r3, [r4, #4]
    return true;
   b69ec:	2501      	movs	r5, #1
   b69ee:	a801      	add	r0, sp, #4
   b69f0:	f7ff fe51 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b69f4:	4628      	mov	r0, r5
   b69f6:	b003      	add	sp, #12
   b69f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b69fa:	2500      	movs	r5, #0
   b69fc:	e7de      	b.n	b69bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b69fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b69fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6a00:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6a04:	4605      	mov	r5, r0
   b6a06:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6a08:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6a0c:	42a6      	cmp	r6, r4
   b6a0e:	d005      	beq.n	b6a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6a10:	4639      	mov	r1, r7
   b6a12:	4620      	mov	r0, r4
   b6a14:	f7ff fceb 	bl	b63ee <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6a18:	b108      	cbz	r0, b6a1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6a1a:	b914      	cbnz	r4, b6a22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6a1e:	3408      	adds	r4, #8
   b6a20:	e7f4      	b.n	b6a0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6a22:	1d20      	adds	r0, r4, #4
   b6a24:	f7ff fe37 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6a28:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6a2c:	f104 0108 	add.w	r1, r4, #8
   b6a30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6a34:	4620      	mov	r0, r4
   b6a36:	f7ff ff7f 	bl	b6938 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6a3a:	686b      	ldr	r3, [r5, #4]
   b6a3c:	3b01      	subs	r3, #1
   b6a3e:	606b      	str	r3, [r5, #4]
    return true;
   b6a40:	e7ec      	b.n	b6a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b6a44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a48:	4605      	mov	r5, r0
   b6a4a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6a4c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6a4e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6a50:	f7ff fa98 	bl	b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6a54:	682e      	ldr	r6, [r5, #0]
   b6a56:	1ef3      	subs	r3, r6, #3
   b6a58:	2b0d      	cmp	r3, #13
   b6a5a:	d83c      	bhi.n	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6a5c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6a60:	0057000e 	.word	0x0057000e
   b6a64:	00d3003b 	.word	0x00d3003b
   b6a68:	003b003b 	.word	0x003b003b
   b6a6c:	003b003b 	.word	0x003b003b
   b6a70:	009d003b 	.word	0x009d003b
   b6a74:	009d009d 	.word	0x009d009d
   b6a78:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b6a7c:	a804      	add	r0, sp, #16
   b6a7e:	f7ff fc6f 	bl	b6360 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b6a82:	9b04      	ldr	r3, [sp, #16]
   b6a84:	89aa      	ldrh	r2, [r5, #12]
   b6a86:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b6a88:	6869      	ldr	r1, [r5, #4]
   b6a8a:	9804      	ldr	r0, [sp, #16]
   b6a8c:	3108      	adds	r1, #8
   b6a8e:	3002      	adds	r0, #2
   b6a90:	f7ff fa92 	bl	b5fb8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6a94:	a904      	add	r1, sp, #16
   b6a96:	a806      	add	r0, sp, #24
   b6a98:	f7ff fdf3 	bl	b6682 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b6a9c:	a906      	add	r1, sp, #24
   b6a9e:	f104 0018 	add.w	r0, r4, #24
   b6aa2:	f7ff ff73 	bl	b698c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6aa6:	4605      	mov	r5, r0
   b6aa8:	a807      	add	r0, sp, #28
   b6aaa:	f7ff fdf4 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6aae:	b9c5      	cbnz	r5, b6ae2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b6ab0:	2320      	movs	r3, #32
   b6ab2:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b6ab6:	4b5e      	ldr	r3, [pc, #376]	; (b6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6ab8:	495e      	ldr	r1, [pc, #376]	; (b6c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6aba:	9300      	str	r3, [sp, #0]
   b6abc:	aa06      	add	r2, sp, #24
   b6abe:	462b      	mov	r3, r5
   b6ac0:	2001      	movs	r0, #1
   b6ac2:	f7ff f8a3 	bl	b5c0c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b6ac6:	9b04      	ldr	r3, [sp, #16]
   b6ac8:	4629      	mov	r1, r5
   b6aca:	8818      	ldrh	r0, [r3, #0]
   b6acc:	f7fe fe82 	bl	b57d4 <hal_ble_gap_disconnect>
   b6ad0:	a805      	add	r0, sp, #20
   b6ad2:	f7ff fde0 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b6ad6:	a803      	add	r0, sp, #12
   b6ad8:	f7ff fa62 	bl	b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6adc:	b00e      	add	sp, #56	; 0x38
   b6ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b6ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6ae4:	b123      	cbz	r3, b6af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b6ae6:	a904      	add	r1, sp, #16
   b6ae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6aec:	f7ff fe53 	bl	b6796 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6af0:	a805      	add	r0, sp, #20
   b6af2:	f7ff fdd0 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b6af6:	2120      	movs	r1, #32
   b6af8:	2300      	movs	r3, #0
   b6afa:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b6afe:	4a4e      	ldr	r2, [pc, #312]	; (b6c38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b6b00:	9200      	str	r2, [sp, #0]
   b6b02:	494c      	ldr	r1, [pc, #304]	; (b6c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6b04:	aa06      	add	r2, sp, #24
   b6b06:	2001      	movs	r0, #1
   b6b08:	f7ff f880 	bl	b5c0c <log_message>
   b6b0c:	e7e3      	b.n	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6b0e:	89a9      	ldrh	r1, [r5, #12]
   b6b10:	4620      	mov	r0, r4
   b6b12:	f7ff fb8f 	bl	b6234 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6b16:	4606      	mov	r6, r0
   b6b18:	2800      	cmp	r0, #0
   b6b1a:	d0dc      	beq.n	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b6b1c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6b1e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b6b22:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6b26:	8029      	strh	r1, [r5, #0]
   b6b28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6b2c:	429a      	cmp	r2, r3
   b6b2e:	d003      	beq.n	b6b38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b6b30:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6b34:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6b36:	e7f9      	b.n	b6b2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b6b38:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6b3c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6b40:	45b8      	cmp	r8, r7
   b6b42:	d004      	beq.n	b6b4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b6b44:	1d38      	adds	r0, r7, #4
   b6b46:	f7ff fda6 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b4a:	3708      	adds	r7, #8
   b6b4c:	e7f8      	b.n	b6b40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b6b4e:	2300      	movs	r3, #0
   b6b50:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b6b52:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b6b56:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6b5a:	45b8      	cmp	r8, r7
   b6b5c:	d004      	beq.n	b6b68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b6b5e:	1d38      	adds	r0, r7, #4
   b6b60:	f7ff fd99 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b64:	3708      	adds	r7, #8
   b6b66:	e7f8      	b.n	b6b5a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b6b68:	2300      	movs	r3, #0
   b6b6a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6b6c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b6b6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6b70:	b123      	cbz	r3, b6b7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b6b72:	4631      	mov	r1, r6
   b6b74:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6b78:	f7ff fe0d 	bl	b6796 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b6b7c:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6b82:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b6b84:	4631      	mov	r1, r6
   b6b86:	f104 0018 	add.w	r0, r4, #24
   b6b8a:	f7ff ff38 	bl	b69fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b6b8e:	2220      	movs	r2, #32
   b6b90:	2300      	movs	r3, #0
   b6b92:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b6b96:	4a29      	ldr	r2, [pc, #164]	; (b6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b6b98:	e7b2      	b.n	b6b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6b9a:	89a9      	ldrh	r1, [r5, #12]
   b6b9c:	4620      	mov	r0, r4
   b6b9e:	f7ff fb49 	bl	b6234 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6ba2:	2800      	cmp	r0, #0
   b6ba4:	d097      	beq.n	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b6ba6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6ba8:	2b00      	cmp	r3, #0
   b6baa:	d094      	beq.n	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b6bac:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6bae:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6bb0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6bb4:	d001      	beq.n	b6bba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b6bb6:	2e10      	cmp	r6, #16
   b6bb8:	d117      	bne.n	b6bea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b6bba:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b6bbc:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b6bbe:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b6bc0:	2506      	movs	r5, #6
                        };
   b6bc2:	f88d 3015 	strb.w	r3, [sp, #21]
   b6bc6:	9104      	str	r1, [sp, #16]
   b6bc8:	f88d 2014 	strb.w	r2, [sp, #20]
   b6bcc:	9006      	str	r0, [sp, #24]
   b6bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b6bd2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b6bd4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b6bd8:	9508      	str	r5, [sp, #32]
   b6bda:	e883 0003 	stmia.w	r3, {r0, r1}
   b6bde:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6be0:	a906      	add	r1, sp, #24
   b6be2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6be6:	4798      	blx	r3
   b6be8:	e775      	b.n	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b6bea:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6bec:	bf01      	itttt	eq
   b6bee:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b6bf0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6bf2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b6bf6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b6bf8:	bf0f      	iteee	eq
   b6bfa:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b6bfe:	461a      	movne	r2, r3
   b6c00:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b6c02:	461d      	movne	r5, r3
   b6c04:	e7dd      	b.n	b6bc2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6c06:	89a9      	ldrh	r1, [r5, #12]
   b6c08:	4620      	mov	r0, r4
   b6c0a:	f7ff fb13 	bl	b6234 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b6c0e:	4601      	mov	r1, r0
   b6c10:	2800      	cmp	r0, #0
   b6c12:	f43f af60 	beq.w	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6c16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b6c18:	2b00      	cmp	r3, #0
   b6c1a:	f43f af5c 	beq.w	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b6c1e:	686b      	ldr	r3, [r5, #4]
   b6c20:	9306      	str	r3, [sp, #24]
   b6c22:	aa06      	add	r2, sp, #24
   b6c24:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b6c26:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6c2a:	4798      	blx	r3
   b6c2c:	e753      	b.n	b6ad6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6c2e:	bf00      	nop
   b6c30:	000b9228 	.word	0x000b9228
   b6c34:	000b91a7 	.word	0x000b91a7
   b6c38:	000b924e 	.word	0x000b924e
   b6c3c:	000b85ca 	.word	0x000b85ca

000b6c40 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b6c40:	b513      	push	{r0, r1, r4, lr}
   b6c42:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b6c44:	f7ff fbae 	bl	b63a4 <_ZNK8particle13BlePeerDevice9connectedEv>
   b6c48:	b1d0      	cbz	r0, b6c80 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b6c4a:	6823      	ldr	r3, [r4, #0]
   b6c4c:	2100      	movs	r1, #0
   b6c4e:	8818      	ldrh	r0, [r3, #0]
   b6c50:	f7fe fdc0 	bl	b57d4 <hal_ble_gap_disconnect>
   b6c54:	2800      	cmp	r0, #0
   b6c56:	db11      	blt.n	b6c7c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b6c58:	a801      	add	r0, sp, #4
   b6c5a:	f7ff f993 	bl	b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b6c5e:	f7ff fc1d 	bl	b649c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b6c62:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b6c64:	4621      	mov	r1, r4
   b6c66:	3018      	adds	r0, #24
   b6c68:	f7ff fec9 	bl	b69fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b6c6c:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6c72:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b6c74:	a801      	add	r0, sp, #4
   b6c76:	f7ff f993 	bl	b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b6c7a:	2000      	movs	r0, #0
}
   b6c7c:	b002      	add	sp, #8
   b6c7e:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b6c80:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6c84:	e7fa      	b.n	b6c7c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b6c88 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   b6c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c8c:	4604      	mov	r4, r0
   b6c8e:	b08a      	sub	sp, #40	; 0x28
    WiringBleLock lk;
   b6c90:	4668      	mov	r0, sp
   b6c92:	f7ff f977 	bl	b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6c96:	6823      	ldr	r3, [r4, #0]
    for (auto& p : impl()->peers()) {
        hal_ble_conn_info_t connInfo = {};
        connInfo.version = BLE_API_VERSION;
   b6c98:	f8df 806c 	ldr.w	r8, [pc, #108]	; b6d08 <_ZNK8particle14BleLocalDevice10disconnectEv+0x80>
    return data_ + size_;
   b6c9c:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b6ca0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& p : impl()->peers()) {
   b6ca4:	42b4      	cmp	r4, r6
   b6ca6:	d029      	beq.n	b6cfc <_ZNK8particle14BleLocalDevice10disconnectEv+0x74>
        hal_ble_conn_info_t connInfo = {};
   b6ca8:	2220      	movs	r2, #32
   b6caa:	2100      	movs	r1, #0
   b6cac:	a802      	add	r0, sp, #8
        connInfo.version = BLE_API_VERSION;
   b6cae:	f8cd 8004 	str.w	r8, [sp, #4]
        hal_ble_conn_info_t connInfo = {};
   b6cb2:	f001 fb17 	bl	b82e4 <memset>
        connInfo.size = sizeof(hal_ble_conn_info_t);
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   b6cb6:	6823      	ldr	r3, [r4, #0]
   b6cb8:	2200      	movs	r2, #0
   b6cba:	8818      	ldrh	r0, [r3, #0]
   b6cbc:	a901      	add	r1, sp, #4
   b6cbe:	f7fe fdbb 	bl	b5838 <hal_ble_gap_get_connection_info>
   b6cc2:	4605      	mov	r5, r0
   b6cc4:	b108      	cbz	r0, b6cca <_ZNK8particle14BleLocalDevice10disconnectEv+0x42>
    for (auto& p : impl()->peers()) {
   b6cc6:	3408      	adds	r4, #8
   b6cc8:	e7ec      	b.n	b6ca4 <_ZNK8particle14BleLocalDevice10disconnectEv+0x1c>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   b6cca:	f89d 7008 	ldrb.w	r7, [sp, #8]
   b6cce:	2f01      	cmp	r7, #1
   b6cd0:	d1f9      	bne.n	b6cc6 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3e>
   b6cd2:	4e0c      	ldr	r6, [pc, #48]	; (b6d04 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7c>)
   b6cd4:	6830      	ldr	r0, [r6, #0]
   b6cd6:	f7fe fe01 	bl	b58dc <os_mutex_recursive_unlock>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            p.disconnect();
   b6cda:	4620      	mov	r0, r4
        locked_ = false;
   b6cdc:	f88d 5000 	strb.w	r5, [sp]
            p.disconnect();
   b6ce0:	f7ff ffae 	bl	b6c40 <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b6ce4:	6830      	ldr	r0, [r6, #0]
   b6ce6:	f7fe fdf1 	bl	b58cc <os_mutex_recursive_lock>
        locked_ = true;
   b6cea:	f88d 7000 	strb.w	r7, [sp]
    WiringBleLock lk;
   b6cee:	4668      	mov	r0, sp
   b6cf0:	f7ff f956 	bl	b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>
            lk.lock();
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   b6cf4:	4628      	mov	r0, r5
   b6cf6:	b00a      	add	sp, #40	; 0x28
   b6cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   b6cfc:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   b6d00:	e7f5      	b.n	b6cee <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
   b6d02:	bf00      	nop
   b6d04:	2003e6c0 	.word	0x2003e6c0
   b6d08:	00240003 	.word	0x00240003

000b6d0c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6d0c:	b513      	push	{r0, r1, r4, lr}
   b6d0e:	460b      	mov	r3, r1
   b6d10:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d12:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d16:	466c      	mov	r4, sp
   b6d18:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6d1c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6d20:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6d24:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6d28:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6d2c:	b002      	add	sp, #8
   b6d2e:	bd10      	pop	{r4, pc}

000b6d30 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6d30:	b538      	push	{r3, r4, r5, lr}
   b6d32:	4605      	mov	r5, r0
   b6d34:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b6d36:	f7ff ffe9 	bl	b6d0c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d3a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6d3c:	68a2      	ldr	r2, [r4, #8]
   b6d3e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d40:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d42:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6d44:	68e2      	ldr	r2, [r4, #12]
   b6d46:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d48:	60e3      	str	r3, [r4, #12]
      }
   b6d4a:	bd38      	pop	{r3, r4, r5, pc}

000b6d4c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b6d4c:	b570      	push	{r4, r5, r6, lr}
   b6d4e:	4604      	mov	r4, r0
   b6d50:	b08c      	sub	sp, #48	; 0x30
   b6d52:	460e      	mov	r6, r1
   b6d54:	9201      	str	r2, [sp, #4]
   b6d56:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b6d58:	f7ff fa4c 	bl	b61f4 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b6d5c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b6d5e:	9901      	ldr	r1, [sp, #4]
   b6d60:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6d64:	f000 fe20 	bl	b79a8 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6d68:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b6d6c:	b1cd      	cbz	r5, b6da2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b6d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6d70:	9502      	str	r5, [sp, #8]
   b6d72:	a902      	add	r1, sp, #8
   b6d74:	a804      	add	r0, sp, #16
   b6d76:	9303      	str	r3, [sp, #12]
   b6d78:	f7ff fc4c 	bl	b6614 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6d7c:	2300      	movs	r3, #0
	__x.swap(*this);
   b6d7e:	a908      	add	r1, sp, #32
   b6d80:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b6d82:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b6d84:	f7ff ffd4 	bl	b6d30 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b6d88:	4631      	mov	r1, r6
   b6d8a:	a808      	add	r0, sp, #32
   b6d8c:	f7ff ffd0 	bl	b6d30 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6d90:	a808      	add	r0, sp, #32
   b6d92:	f7ff f8b9 	bl	b5f08 <_ZNSt14_Function_baseD1Ev>
   b6d96:	a804      	add	r0, sp, #16
   b6d98:	f7ff f8b6 	bl	b5f08 <_ZNSt14_Function_baseD1Ev>
    }
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	b00c      	add	sp, #48	; 0x30
   b6da0:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b6da2:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b6da4:	e7ea      	b.n	b6d7c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b6da8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b6da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6dac:	b087      	sub	sp, #28
   b6dae:	461d      	mov	r5, r3
   b6db0:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b6db4:	4680      	mov	r8, r0
   b6db6:	468b      	mov	fp, r1
   b6db8:	4692      	mov	sl, r2
   b6dba:	9912      	ldr	r1, [sp, #72]	; 0x48
   b6dbc:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6dbe:	2200      	movs	r2, #0
   b6dc0:	2068      	movs	r0, #104	; 0x68
   b6dc2:	9102      	str	r1, [sp, #8]
   b6dc4:	9204      	str	r2, [sp, #16]
   b6dc6:	f7fd f976 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6dca:	1e06      	subs	r6, r0, #0
   b6dcc:	f106 090c 	add.w	r9, r6, #12
   b6dd0:	d018      	beq.n	b6e04 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b6dd2:	2201      	movs	r2, #1
	: _M_impl(__a)
   b6dd4:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b6dd6:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b6dda:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b6ddc:	4a15      	ldr	r2, [pc, #84]	; (b6e34 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b6dde:	f847 2b20 	str.w	r2, [r7], #32
   b6de2:	9b03      	ldr	r3, [sp, #12]
   b6de4:	9100      	str	r1, [sp, #0]
   b6de6:	465a      	mov	r2, fp
   b6de8:	4651      	mov	r1, sl
   b6dea:	4648      	mov	r0, r9
   b6dec:	f7ff ffae 	bl	b6d4c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b6df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6df2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6df4:	682b      	ldr	r3, [r5, #0]
   b6df6:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6dfa:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b6dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6e00:	6823      	ldr	r3, [r4, #0]
   b6e02:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b6e04:	a904      	add	r1, sp, #16
   b6e06:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6e08:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b6e0c:	f7ff fcb2 	bl	b6774 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b6e10:	a805      	add	r0, sp, #20
   b6e12:	f7ff fc40 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b6e16:	f8d8 3000 	ldr.w	r3, [r8]
   b6e1a:	b93b      	cbnz	r3, b6e2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b6e1c:	4a06      	ldr	r2, [pc, #24]	; (b6e38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b6e1e:	4907      	ldr	r1, [pc, #28]	; (b6e3c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b6e20:	200a      	movs	r0, #10
}
   b6e22:	b007      	add	sp, #28
   b6e24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b6e28:	f7fe bee8 	b.w	b5bfc <panic_>
}
   b6e2c:	b007      	add	sp, #28
   b6e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6e32:	bf00      	nop
   b6e34:	000b92b4 	.word	0x000b92b4
   b6e38:	000b58fd 	.word	0x000b58fd
   b6e3c:	000b9190 	.word	0x000b9190

000b6e40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6e40:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e44:	4604      	mov	r4, r0
   b6e46:	460d      	mov	r5, r1
   b6e48:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6e4a:	d914      	bls.n	b6e76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6e4c:	4290      	cmp	r0, r2
   b6e4e:	d213      	bcs.n	b6e78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6e50:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6e54:	1a75      	subs	r5, r6, r1
   b6e56:	f1a1 0708 	sub.w	r7, r1, #8
   b6e5a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6e5c:	42b7      	cmp	r7, r6
   b6e5e:	d018      	beq.n	b6e92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6e60:	b11c      	cbz	r4, b6e6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6e62:	4631      	mov	r1, r6
   b6e64:	4620      	mov	r0, r4
   b6e66:	f7ff fc02 	bl	b666e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6e6a:	1d30      	adds	r0, r6, #4
   b6e6c:	f7ff fc13 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6e70:	3e08      	subs	r6, #8
   b6e72:	3c08      	subs	r4, #8
   b6e74:	e7f2      	b.n	b6e5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6e76:	d00c      	beq.n	b6e92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6e78:	42b5      	cmp	r5, r6
   b6e7a:	d00a      	beq.n	b6e92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6e7c:	b11c      	cbz	r4, b6e86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6e7e:	4629      	mov	r1, r5
   b6e80:	4620      	mov	r0, r4
   b6e82:	f7ff fbf4 	bl	b666e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6e86:	1d28      	adds	r0, r5, #4
   b6e88:	f7ff fc05 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6e8c:	3508      	adds	r5, #8
   b6e8e:	3408      	adds	r4, #8
   b6e90:	e7f2      	b.n	b6e78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6e94:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6e96:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6e98:	4605      	mov	r5, r0
        if (n > 0) {
   b6e9a:	dd11      	ble.n	b6ec0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6e9c:	00f0      	lsls	r0, r6, #3
   b6e9e:	f7fe ff51 	bl	b5d44 <malloc>
            if (!d) {
   b6ea2:	4604      	mov	r4, r0
   b6ea4:	b158      	cbz	r0, b6ebe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6ea6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6eaa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6eae:	f7ff ffc7 	bl	b6e40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6eb2:	6828      	ldr	r0, [r5, #0]
   b6eb4:	f7fe ff4e 	bl	b5d54 <free>
        data_ = d;
   b6eb8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6eba:	60ae      	str	r6, [r5, #8]
        return true;
   b6ebc:	2001      	movs	r0, #1
    }
   b6ebe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6ec0:	2400      	movs	r4, #0
   b6ec2:	e7f6      	b.n	b6eb2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6ec4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6ec6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6ec8:	6845      	ldr	r5, [r0, #4]
   b6eca:	4668      	mov	r0, sp
   b6ecc:	f7ff fbcf 	bl	b666e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6ed0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6ed4:	4299      	cmp	r1, r3
   b6ed6:	da10      	bge.n	b6efa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6ed8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6eda:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6edc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6ee0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6ee4:	4629      	mov	r1, r5
   b6ee6:	f105 0008 	add.w	r0, r5, #8
   b6eea:	f7ff ffa9 	bl	b6e40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6eee:	b98d      	cbnz	r5, b6f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6ef0:	6863      	ldr	r3, [r4, #4]
   b6ef2:	3301      	adds	r3, #1
   b6ef4:	6063      	str	r3, [r4, #4]
    return true;
   b6ef6:	2601      	movs	r6, #1
   b6ef8:	e006      	b.n	b6f08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6efa:	3101      	adds	r1, #1
   b6efc:	4620      	mov	r0, r4
   b6efe:	f7ff ffc9 	bl	b6e94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6f02:	4606      	mov	r6, r0
   b6f04:	2800      	cmp	r0, #0
   b6f06:	d1e7      	bne.n	b6ed8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6f08:	a801      	add	r0, sp, #4
   b6f0a:	f7ff fbc4 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6f0e:	4630      	mov	r0, r6
   b6f10:	b002      	add	sp, #8
   b6f12:	bd70      	pop	{r4, r5, r6, pc}
   b6f14:	4669      	mov	r1, sp
   b6f16:	4628      	mov	r0, r5
   b6f18:	f7ff fba9 	bl	b666e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6f1c:	e7e8      	b.n	b6ef0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6f1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6f1e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f22:	4604      	mov	r4, r0
   b6f24:	460d      	mov	r5, r1
   b6f26:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6f28:	d914      	bls.n	b6f54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6f2a:	4290      	cmp	r0, r2
   b6f2c:	d213      	bcs.n	b6f56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6f2e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6f32:	1a75      	subs	r5, r6, r1
   b6f34:	f1a1 0708 	sub.w	r7, r1, #8
   b6f38:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6f3a:	42b7      	cmp	r7, r6
   b6f3c:	d018      	beq.n	b6f70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6f3e:	b11c      	cbz	r4, b6f48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6f40:	4631      	mov	r1, r6
   b6f42:	4620      	mov	r0, r4
   b6f44:	f7ff fb85 	bl	b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6f48:	1d30      	adds	r0, r6, #4
   b6f4a:	f7ff fba4 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6f4e:	3e08      	subs	r6, #8
   b6f50:	3c08      	subs	r4, #8
   b6f52:	e7f2      	b.n	b6f3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6f54:	d00c      	beq.n	b6f70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6f56:	42b5      	cmp	r5, r6
   b6f58:	d00a      	beq.n	b6f70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6f5a:	b11c      	cbz	r4, b6f64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6f5c:	4629      	mov	r1, r5
   b6f5e:	4620      	mov	r0, r4
   b6f60:	f7ff fb77 	bl	b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6f64:	1d28      	adds	r0, r5, #4
   b6f66:	f7ff fb96 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6f6a:	3508      	adds	r5, #8
   b6f6c:	3408      	adds	r4, #8
   b6f6e:	e7f2      	b.n	b6f56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6f72:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6f74:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6f76:	4605      	mov	r5, r0
        if (n > 0) {
   b6f78:	dd11      	ble.n	b6f9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6f7a:	00f0      	lsls	r0, r6, #3
   b6f7c:	f7fe fee2 	bl	b5d44 <malloc>
            if (!d) {
   b6f80:	4604      	mov	r4, r0
   b6f82:	b158      	cbz	r0, b6f9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6f84:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6f88:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6f8c:	f7ff ffc7 	bl	b6f1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6f90:	6828      	ldr	r0, [r5, #0]
   b6f92:	f7fe fedf 	bl	b5d54 <free>
        data_ = d;
   b6f96:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6f98:	60ae      	str	r6, [r5, #8]
        return true;
   b6f9a:	2001      	movs	r0, #1
    }
   b6f9c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6f9e:	2400      	movs	r4, #0
   b6fa0:	e7f6      	b.n	b6f90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6fa2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6fa4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6fa6:	6845      	ldr	r5, [r0, #4]
   b6fa8:	4668      	mov	r0, sp
   b6faa:	f7ff fb52 	bl	b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6fae:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6fb2:	4299      	cmp	r1, r3
   b6fb4:	da10      	bge.n	b6fd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6fb6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6fb8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6fba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6fbe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6fc2:	4629      	mov	r1, r5
   b6fc4:	f105 0008 	add.w	r0, r5, #8
   b6fc8:	f7ff ffa9 	bl	b6f1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6fcc:	b98d      	cbnz	r5, b6ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6fce:	6863      	ldr	r3, [r4, #4]
   b6fd0:	3301      	adds	r3, #1
   b6fd2:	6063      	str	r3, [r4, #4]
    return true;
   b6fd4:	2601      	movs	r6, #1
   b6fd6:	e006      	b.n	b6fe6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6fd8:	3101      	adds	r1, #1
   b6fda:	4620      	mov	r0, r4
   b6fdc:	f7ff ffc9 	bl	b6f72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6fe0:	4606      	mov	r6, r0
   b6fe2:	2800      	cmp	r0, #0
   b6fe4:	d1e7      	bne.n	b6fb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6fe6:	a801      	add	r0, sp, #4
   b6fe8:	f7ff fb55 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6fec:	4630      	mov	r0, r6
   b6fee:	b002      	add	sp, #8
   b6ff0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6ff2:	4669      	mov	r1, sp
   b6ff4:	4628      	mov	r0, r5
   b6ff6:	f7ff fb2c 	bl	b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6ffa:	e7e8      	b.n	b6fce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6ffc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7000:	4617      	mov	r7, r2
   b7002:	b0a1      	sub	sp, #132	; 0x84
   b7004:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7006:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7008:	460e      	mov	r6, r1
    WiringBleLock lk;
   b700a:	f7fe ffbb 	bl	b5f84 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b700e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7010:	7923      	ldrb	r3, [r4, #4]
   b7012:	b953      	cbnz	r3, b702a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7014:	4639      	mov	r1, r7
   b7016:	4640      	mov	r0, r8
   b7018:	f7ff fb1b 	bl	b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b701c:	a80a      	add	r0, sp, #40	; 0x28
   b701e:	f7fe ffbf 	bl	b5fa0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7022:	4640      	mov	r0, r8
   b7024:	b021      	add	sp, #132	; 0x84
   b7026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b702a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b702c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7030:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7034:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7036:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b703a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b703e:	9b03      	ldr	r3, [sp, #12]
   b7040:	429d      	cmp	r5, r3
   b7042:	d021      	beq.n	b7088 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7044:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7048:	4658      	mov	r0, fp
   b704a:	f109 0114 	add.w	r1, r9, #20
   b704e:	f7ff f846 	bl	b60de <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7052:	b1b8      	cbz	r0, b7084 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7054:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7058:	4650      	mov	r0, sl
   b705a:	f7ff f840 	bl	b60de <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b705e:	b188      	cbz	r0, b7084 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7060:	6823      	ldr	r3, [r4, #0]
   b7062:	f8d9 2000 	ldr.w	r2, [r9]
   b7066:	4053      	eors	r3, r2
   b7068:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b706c:	d10a      	bne.n	b7084 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b706e:	2220      	movs	r2, #32
   b7070:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7074:	4a5e      	ldr	r2, [pc, #376]	; (b71f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7076:	9200      	str	r2, [sp, #0]
   b7078:	aa15      	add	r2, sp, #84	; 0x54
   b707a:	495e      	ldr	r1, [pc, #376]	; (b71f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b707c:	2032      	movs	r0, #50	; 0x32
   b707e:	f7fe fdc5 	bl	b5c0c <log_message>
   b7082:	e7c7      	b.n	b7014 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7084:	3508      	adds	r5, #8
   b7086:	e7da      	b.n	b703e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7088:	4650      	mov	r0, sl
   b708a:	f7fe fff9 	bl	b6080 <_ZNK8particle7BleUuid7isValidEv>
   b708e:	b960      	cbnz	r0, b70aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7090:	4959      	ldr	r1, [pc, #356]	; (b71f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7092:	2201      	movs	r2, #1
   b7094:	a815      	add	r0, sp, #84	; 0x54
   b7096:	ad15      	add	r5, sp, #84	; 0x54
   b7098:	f7fe ffca 	bl	b6030 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b709c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b709e:	46d4      	mov	ip, sl
   b70a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b70a4:	682b      	ldr	r3, [r5, #0]
   b70a6:	f8cc 3000 	str.w	r3, [ip]
   b70aa:	6833      	ldr	r3, [r6, #0]
   b70ac:	e9d3 5300 	ldrd	r5, r3, [r3]
   b70b0:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b70b4:	455d      	cmp	r5, fp
   b70b6:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b70b8:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b70ba:	d06e      	beq.n	b719a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b70bc:	f855 0b08 	ldr.w	r0, [r5], #8
   b70c0:	f7ff f80d 	bl	b60de <_ZNK8particle7BleUuideqERKS0_>
   b70c4:	2800      	cmp	r0, #0
   b70c6:	d0f5      	beq.n	b70b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b70c8:	f104 0a14 	add.w	sl, r4, #20
   b70cc:	4650      	mov	r0, sl
   b70ce:	f7fe ffd7 	bl	b6080 <_ZNK8particle7BleUuid7isValidEv>
   b70d2:	b988      	cbnz	r0, b70f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b70d4:	4b49      	ldr	r3, [pc, #292]	; (b71fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b70d6:	4948      	ldr	r1, [pc, #288]	; (b71f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b70d8:	881a      	ldrh	r2, [r3, #0]
   b70da:	3201      	adds	r2, #1
   b70dc:	b292      	uxth	r2, r2
   b70de:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b70e0:	a815      	add	r0, sp, #84	; 0x54
   b70e2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b70e4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b70e6:	f7fe ffc2 	bl	b606e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b70ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70ec:	46d4      	mov	ip, sl
   b70ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b70f2:	682b      	ldr	r3, [r5, #0]
   b70f4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b70f8:	4b41      	ldr	r3, [pc, #260]	; (b7200 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b70fa:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b70fc:	2228      	movs	r2, #40	; 0x28
   b70fe:	2100      	movs	r1, #0
   b7100:	a816      	add	r0, sp, #88	; 0x58
   b7102:	f001 f8ef 	bl	b82e4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7106:	4651      	mov	r1, sl
   b7108:	a804      	add	r0, sp, #16
   b710a:	f7fe ffcb 	bl	b60a4 <_ZN8particle7BleUuid7halUUIDEv>
   b710e:	ab04      	add	r3, sp, #16
   b7110:	aa18      	add	r2, sp, #96	; 0x60
   b7112:	f10d 0c20 	add.w	ip, sp, #32
   b7116:	6818      	ldr	r0, [r3, #0]
   b7118:	6859      	ldr	r1, [r3, #4]
   b711a:	4615      	mov	r5, r2
   b711c:	c503      	stmia	r5!, {r0, r1}
   b711e:	3308      	adds	r3, #8
   b7120:	4563      	cmp	r3, ip
   b7122:	462a      	mov	r2, r5
   b7124:	d1f7      	bne.n	b7116 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7126:	6818      	ldr	r0, [r3, #0]
   b7128:	6028      	str	r0, [r5, #0]
    return value_;
   b712a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b712c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7130:	f8d9 3000 	ldr.w	r3, [r9]
   b7134:	8a9b      	ldrh	r3, [r3, #20]
   b7136:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b713a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b713c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b713e:	4b31      	ldr	r3, [pc, #196]	; (b7204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7140:	2200      	movs	r2, #0
   b7142:	1da1      	adds	r1, r4, #6
   b7144:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7146:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b714a:	f7fe fb7f 	bl	b584c <hal_ble_gatt_server_add_characteristic>
   b714e:	2800      	cmp	r0, #0
   b7150:	f47f af60 	bne.w	b7014 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7154:	2301      	movs	r3, #1
   b7156:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7158:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b715a:	4639      	mov	r1, r7
        return characteristics_;
   b715c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b715e:	a80d      	add	r0, sp, #52	; 0x34
   b7160:	f7ff fa77 	bl	b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7164:	4620      	mov	r0, r4
   b7166:	a90d      	add	r1, sp, #52	; 0x34
   b7168:	f7ff ff1b 	bl	b6fa2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b716c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b716e:	a80e      	add	r0, sp, #56	; 0x38
   b7170:	f7ff fa91 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7174:	2c00      	cmp	r4, #0
   b7176:	f47f af4d 	bne.w	b7014 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b717a:	2320      	movs	r3, #32
   b717c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7180:	4b21      	ldr	r3, [pc, #132]	; (b7208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7182:	9300      	str	r3, [sp, #0]
   b7184:	aa0d      	add	r2, sp, #52	; 0x34
   b7186:	4623      	mov	r3, r4
   b7188:	e777      	b.n	b707a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b718a:	4639      	mov	r1, r7
   b718c:	4640      	mov	r0, r8
   b718e:	f7ff fa60 	bl	b6652 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7192:	a80c      	add	r0, sp, #48	; 0x30
   b7194:	f7ff fa7f 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7198:	e740      	b.n	b701c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b719a:	a80b      	add	r0, sp, #44	; 0x2c
   b719c:	f7ff f8bc 	bl	b6318 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b71a0:	4651      	mov	r1, sl
   b71a2:	a815      	add	r0, sp, #84	; 0x54
   b71a4:	f7fe ff7e 	bl	b60a4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b71a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b71aa:	2300      	movs	r3, #0
   b71ac:	3214      	adds	r2, #20
   b71ae:	a915      	add	r1, sp, #84	; 0x54
   b71b0:	2001      	movs	r0, #1
   b71b2:	f7fe fb19 	bl	b57e8 <hal_ble_gatt_server_add_service>
   b71b6:	2800      	cmp	r0, #0
   b71b8:	d1e7      	bne.n	b718a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b71ba:	6835      	ldr	r5, [r6, #0]
   b71bc:	a90b      	add	r1, sp, #44	; 0x2c
   b71be:	a80d      	add	r0, sp, #52	; 0x34
   b71c0:	f7ff fa55 	bl	b666e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b71c4:	4628      	mov	r0, r5
   b71c6:	a90d      	add	r1, sp, #52	; 0x34
   b71c8:	f7ff fe7c 	bl	b6ec4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b71cc:	4605      	mov	r5, r0
   b71ce:	a80e      	add	r0, sp, #56	; 0x38
   b71d0:	f7ff fa61 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71d4:	2d00      	cmp	r5, #0
   b71d6:	d0d8      	beq.n	b718a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b71d8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b71da:	6853      	ldr	r3, [r2, #4]
   b71dc:	6812      	ldr	r2, [r2, #0]
   b71de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b71e2:	3b01      	subs	r3, #1
   b71e4:	a80c      	add	r0, sp, #48	; 0x30
   b71e6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b71ea:	f7ff fa54 	bl	b6696 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71ee:	e76b      	b.n	b70c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b71f0:	000b9258 	.word	0x000b9258
   b71f4:	000b91a7 	.word	0x000b91a7
   b71f8:	000b9308 	.word	0x000b9308
   b71fc:	2003e6bc 	.word	0x2003e6bc
   b7200:	002c0003 	.word	0x002c0003
   b7204:	000b64d5 	.word	0x000b64d5
   b7208:	000b9283 	.word	0x000b9283

000b720c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b720c:	4802      	ldr	r0, [pc, #8]	; (b7218 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b720e:	2300      	movs	r3, #0
   b7210:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7212:	f7fe bb53 	b.w	b58bc <os_mutex_recursive_create>
   b7216:	bf00      	nop
   b7218:	2003e6c0 	.word	0x2003e6c0

000b721c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b721c:	2200      	movs	r2, #0
   b721e:	6840      	ldr	r0, [r0, #4]
   b7220:	4611      	mov	r1, r2
   b7222:	f7fe bd67 	b.w	b5cf4 <network_listening>

000b7226 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7226:	2200      	movs	r2, #0
   b7228:	6840      	ldr	r0, [r0, #4]
   b722a:	4611      	mov	r1, r2
   b722c:	f7fe bd72 	b.w	b5d14 <network_get_listen_timeout>

000b7230 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7230:	6840      	ldr	r0, [r0, #4]
   b7232:	2200      	movs	r2, #0
   b7234:	f7fe bd66 	b.w	b5d04 <network_set_listen_timeout>

000b7238 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7238:	6840      	ldr	r0, [r0, #4]
   b723a:	2200      	movs	r2, #0
   b723c:	f081 0101 	eor.w	r1, r1, #1
   b7240:	f7fe bd50 	b.w	b5ce4 <network_listen>

000b7244 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7244:	2300      	movs	r3, #0
   b7246:	6840      	ldr	r0, [r0, #4]
   b7248:	461a      	mov	r2, r3
   b724a:	4619      	mov	r1, r3
   b724c:	f7fe bd42 	b.w	b5cd4 <network_off>

000b7250 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7250:	2300      	movs	r3, #0
   b7252:	6840      	ldr	r0, [r0, #4]
   b7254:	461a      	mov	r2, r3
   b7256:	4619      	mov	r1, r3
   b7258:	f7fe bd34 	b.w	b5cc4 <network_on>

000b725c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b725c:	2200      	movs	r2, #0
   b725e:	6840      	ldr	r0, [r0, #4]
   b7260:	4611      	mov	r1, r2
   b7262:	f7fe bd27 	b.w	b5cb4 <network_ready>

000b7266 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7266:	2200      	movs	r2, #0
   b7268:	6840      	ldr	r0, [r0, #4]
   b726a:	4611      	mov	r1, r2
   b726c:	f7fe bd12 	b.w	b5c94 <network_connecting>

000b7270 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7270:	6840      	ldr	r0, [r0, #4]
   b7272:	2200      	movs	r2, #0
   b7274:	2102      	movs	r1, #2
   b7276:	f7fe bd15 	b.w	b5ca4 <network_disconnect>

000b727a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b727a:	2300      	movs	r3, #0
   b727c:	6840      	ldr	r0, [r0, #4]
   b727e:	461a      	mov	r2, r3
   b7280:	f7fe bd00 	b.w	b5c84 <network_connect>

000b7284 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7284:	4b02      	ldr	r3, [pc, #8]	; (b7290 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7286:	2203      	movs	r2, #3
   b7288:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b728a:	4a02      	ldr	r2, [pc, #8]	; (b7294 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b728c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b728e:	4770      	bx	lr
   b7290:	2003e6c8 	.word	0x2003e6c8
   b7294:	000b9330 	.word	0x000b9330

000b7298 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7298:	4770      	bx	lr

000b729a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b729a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b729c:	4606      	mov	r6, r0
   b729e:	4615      	mov	r5, r2
   b72a0:	460c      	mov	r4, r1
   b72a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b72a4:	42bc      	cmp	r4, r7
   b72a6:	d006      	beq.n	b72b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b72a8:	6833      	ldr	r3, [r6, #0]
   b72aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b72ae:	689b      	ldr	r3, [r3, #8]
   b72b0:	4630      	mov	r0, r6
   b72b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b72b4:	e7f6      	b.n	b72a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b72b6:	4628      	mov	r0, r5
   b72b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b72ba:	7c00      	ldrb	r0, [r0, #16]
   b72bc:	2200      	movs	r2, #0
   b72be:	f7fe bb6d 	b.w	b599c <hal_i2c_write>

000b72c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b72c2:	7c00      	ldrb	r0, [r0, #16]
   b72c4:	2100      	movs	r1, #0
   b72c6:	f7fe bb71 	b.w	b59ac <hal_i2c_available>

000b72ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b72ca:	7c00      	ldrb	r0, [r0, #16]
   b72cc:	2100      	movs	r1, #0
   b72ce:	f7fe bb75 	b.w	b59bc <hal_i2c_read>

000b72d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b72d2:	7c00      	ldrb	r0, [r0, #16]
   b72d4:	2100      	movs	r1, #0
   b72d6:	f7fe bb79 	b.w	b59cc <hal_i2c_peek>

000b72da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b72da:	7c00      	ldrb	r0, [r0, #16]
   b72dc:	2100      	movs	r1, #0
   b72de:	f7fe bb7d 	b.w	b59dc <hal_i2c_flush>

000b72e2 <_ZN7TwoWireD0Ev>:
   b72e2:	b510      	push	{r4, lr}
   b72e4:	2114      	movs	r1, #20
   b72e6:	4604      	mov	r4, r0
   b72e8:	f7fc fee9 	bl	b40be <_ZdlPvj>
   b72ec:	4620      	mov	r0, r4
   b72ee:	bd10      	pop	{r4, pc}

000b72f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b72f0:	b538      	push	{r3, r4, r5, lr}
   b72f2:	4604      	mov	r4, r0
   b72f4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b72f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b72fa:	2200      	movs	r2, #0
   b72fc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7300:	4b09      	ldr	r3, [pc, #36]	; (b7328 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7302:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7304:	4608      	mov	r0, r1
   b7306:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7308:	4629      	mov	r1, r5
   b730a:	f7fe fb77 	bl	b59fc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b730e:	30bf      	adds	r0, #191	; 0xbf
   b7310:	d108      	bne.n	b7324 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7312:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7314:	07db      	lsls	r3, r3, #31
   b7316:	d505      	bpl.n	b7324 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7318:	6868      	ldr	r0, [r5, #4]
   b731a:	f7fe fd1b 	bl	b5d54 <free>
    free(conf.tx_buffer);
   b731e:	68e8      	ldr	r0, [r5, #12]
   b7320:	f7fe fd18 	bl	b5d54 <free>
}
   b7324:	4620      	mov	r0, r4
   b7326:	bd38      	pop	{r3, r4, r5, pc}
   b7328:	000b936c 	.word	0x000b936c

000b732c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b732c:	7c00      	ldrb	r0, [r0, #16]
   b732e:	2200      	movs	r2, #0
   b7330:	f7fe bb14 	b.w	b595c <hal_i2c_set_speed>

000b7334 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7334:	2300      	movs	r3, #0
   b7336:	7c00      	ldrb	r0, [r0, #16]
   b7338:	461a      	mov	r2, r3
   b733a:	4619      	mov	r1, r3
   b733c:	f7fe bb16 	b.w	b596c <hal_i2c_begin>

000b7340 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7340:	7c00      	ldrb	r0, [r0, #16]
   b7342:	2200      	movs	r2, #0
   b7344:	f7fe bb1a 	b.w	b597c <hal_i2c_begin_transmission>

000b7348 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7348:	b2c9      	uxtb	r1, r1
   b734a:	f7ff bff9 	b.w	b7340 <_ZN7TwoWire17beginTransmissionEh>

000b734e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b734e:	7c00      	ldrb	r0, [r0, #16]
   b7350:	2200      	movs	r2, #0
   b7352:	f7fe bb1b 	b.w	b598c <hal_i2c_end_transmission>

000b7356 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7356:	2101      	movs	r1, #1
   b7358:	f7ff bff9 	b.w	b734e <_ZN7TwoWire15endTransmissionEh>

000b735c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b735c:	4770      	bx	lr

000b735e <_ZN9IPAddressD0Ev>:
   b735e:	b510      	push	{r4, lr}
   b7360:	2118      	movs	r1, #24
   b7362:	4604      	mov	r4, r0
   b7364:	f7fc feab 	bl	b40be <_ZdlPvj>
   b7368:	4620      	mov	r0, r4
   b736a:	bd10      	pop	{r4, pc}

000b736c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b736c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b736e:	7d03      	ldrb	r3, [r0, #20]
   b7370:	2b06      	cmp	r3, #6
{
   b7372:	b08d      	sub	sp, #52	; 0x34
   b7374:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7376:	f100 0704 	add.w	r7, r0, #4
   b737a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b737e:	d012      	beq.n	b73a6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7380:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7384:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7388:	220a      	movs	r2, #10
   b738a:	4630      	mov	r0, r6
   b738c:	f000 f95d 	bl	b764a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7390:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7392:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7394:	d019      	beq.n	b73ca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7396:	2c00      	cmp	r4, #0
   b7398:	d0f4      	beq.n	b7384 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b739a:	212e      	movs	r1, #46	; 0x2e
   b739c:	4630      	mov	r0, r6
   b739e:	f000 f93b 	bl	b7618 <_ZN5Print5printEc>
   b73a2:	4404      	add	r4, r0
   b73a4:	e7ee      	b.n	b7384 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73a6:	232f      	movs	r3, #47	; 0x2f
   b73a8:	466a      	mov	r2, sp
   b73aa:	4639      	mov	r1, r7
   b73ac:	200a      	movs	r0, #10
		buf[0] = 0;
   b73ae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73b2:	f7fe fb2b 	bl	b5a0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b73b6:	4668      	mov	r0, sp
   b73b8:	f7fc fe3a 	bl	b4030 <strlen>
   b73bc:	6833      	ldr	r3, [r6, #0]
   b73be:	4602      	mov	r2, r0
   b73c0:	68db      	ldr	r3, [r3, #12]
   b73c2:	4669      	mov	r1, sp
   b73c4:	4630      	mov	r0, r6
   b73c6:	4798      	blx	r3
   b73c8:	4604      	mov	r4, r0
    }
    return n;
}
   b73ca:	4620      	mov	r0, r4
   b73cc:	b00d      	add	sp, #52	; 0x34
   b73ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b73d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b73d0:	b510      	push	{r4, lr}
   b73d2:	4b05      	ldr	r3, [pc, #20]	; (b73e8 <_ZN9IPAddressC1Ev+0x18>)
   b73d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b73d6:	2211      	movs	r2, #17
   b73d8:	f840 3b04 	str.w	r3, [r0], #4
   b73dc:	2100      	movs	r1, #0
   b73de:	f000 ff81 	bl	b82e4 <memset>
}
   b73e2:	4620      	mov	r0, r4
   b73e4:	bd10      	pop	{r4, pc}
   b73e6:	bf00      	nop
   b73e8:	000b9394 	.word	0x000b9394

000b73ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b73ec:	4603      	mov	r3, r0
   b73ee:	4a07      	ldr	r2, [pc, #28]	; (b740c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b73f0:	b510      	push	{r4, lr}
   b73f2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b73f6:	f101 0210 	add.w	r2, r1, #16
   b73fa:	f851 4b04 	ldr.w	r4, [r1], #4
   b73fe:	f843 4b04 	str.w	r4, [r3], #4
   b7402:	4291      	cmp	r1, r2
   b7404:	d1f9      	bne.n	b73fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7406:	780a      	ldrb	r2, [r1, #0]
   b7408:	701a      	strb	r2, [r3, #0]
}
   b740a:	bd10      	pop	{r4, pc}
   b740c:	000b9394 	.word	0x000b9394

000b7410 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7410:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7412:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7416:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b741a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b741e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7422:	2304      	movs	r3, #4
   b7424:	6041      	str	r1, [r0, #4]
   b7426:	7503      	strb	r3, [r0, #20]
}
   b7428:	bd10      	pop	{r4, pc}
	...

000b742c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b742c:	b507      	push	{r0, r1, r2, lr}
   b742e:	4b06      	ldr	r3, [pc, #24]	; (b7448 <_ZN9IPAddressC1EPKh+0x1c>)
   b7430:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7432:	78cb      	ldrb	r3, [r1, #3]
   b7434:	9300      	str	r3, [sp, #0]
   b7436:	788b      	ldrb	r3, [r1, #2]
   b7438:	784a      	ldrb	r2, [r1, #1]
   b743a:	7809      	ldrb	r1, [r1, #0]
   b743c:	f7ff ffe8 	bl	b7410 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7440:	b003      	add	sp, #12
   b7442:	f85d fb04 	ldr.w	pc, [sp], #4
   b7446:	bf00      	nop
   b7448:	000b9394 	.word	0x000b9394

000b744c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b744c:	4b01      	ldr	r3, [pc, #4]	; (b7454 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b744e:	4a02      	ldr	r2, [pc, #8]	; (b7458 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7450:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7452:	4770      	bx	lr
   b7454:	2003e6d0 	.word	0x2003e6d0
   b7458:	000b93a0 	.word	0x000b93a0

000b745c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b745c:	2300      	movs	r3, #0
   b745e:	6840      	ldr	r0, [r0, #4]
   b7460:	461a      	mov	r2, r3
   b7462:	f7fe bc0f 	b.w	b5c84 <network_connect>

000b7466 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7466:	6840      	ldr	r0, [r0, #4]
   b7468:	2200      	movs	r2, #0
   b746a:	2102      	movs	r1, #2
   b746c:	f7fe bc1a 	b.w	b5ca4 <network_disconnect>

000b7470 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7470:	2200      	movs	r2, #0
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	4611      	mov	r1, r2
   b7476:	f7fe bc0d 	b.w	b5c94 <network_connecting>

000b747a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b747a:	2200      	movs	r2, #0
   b747c:	6840      	ldr	r0, [r0, #4]
   b747e:	4611      	mov	r1, r2
   b7480:	f7fe bc18 	b.w	b5cb4 <network_ready>

000b7484 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7484:	2300      	movs	r3, #0
   b7486:	6840      	ldr	r0, [r0, #4]
   b7488:	461a      	mov	r2, r3
   b748a:	4619      	mov	r1, r3
   b748c:	f7fe bc1a 	b.w	b5cc4 <network_on>

000b7490 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7490:	2300      	movs	r3, #0
   b7492:	6840      	ldr	r0, [r0, #4]
   b7494:	461a      	mov	r2, r3
   b7496:	4619      	mov	r1, r3
   b7498:	f7fe bc1c 	b.w	b5cd4 <network_off>

000b749c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b749c:	6840      	ldr	r0, [r0, #4]
   b749e:	2100      	movs	r1, #0
   b74a0:	f7fe bc40 	b.w	b5d24 <network_is_on>

000b74a4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b74a4:	6840      	ldr	r0, [r0, #4]
   b74a6:	2100      	movs	r1, #0
   b74a8:	f7fe bc44 	b.w	b5d34 <network_is_off>

000b74ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b74ac:	6840      	ldr	r0, [r0, #4]
   b74ae:	2200      	movs	r2, #0
   b74b0:	f081 0101 	eor.w	r1, r1, #1
   b74b4:	f7fe bc16 	b.w	b5ce4 <network_listen>

000b74b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b74b8:	6840      	ldr	r0, [r0, #4]
   b74ba:	2200      	movs	r2, #0
   b74bc:	f7fe bc22 	b.w	b5d04 <network_set_listen_timeout>

000b74c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b74c0:	2200      	movs	r2, #0
   b74c2:	6840      	ldr	r0, [r0, #4]
   b74c4:	4611      	mov	r1, r2
   b74c6:	f7fe bc25 	b.w	b5d14 <network_get_listen_timeout>

000b74ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b74ca:	2200      	movs	r2, #0
   b74cc:	6840      	ldr	r0, [r0, #4]
   b74ce:	4611      	mov	r1, r2
   b74d0:	f7fe bc10 	b.w	b5cf4 <network_listening>

000b74d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b74d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74d8:	b095      	sub	sp, #84	; 0x54
   b74da:	4614      	mov	r4, r2
   b74dc:	460d      	mov	r5, r1
   b74de:	4607      	mov	r7, r0
    IPAddress addr;
   b74e0:	f7ff ff76 	bl	b73d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b74e4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b74e6:	221c      	movs	r2, #28
   b74e8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b74ea:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b74ec:	f000 fefa 	bl	b82e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b74f0:	2340      	movs	r3, #64	; 0x40
   b74f2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b74f4:	4620      	mov	r0, r4
   b74f6:	466b      	mov	r3, sp
   b74f8:	aa0c      	add	r2, sp, #48	; 0x30
   b74fa:	2100      	movs	r1, #0
   b74fc:	f7fe fa96 	bl	b5a2c <netdb_getaddrinfo>
    if (!r) {
   b7500:	4604      	mov	r4, r0
   b7502:	2800      	cmp	r0, #0
   b7504:	d14b      	bne.n	b759e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7506:	4602      	mov	r2, r0
   b7508:	2101      	movs	r1, #1
   b750a:	6868      	ldr	r0, [r5, #4]
   b750c:	f7fe fbd2 	bl	b5cb4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7510:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7512:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7514:	4622      	mov	r2, r4
   b7516:	6868      	ldr	r0, [r5, #4]
   b7518:	f7fe fbcc 	bl	b5cb4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b751c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b751e:	4681      	mov	r9, r0
        bool ok = false;
   b7520:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7522:	2e00      	cmp	r6, #0
   b7524:	d03b      	beq.n	b759e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7526:	2900      	cmp	r1, #0
   b7528:	d139      	bne.n	b759e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b752a:	6873      	ldr	r3, [r6, #4]
   b752c:	2b02      	cmp	r3, #2
   b752e:	d003      	beq.n	b7538 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7530:	2b0a      	cmp	r3, #10
   b7532:	d011      	beq.n	b7558 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7534:	69f6      	ldr	r6, [r6, #28]
   b7536:	e7f4      	b.n	b7522 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7538:	f1b8 0f00 	cmp.w	r8, #0
   b753c:	d0fa      	beq.n	b7534 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b753e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7540:	a806      	add	r0, sp, #24
   b7542:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7544:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7546:	f7ff ff71 	bl	b742c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b754a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b754c:	1d3c      	adds	r4, r7, #4
   b754e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7550:	682b      	ldr	r3, [r5, #0]
   b7552:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7554:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7556:	e7ed      	b.n	b7534 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7558:	f1b9 0f00 	cmp.w	r9, #0
   b755c:	d0ea      	beq.n	b7534 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b755e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7560:	2210      	movs	r2, #16
   b7562:	a801      	add	r0, sp, #4
   b7564:	f000 febe 	bl	b82e4 <memset>
                    a.v = 6;
   b7568:	2306      	movs	r3, #6
   b756a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b756e:	ad01      	add	r5, sp, #4
   b7570:	f104 0308 	add.w	r3, r4, #8
   b7574:	3418      	adds	r4, #24
   b7576:	6818      	ldr	r0, [r3, #0]
   b7578:	6859      	ldr	r1, [r3, #4]
   b757a:	462a      	mov	r2, r5
   b757c:	c203      	stmia	r2!, {r0, r1}
   b757e:	3308      	adds	r3, #8
   b7580:	42a3      	cmp	r3, r4
   b7582:	4615      	mov	r5, r2
   b7584:	d1f7      	bne.n	b7576 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7586:	a901      	add	r1, sp, #4
   b7588:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b758a:	ad07      	add	r5, sp, #28
   b758c:	f7ff ff2e 	bl	b73ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7592:	1d3c      	adds	r4, r7, #4
   b7594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7596:	682b      	ldr	r3, [r5, #0]
   b7598:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b759a:	4649      	mov	r1, r9
   b759c:	e7ca      	b.n	b7534 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b759e:	9800      	ldr	r0, [sp, #0]
   b75a0:	f7fe fa3c 	bl	b5a1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b75a4:	4638      	mov	r0, r7
   b75a6:	b015      	add	sp, #84	; 0x54
   b75a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b75ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b75ac:	4b02      	ldr	r3, [pc, #8]	; (b75b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b75ae:	4a03      	ldr	r2, [pc, #12]	; (b75bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b75b0:	601a      	str	r2, [r3, #0]
   b75b2:	2200      	movs	r2, #0
   b75b4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b75b6:	4770      	bx	lr
   b75b8:	2003e6d4 	.word	0x2003e6d4
   b75bc:	000b93ac 	.word	0x000b93ac

000b75c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b75c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75c2:	4606      	mov	r6, r0
   b75c4:	460d      	mov	r5, r1
  size_t n = 0;
   b75c6:	188f      	adds	r7, r1, r2
   b75c8:	2400      	movs	r4, #0
  while (size--) {
   b75ca:	42bd      	cmp	r5, r7
   b75cc:	d00c      	beq.n	b75e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b75ce:	6833      	ldr	r3, [r6, #0]
   b75d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b75d4:	689b      	ldr	r3, [r3, #8]
   b75d6:	4630      	mov	r0, r6
   b75d8:	4798      	blx	r3
     if (chunk>=0)
   b75da:	1e03      	subs	r3, r0, #0
   b75dc:	db01      	blt.n	b75e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b75de:	441c      	add	r4, r3
  while (size--) {
   b75e0:	e7f3      	b.n	b75ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b75e2:	2c00      	cmp	r4, #0
   b75e4:	bf08      	it	eq
   b75e6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b75e8:	4620      	mov	r0, r4
   b75ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75ec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b75ec:	b513      	push	{r0, r1, r4, lr}
   b75ee:	4604      	mov	r4, r0
    }
   b75f0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b75f2:	b159      	cbz	r1, b760c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b75f4:	9101      	str	r1, [sp, #4]
   b75f6:	f7fc fd1b 	bl	b4030 <strlen>
   b75fa:	6823      	ldr	r3, [r4, #0]
   b75fc:	9901      	ldr	r1, [sp, #4]
   b75fe:	68db      	ldr	r3, [r3, #12]
   b7600:	4602      	mov	r2, r0
   b7602:	4620      	mov	r0, r4
    }
   b7604:	b002      	add	sp, #8
   b7606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b760a:	4718      	bx	r3
    }
   b760c:	b002      	add	sp, #8
   b760e:	bd10      	pop	{r4, pc}

000b7610 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7610:	b508      	push	{r3, lr}
  return write(str);
   b7612:	f7ff ffeb 	bl	b75ec <_ZN5Print5writeEPKc>
}
   b7616:	bd08      	pop	{r3, pc}

000b7618 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7618:	6803      	ldr	r3, [r0, #0]
   b761a:	689b      	ldr	r3, [r3, #8]
   b761c:	4718      	bx	r3

000b761e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b761e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7620:	210d      	movs	r1, #13
{
   b7622:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7624:	f7ff fff8 	bl	b7618 <_ZN5Print5printEc>
  n += print('\n');
   b7628:	210a      	movs	r1, #10
  size_t n = print('\r');
   b762a:	4604      	mov	r4, r0
  n += print('\n');
   b762c:	4628      	mov	r0, r5
   b762e:	f7ff fff3 	bl	b7618 <_ZN5Print5printEc>
  return n;
}
   b7632:	4420      	add	r0, r4
   b7634:	bd38      	pop	{r3, r4, r5, pc}

000b7636 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7636:	b538      	push	{r3, r4, r5, lr}
   b7638:	4605      	mov	r5, r0
  return write(str);
   b763a:	f7ff ffd7 	bl	b75ec <_ZN5Print5writeEPKc>
   b763e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7640:	4628      	mov	r0, r5
   b7642:	f7ff ffec 	bl	b761e <_ZN5Print7printlnEv>
  return n;
}
   b7646:	4420      	add	r0, r4
   b7648:	bd38      	pop	{r3, r4, r5, pc}

000b764a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b764a:	b530      	push	{r4, r5, lr}
   b764c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b764e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7650:	2a01      	cmp	r2, #1
  *str = '\0';
   b7652:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7656:	bf98      	it	ls
   b7658:	220a      	movls	r2, #10
   b765a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b765c:	460d      	mov	r5, r1
   b765e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7662:	fb01 5312 	mls	r3, r1, r2, r5
   b7666:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b766a:	2b09      	cmp	r3, #9
   b766c:	bf94      	ite	ls
   b766e:	3330      	addls	r3, #48	; 0x30
   b7670:	3337      	addhi	r3, #55	; 0x37
   b7672:	b2db      	uxtb	r3, r3
  } while(n);
   b7674:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7676:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b767a:	d9ef      	bls.n	b765c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b767c:	4621      	mov	r1, r4
   b767e:	f7ff ffb5 	bl	b75ec <_ZN5Print5writeEPKc>
}
   b7682:	b00b      	add	sp, #44	; 0x2c
   b7684:	bd30      	pop	{r4, r5, pc}

000b7686 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b768a:	b086      	sub	sp, #24
   b768c:	af00      	add	r7, sp, #0
   b768e:	4605      	mov	r5, r0
   b7690:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7692:	1d38      	adds	r0, r7, #4
   b7694:	2114      	movs	r1, #20
{
   b7696:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7698:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b769a:	f7fe fb6b 	bl	b5d74 <vsnprintf>

    if (n<bufsize)
   b769e:	2813      	cmp	r0, #19
   b76a0:	d80e      	bhi.n	b76c0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b76a2:	1d39      	adds	r1, r7, #4
   b76a4:	4628      	mov	r0, r5
   b76a6:	f7ff ffa1 	bl	b75ec <_ZN5Print5writeEPKc>
   b76aa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b76ac:	b11e      	cbz	r6, b76b6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b76ae:	4628      	mov	r0, r5
   b76b0:	f7ff ffb5 	bl	b761e <_ZN5Print7printlnEv>
   b76b4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b76b6:	4620      	mov	r0, r4
   b76b8:	3718      	adds	r7, #24
   b76ba:	46bd      	mov	sp, r7
   b76bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b76c0:	f100 0308 	add.w	r3, r0, #8
   b76c4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b76c8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b76ca:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b76ce:	4622      	mov	r2, r4
   b76d0:	1c41      	adds	r1, r0, #1
   b76d2:	683b      	ldr	r3, [r7, #0]
   b76d4:	4668      	mov	r0, sp
   b76d6:	f7fe fb4d 	bl	b5d74 <vsnprintf>
  return write(str);
   b76da:	4669      	mov	r1, sp
   b76dc:	4628      	mov	r0, r5
   b76de:	f7ff ff85 	bl	b75ec <_ZN5Print5writeEPKc>
   b76e2:	4604      	mov	r4, r0
   b76e4:	46c5      	mov	sp, r8
   b76e6:	e7e1      	b.n	b76ac <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b76e8 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b76e8:	b510      	push	{r4, lr}
   b76ea:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b76ec:	f7fe fa76 	bl	b5bdc <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b76f0:	4284      	cmp	r4, r0
   b76f2:	d008      	beq.n	b7706 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b76f4:	b11c      	cbz	r4, b76fe <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b76f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b76fa:	f7fe ba5f 	b.w	b5bbc <LED_Signaling_Start>
}
   b76fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b7702:	f7fe ba63 	b.w	b5bcc <LED_Signaling_Stop>
}
   b7706:	bd10      	pop	{r4, pc}

000b7708 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b7708:	b570      	push	{r4, r5, r6, lr}
   b770a:	4605      	mov	r5, r0
   b770c:	460e      	mov	r6, r1
   b770e:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b7710:	f7fe fa64 	bl	b5bdc <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b7714:	b150      	cbz	r0, b772c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b7716:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b771a:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b771e:	f7fe fa45 	bl	b5bac <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b7722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b7726:	20e7      	movs	r0, #231	; 0xe7
   b7728:	f7fe ba60 	b.w	b5bec <LED_On>
}
   b772c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7730 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7730:	4b01      	ldr	r3, [pc, #4]	; (b7738 <_GLOBAL__sub_I_RGB+0x8>)
   b7732:	2200      	movs	r2, #0
   b7734:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7736:	4770      	bx	lr
   b7738:	2003e6dc 	.word	0x2003e6dc

000b773c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b773c:	2100      	movs	r1, #0
   b773e:	f7fe b9b5 	b.w	b5aac <hal_spi_release>

000b7742 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7742:	2100      	movs	r1, #0
   b7744:	f7fe b9aa 	b.w	b5a9c <hal_spi_acquire>

000b7748 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7748:	b510      	push	{r4, lr}
   b774a:	4604      	mov	r4, r0
   b774c:	4608      	mov	r0, r1
{
    _spi = spi;
   b774e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7750:	f7fe f984 	bl	b5a5c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7754:	2300      	movs	r3, #0
   b7756:	6063      	str	r3, [r4, #4]
}
   b7758:	4620      	mov	r0, r4
   b775a:	bd10      	pop	{r4, pc}

000b775c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b775c:	b513      	push	{r0, r1, r4, lr}
   b775e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7760:	7800      	ldrb	r0, [r0, #0]
   b7762:	f7ff ffee 	bl	b7742 <_ZN8SPIClass4lockEv.isra.0>
   b7766:	b958      	cbnz	r0, b7780 <_ZN8SPIClass5beginEv+0x24>
   b7768:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b776a:	9001      	str	r0, [sp, #4]
   b776c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7770:	f7fe f964 	bl	b5a3c <hal_spi_begin>
        unlock();
   b7774:	9801      	ldr	r0, [sp, #4]
    }
}
   b7776:	b002      	add	sp, #8
   b7778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b777c:	f7ff bfde 	b.w	b773c <_ZN8SPIClass6unlockEv.isra.0>
   b7780:	b002      	add	sp, #8
   b7782:	bd10      	pop	{r4, pc}

000b7784 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7784:	7800      	ldrb	r0, [r0, #0]
   b7786:	f7ff bfd9 	b.w	b773c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b778c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b778c:	0840      	lsrs	r0, r0, #1
{
   b778e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7790:	6018      	str	r0, [r3, #0]
   b7792:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7794:	6818      	ldr	r0, [r3, #0]
   b7796:	4288      	cmp	r0, r1
   b7798:	b2e5      	uxtb	r5, r4
   b779a:	d906      	bls.n	b77aa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b779c:	3401      	adds	r4, #1
   b779e:	2c08      	cmp	r4, #8
   b77a0:	d002      	beq.n	b77a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b77a2:	0840      	lsrs	r0, r0, #1
   b77a4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b77a6:	e7f5      	b.n	b7794 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b77a8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b77aa:	4b02      	ldr	r3, [pc, #8]	; (b77b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b77ac:	5d5b      	ldrb	r3, [r3, r5]
   b77ae:	7013      	strb	r3, [r2, #0]
}
   b77b0:	bd30      	pop	{r4, r5, pc}
   b77b2:	bf00      	nop
   b77b4:	000b93e0 	.word	0x000b93e0

000b77b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b77b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77bc:	4606      	mov	r6, r0
   b77be:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b77c0:	7800      	ldrb	r0, [r0, #0]
{
   b77c2:	460c      	mov	r4, r1
    CHECK(lock());
   b77c4:	f7ff ffbd 	bl	b7742 <_ZN8SPIClass4lockEv.isra.0>
   b77c8:	2800      	cmp	r0, #0
   b77ca:	db1b      	blt.n	b7804 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b77cc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b77ce:	2214      	movs	r2, #20
   b77d0:	2100      	movs	r1, #0
   b77d2:	a809      	add	r0, sp, #36	; 0x24
   b77d4:	f000 fd86 	bl	b82e4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b77d8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b77da:	2200      	movs	r2, #0
   b77dc:	a909      	add	r1, sp, #36	; 0x24
   b77de:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b77e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b77e4:	f7fe f94a 	bl	b5a7c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b77e8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b77ec:	b113      	cbz	r3, b77f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b77ee:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b77f2:	b155      	cbz	r5, b780a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b77f4:	2700      	movs	r7, #0
   b77f6:	46b9      	mov	r9, r7
   b77f8:	46b8      	mov	r8, r7
   b77fa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b77fc:	7923      	ldrb	r3, [r4, #4]
   b77fe:	b15d      	cbz	r5, b7818 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7800:	b1c3      	cbz	r3, b7834 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7802:	2000      	movs	r0, #0
}
   b7804:	b00f      	add	sp, #60	; 0x3c
   b7806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b780a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b780e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7812:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7816:	e7f1      	b.n	b77fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7818:	2b00      	cmp	r3, #0
   b781a:	d135      	bne.n	b7888 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b781c:	68a3      	ldr	r3, [r4, #8]
   b781e:	4543      	cmp	r3, r8
   b7820:	d108      	bne.n	b7834 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7822:	f88d 9020 	strb.w	r9, [sp, #32]
   b7826:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b782a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b782e:	89a3      	ldrh	r3, [r4, #12]
   b7830:	429a      	cmp	r2, r3
   b7832:	d0e6      	beq.n	b7802 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7834:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7836:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7838:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b783c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b783e:	ab04      	add	r3, sp, #16
   b7840:	f10d 020f 	add.w	r2, sp, #15
   b7844:	f7ff ffa2 	bl	b778c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7848:	7921      	ldrb	r1, [r4, #4]
   b784a:	b985      	cbnz	r5, b786e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b784c:	b989      	cbnz	r1, b7872 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b784e:	68a3      	ldr	r3, [r4, #8]
   b7850:	4543      	cmp	r3, r8
   b7852:	d30e      	bcc.n	b7872 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7854:	f88d 9020 	strb.w	r9, [sp, #32]
   b7858:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b785c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7860:	89a3      	ldrh	r3, [r4, #12]
   b7862:	429a      	cmp	r2, r3
   b7864:	d105      	bne.n	b7872 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7866:	9b04      	ldr	r3, [sp, #16]
   b7868:	4543      	cmp	r3, r8
   b786a:	d102      	bne.n	b7872 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b786c:	e7c9      	b.n	b7802 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b786e:	2900      	cmp	r1, #0
   b7870:	d1f9      	bne.n	b7866 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7872:	2300      	movs	r3, #0
   b7874:	9301      	str	r3, [sp, #4]
   b7876:	7b63      	ldrb	r3, [r4, #13]
   b7878:	9300      	str	r3, [sp, #0]
   b787a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b787e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7880:	7830      	ldrb	r0, [r6, #0]
   b7882:	f7fe f903 	bl	b5a8c <hal_spi_set_settings>
   b7886:	e7bc      	b.n	b7802 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7888:	e9cd 5500 	strd	r5, r5, [sp]
   b788c:	462b      	mov	r3, r5
   b788e:	462a      	mov	r2, r5
   b7890:	2101      	movs	r1, #1
   b7892:	e7f5      	b.n	b7880 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7894 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7894:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7896:	7800      	ldrb	r0, [r0, #0]
   b7898:	f7fe f8d8 	bl	b5a4c <hal_spi_transfer>
}
   b789c:	b2c0      	uxtb	r0, r0
   b789e:	bd08      	pop	{r3, pc}

000b78a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b78a0:	b510      	push	{r4, lr}
   b78a2:	4604      	mov	r4, r0
{
	free(buffer);
   b78a4:	6800      	ldr	r0, [r0, #0]
   b78a6:	f7fe fa55 	bl	b5d54 <free>
}
   b78aa:	4620      	mov	r0, r4
   b78ac:	bd10      	pop	{r4, pc}

000b78ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b78ae:	b510      	push	{r4, lr}
   b78b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b78b2:	6800      	ldr	r0, [r0, #0]
   b78b4:	b108      	cbz	r0, b78ba <_ZN6String10invalidateEv+0xc>
   b78b6:	f7fe fa4d 	bl	b5d54 <free>
	buffer = NULL;
   b78ba:	2300      	movs	r3, #0
	capacity = len = 0;
   b78bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b78c0:	6023      	str	r3, [r4, #0]
}
   b78c2:	bd10      	pop	{r4, pc}

000b78c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b78c4:	b538      	push	{r3, r4, r5, lr}
   b78c6:	4604      	mov	r4, r0
   b78c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b78ca:	6800      	ldr	r0, [r0, #0]
   b78cc:	3101      	adds	r1, #1
   b78ce:	f7fe fa49 	bl	b5d64 <realloc>
	if (newbuffer) {
   b78d2:	b110      	cbz	r0, b78da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b78d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b78d8:	2001      	movs	r0, #1
	}
	return 0;
}
   b78da:	bd38      	pop	{r3, r4, r5, pc}

000b78dc <_ZN6String7reserveEj>:
{
   b78dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b78de:	6803      	ldr	r3, [r0, #0]
{
   b78e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b78e2:	b123      	cbz	r3, b78ee <_ZN6String7reserveEj+0x12>
   b78e4:	6843      	ldr	r3, [r0, #4]
   b78e6:	428b      	cmp	r3, r1
   b78e8:	d301      	bcc.n	b78ee <_ZN6String7reserveEj+0x12>
   b78ea:	2001      	movs	r0, #1
}
   b78ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b78ee:	4620      	mov	r0, r4
   b78f0:	f7ff ffe8 	bl	b78c4 <_ZN6String12changeBufferEj>
   b78f4:	2800      	cmp	r0, #0
   b78f6:	d0f9      	beq.n	b78ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b78f8:	68a3      	ldr	r3, [r4, #8]
   b78fa:	2b00      	cmp	r3, #0
   b78fc:	d1f5      	bne.n	b78ea <_ZN6String7reserveEj+0xe>
   b78fe:	6822      	ldr	r2, [r4, #0]
   b7900:	7013      	strb	r3, [r2, #0]
   b7902:	e7f2      	b.n	b78ea <_ZN6String7reserveEj+0xe>

000b7904 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7904:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7906:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7908:	4611      	mov	r1, r2
   b790a:	9201      	str	r2, [sp, #4]
{
   b790c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b790e:	f7ff ffe5 	bl	b78dc <_ZN6String7reserveEj>
   b7912:	9a01      	ldr	r2, [sp, #4]
   b7914:	b928      	cbnz	r0, b7922 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7916:	4620      	mov	r0, r4
   b7918:	f7ff ffc9 	bl	b78ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b791c:	4620      	mov	r0, r4
   b791e:	b003      	add	sp, #12
   b7920:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7922:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7924:	4629      	mov	r1, r5
   b7926:	6820      	ldr	r0, [r4, #0]
   b7928:	f000 fcb4 	bl	b8294 <memcpy>
	buffer[len] = 0;
   b792c:	6822      	ldr	r2, [r4, #0]
   b792e:	68a3      	ldr	r3, [r4, #8]
   b7930:	2100      	movs	r1, #0
   b7932:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7934:	e7f2      	b.n	b791c <_ZN6String4copyEPKcj+0x18>

000b7936 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7936:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7938:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b793a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b793e:	4604      	mov	r4, r0
	len = 0;
   b7940:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7942:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7944:	b141      	cbz	r1, b7958 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7946:	4608      	mov	r0, r1
   b7948:	9101      	str	r1, [sp, #4]
   b794a:	f7fc fb71 	bl	b4030 <strlen>
   b794e:	9901      	ldr	r1, [sp, #4]
   b7950:	4602      	mov	r2, r0
   b7952:	4620      	mov	r0, r4
   b7954:	f7ff ffd6 	bl	b7904 <_ZN6String4copyEPKcj>
}
   b7958:	4620      	mov	r0, r4
   b795a:	b002      	add	sp, #8
   b795c:	bd10      	pop	{r4, pc}

000b795e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b795e:	b538      	push	{r3, r4, r5, lr}
   b7960:	4605      	mov	r5, r0
	if (buffer) {
   b7962:	6800      	ldr	r0, [r0, #0]
{
   b7964:	460c      	mov	r4, r1
	if (buffer) {
   b7966:	b168      	cbz	r0, b7984 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7968:	686a      	ldr	r2, [r5, #4]
   b796a:	688b      	ldr	r3, [r1, #8]
   b796c:	429a      	cmp	r2, r3
   b796e:	d307      	bcc.n	b7980 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7970:	6809      	ldr	r1, [r1, #0]
   b7972:	f000 fced 	bl	b8350 <strcpy>
			len = rhs.len;
   b7976:	68a3      	ldr	r3, [r4, #8]
   b7978:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b797a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b797c:	60a3      	str	r3, [r4, #8]
}
   b797e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7980:	f7fe f9e8 	bl	b5d54 <free>
	buffer = rhs.buffer;
   b7984:	6823      	ldr	r3, [r4, #0]
   b7986:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7988:	6863      	ldr	r3, [r4, #4]
   b798a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b798c:	68a3      	ldr	r3, [r4, #8]
   b798e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7990:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7992:	e9c4 3300 	strd	r3, r3, [r4]
   b7996:	e7f1      	b.n	b797c <_ZN6String4moveERS_+0x1e>

000b7998 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b7998:	4288      	cmp	r0, r1
{
   b799a:	b510      	push	{r4, lr}
   b799c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b799e:	d001      	beq.n	b79a4 <_ZN6StringaSEOS_+0xc>
   b79a0:	f7ff ffdd 	bl	b795e <_ZN6String4moveERS_>
	return *this;
}
   b79a4:	4620      	mov	r0, r4
   b79a6:	bd10      	pop	{r4, pc}

000b79a8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b79a8:	b513      	push	{r0, r1, r4, lr}
   b79aa:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b79ac:	b159      	cbz	r1, b79c6 <_ZN6StringaSEPKc+0x1e>
   b79ae:	4608      	mov	r0, r1
   b79b0:	9101      	str	r1, [sp, #4]
   b79b2:	f7fc fb3d 	bl	b4030 <strlen>
   b79b6:	9901      	ldr	r1, [sp, #4]
   b79b8:	4602      	mov	r2, r0
   b79ba:	4620      	mov	r0, r4
   b79bc:	f7ff ffa2 	bl	b7904 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b79c0:	4620      	mov	r0, r4
   b79c2:	b002      	add	sp, #8
   b79c4:	bd10      	pop	{r4, pc}
	else invalidate();
   b79c6:	f7ff ff72 	bl	b78ae <_ZN6String10invalidateEv>
   b79ca:	e7f9      	b.n	b79c0 <_ZN6StringaSEPKc+0x18>

000b79cc <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b79cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b79ce:	4604      	mov	r4, r0
	buffer = NULL;
   b79d0:	2300      	movs	r3, #0
	capacity = 0;
   b79d2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b79d6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b79d8:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b79da:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b79dc:	a901      	add	r1, sp, #4
   b79de:	f000 f98b 	bl	b7cf8 <utoa>
	*this = buf;
   b79e2:	a901      	add	r1, sp, #4
   b79e4:	4620      	mov	r0, r4
   b79e6:	f7ff ffdf 	bl	b79a8 <_ZN6StringaSEPKc>
}
   b79ea:	4620      	mov	r0, r4
   b79ec:	b004      	add	sp, #16
   b79ee:	bd10      	pop	{r4, pc}

000b79f0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b79f0:	b558      	push	{r3, r4, r6, lr}
   b79f2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b79f4:	b12a      	cbz	r2, b7a02 <_ZNK6String8getBytesEPhjj+0x12>
   b79f6:	b121      	cbz	r1, b7a02 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b79f8:	6884      	ldr	r4, [r0, #8]
   b79fa:	42a3      	cmp	r3, r4
   b79fc:	d302      	bcc.n	b7a04 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b79fe:	2300      	movs	r3, #0
   b7a00:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b7a02:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b7a04:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b7a06:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b7a08:	6801      	ldr	r1, [r0, #0]
   b7a0a:	4294      	cmp	r4, r2
   b7a0c:	bf28      	it	cs
   b7a0e:	4614      	movcs	r4, r2
   b7a10:	4419      	add	r1, r3
   b7a12:	4622      	mov	r2, r4
   b7a14:	4630      	mov	r0, r6
   b7a16:	f000 fca3 	bl	b8360 <strncpy>
	buf[n] = 0;
   b7a1a:	2300      	movs	r3, #0
   b7a1c:	5533      	strb	r3, [r6, r4]
   b7a1e:	e7f0      	b.n	b7a02 <_ZNK6String8getBytesEPhjj+0x12>

000b7a20 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b7a20:	6800      	ldr	r0, [r0, #0]
   b7a22:	b108      	cbz	r0, b7a28 <_ZNK6String5toIntEv+0x8>
   b7a24:	f000 bc22 	b.w	b826c <atol>
	return 0;
}
   b7a28:	4770      	bx	lr
	...

000b7a2c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7a2c:	4b05      	ldr	r3, [pc, #20]	; (b7a44 <_GLOBAL__sub_I_System+0x18>)
   b7a2e:	2202      	movs	r2, #2
   b7a30:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7a32:	4b05      	ldr	r3, [pc, #20]	; (b7a48 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7a34:	4a05      	ldr	r2, [pc, #20]	; (b7a4c <_GLOBAL__sub_I_System+0x20>)
   b7a36:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7a38:	2000      	movs	r0, #0
   b7a3a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7a3e:	f7fe b8ed 	b.w	b5c1c <set_system_mode>
   b7a42:	bf00      	nop
   b7a44:	2003e6f8 	.word	0x2003e6f8
   b7a48:	2003e6ec 	.word	0x2003e6ec
   b7a4c:	ffff0000 	.word	0xffff0000

000b7a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7a50:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7a52:	681a      	ldr	r2, [r3, #0]
   b7a54:	4b02      	ldr	r3, [pc, #8]	; (b7a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7a56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7a58:	4770      	bx	lr
   b7a5a:	bf00      	nop
   b7a5c:	2003e548 	.word	0x2003e548
   b7a60:	2003e6fc 	.word	0x2003e6fc

000b7a64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7a64:	4770      	bx	lr

000b7a66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a66:	7441      	strb	r1, [r0, #17]
}
   b7a68:	4770      	bx	lr

000b7a6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7a6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7a6c:	7c00      	ldrb	r0, [r0, #16]
   b7a6e:	f7fe f855 	bl	b5b1c <hal_usart_available_data_for_write>
}
   b7a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a76:	bd08      	pop	{r3, pc}

000b7a78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a7a:	7c00      	ldrb	r0, [r0, #16]
   b7a7c:	f7fe f826 	bl	b5acc <hal_usart_available>
}
   b7a80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a84:	bd08      	pop	{r3, pc}

000b7a86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7a88:	7c00      	ldrb	r0, [r0, #16]
   b7a8a:	f7fe f82f 	bl	b5aec <hal_usart_peek>
}
   b7a8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a92:	bd08      	pop	{r3, pc}

000b7a94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7a94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7a96:	7c00      	ldrb	r0, [r0, #16]
   b7a98:	f7fe f820 	bl	b5adc <hal_usart_read>
}
   b7a9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7aa0:	bd08      	pop	{r3, pc}

000b7aa2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7aa2:	7c00      	ldrb	r0, [r0, #16]
   b7aa4:	f7fe b82a 	b.w	b5afc <hal_usart_flush>

000b7aa8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7aaa:	7c45      	ldrb	r5, [r0, #17]
{
   b7aac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7aae:	b12d      	cbz	r5, b7abc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7ab0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7ab2:	b003      	add	sp, #12
   b7ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7ab8:	f7fe b800 	b.w	b5abc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7abc:	7c00      	ldrb	r0, [r0, #16]
   b7abe:	9101      	str	r1, [sp, #4]
   b7ac0:	f7fe f82c 	bl	b5b1c <hal_usart_available_data_for_write>
   b7ac4:	2800      	cmp	r0, #0
   b7ac6:	9901      	ldr	r1, [sp, #4]
   b7ac8:	dcf2      	bgt.n	b7ab0 <_ZN11USARTSerial5writeEh+0x8>
}
   b7aca:	4628      	mov	r0, r5
   b7acc:	b003      	add	sp, #12
   b7ace:	bd30      	pop	{r4, r5, pc}

000b7ad0 <_ZN11USARTSerialD0Ev>:
   b7ad0:	b510      	push	{r4, lr}
   b7ad2:	2114      	movs	r1, #20
   b7ad4:	4604      	mov	r4, r0
   b7ad6:	f7fc faf2 	bl	b40be <_ZdlPvj>
   b7ada:	4620      	mov	r0, r4
   b7adc:	bd10      	pop	{r4, pc}
	...

000b7ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7ae6:	4604      	mov	r4, r0
   b7ae8:	4608      	mov	r0, r1
   b7aea:	4611      	mov	r1, r2
   b7aec:	2200      	movs	r2, #0
   b7aee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7af2:	4b04      	ldr	r3, [pc, #16]	; (b7b04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7af4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7af6:	2301      	movs	r3, #1
  _serial = serial;
   b7af8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7afa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7afc:	f7fe f816 	bl	b5b2c <hal_usart_init_ex>
}
   b7b00:	4620      	mov	r0, r4
   b7b02:	bd10      	pop	{r4, pc}
   b7b04:	000b940c 	.word	0x000b940c

000b7b08 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7b08:	7441      	strb	r1, [r0, #17]
}
   b7b0a:	4770      	bx	lr

000b7b0c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b0c:	4770      	bx	lr

000b7b0e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7b0e:	4770      	bx	lr

000b7b10 <_ZN9USBSerial4readEv>:
{
   b7b10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7b12:	2100      	movs	r1, #0
   b7b14:	7c00      	ldrb	r0, [r0, #16]
   b7b16:	f7fe f831 	bl	b5b7c <HAL_USB_USART_Receive_Data>
}
   b7b1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b1e:	bd08      	pop	{r3, pc}

000b7b20 <_ZN9USBSerial4peekEv>:
{
   b7b20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7b22:	2101      	movs	r1, #1
   b7b24:	7c00      	ldrb	r0, [r0, #16]
   b7b26:	f7fe f829 	bl	b5b7c <HAL_USB_USART_Receive_Data>
}
   b7b2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b2e:	bd08      	pop	{r3, pc}

000b7b30 <_ZN9USBSerial17availableForWriteEv>:
{
   b7b30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7b32:	7c00      	ldrb	r0, [r0, #16]
   b7b34:	f7fe f81a 	bl	b5b6c <HAL_USB_USART_Available_Data_For_Write>
}
   b7b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b3c:	bd08      	pop	{r3, pc}

000b7b3e <_ZN9USBSerial9availableEv>:
{
   b7b3e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7b40:	7c00      	ldrb	r0, [r0, #16]
   b7b42:	f7fe f80b 	bl	b5b5c <HAL_USB_USART_Available_Data>
}
   b7b46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b4a:	bd08      	pop	{r3, pc}

000b7b4c <_ZN9USBSerial5writeEh>:
{
   b7b4c:	b513      	push	{r0, r1, r4, lr}
   b7b4e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b50:	7c00      	ldrb	r0, [r0, #16]
{
   b7b52:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b54:	f7fe f80a 	bl	b5b6c <HAL_USB_USART_Available_Data_For_Write>
   b7b58:	2800      	cmp	r0, #0
   b7b5a:	9901      	ldr	r1, [sp, #4]
   b7b5c:	dc01      	bgt.n	b7b62 <_ZN9USBSerial5writeEh+0x16>
   b7b5e:	7c60      	ldrb	r0, [r4, #17]
   b7b60:	b120      	cbz	r0, b7b6c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7b62:	7c20      	ldrb	r0, [r4, #16]
   b7b64:	f7fe f812 	bl	b5b8c <HAL_USB_USART_Send_Data>
   b7b68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7b6c:	b002      	add	sp, #8
   b7b6e:	bd10      	pop	{r4, pc}

000b7b70 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7b70:	7c00      	ldrb	r0, [r0, #16]
   b7b72:	f7fe b813 	b.w	b5b9c <HAL_USB_USART_Flush_Data>

000b7b76 <_ZN9USBSerialD0Ev>:
   b7b76:	b510      	push	{r4, lr}
   b7b78:	2114      	movs	r1, #20
   b7b7a:	4604      	mov	r4, r0
   b7b7c:	f7fc fa9f 	bl	b40be <_ZdlPvj>
   b7b80:	4620      	mov	r0, r4
   b7b82:	bd10      	pop	{r4, pc}

000b7b84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b84:	b510      	push	{r4, lr}
   b7b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b8a:	4604      	mov	r4, r0
   b7b8c:	4608      	mov	r0, r1
   b7b8e:	2100      	movs	r1, #0
   b7b90:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b94:	4b04      	ldr	r3, [pc, #16]	; (b7ba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b96:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b98:	2301      	movs	r3, #1
  _serial = serial;
   b7b9a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b9c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b9e:	4611      	mov	r1, r2
   b7ba0:	f7fd ffcc 	bl	b5b3c <HAL_USB_USART_Init>
}
   b7ba4:	4620      	mov	r0, r4
   b7ba6:	bd10      	pop	{r4, pc}
   b7ba8:	000b943c 	.word	0x000b943c

000b7bac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7bac:	7c00      	ldrb	r0, [r0, #16]
   b7bae:	2200      	movs	r2, #0
   b7bb0:	f7fd bfcc 	b.w	b5b4c <HAL_USB_USART_Begin>

000b7bb4 <_Z19acquireSerialBufferv>:
{
   b7bb4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7bb6:	2214      	movs	r2, #20
{
   b7bb8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7bba:	2100      	movs	r1, #0
   b7bbc:	f000 fb92 	bl	b82e4 <memset>
}
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	bd10      	pop	{r4, pc}

000b7bc4 <_Z16_fetch_usbserialv>:
{
   b7bc4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bc6:	4c0f      	ldr	r4, [pc, #60]	; (b7c04 <_Z16_fetch_usbserialv+0x40>)
{
   b7bc8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7bca:	a803      	add	r0, sp, #12
   b7bcc:	f7ff fff2 	bl	b7bb4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bd0:	7821      	ldrb	r1, [r4, #0]
   b7bd2:	f3bf 8f5b 	dmb	ish
   b7bd6:	f011 0101 	ands.w	r1, r1, #1
   b7bda:	d10f      	bne.n	b7bfc <_Z16_fetch_usbserialv+0x38>
   b7bdc:	4620      	mov	r0, r4
   b7bde:	9101      	str	r1, [sp, #4]
   b7be0:	f7fc fa7c 	bl	b40dc <__cxa_guard_acquire>
   b7be4:	9901      	ldr	r1, [sp, #4]
   b7be6:	b148      	cbz	r0, b7bfc <_Z16_fetch_usbserialv+0x38>
   b7be8:	aa03      	add	r2, sp, #12
   b7bea:	4807      	ldr	r0, [pc, #28]	; (b7c08 <_Z16_fetch_usbserialv+0x44>)
   b7bec:	f7ff ffca 	bl	b7b84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	f7fc fa78 	bl	b40e6 <__cxa_guard_release>
   b7bf6:	4805      	ldr	r0, [pc, #20]	; (b7c0c <_Z16_fetch_usbserialv+0x48>)
   b7bf8:	f000 fb32 	bl	b8260 <atexit>
	return _usbserial;
}
   b7bfc:	4802      	ldr	r0, [pc, #8]	; (b7c08 <_Z16_fetch_usbserialv+0x44>)
   b7bfe:	b008      	add	sp, #32
   b7c00:	bd10      	pop	{r4, pc}
   b7c02:	bf00      	nop
   b7c04:	2003e700 	.word	0x2003e700
   b7c08:	2003e704 	.word	0x2003e704
   b7c0c:	000b7b0d 	.word	0x000b7b0d

000b7c10 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7c10:	2200      	movs	r2, #0
   b7c12:	6840      	ldr	r0, [r0, #4]
   b7c14:	4611      	mov	r1, r2
   b7c16:	f7fe b84d 	b.w	b5cb4 <network_ready>

000b7c1a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7c1a:	2200      	movs	r2, #0
   b7c1c:	6840      	ldr	r0, [r0, #4]
   b7c1e:	4611      	mov	r1, r2
   b7c20:	f7fe b868 	b.w	b5cf4 <network_listening>

000b7c24 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7c24:	2200      	movs	r2, #0
   b7c26:	6840      	ldr	r0, [r0, #4]
   b7c28:	4611      	mov	r1, r2
   b7c2a:	f7fe b873 	b.w	b5d14 <network_get_listen_timeout>

000b7c2e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7c2e:	6840      	ldr	r0, [r0, #4]
   b7c30:	2200      	movs	r2, #0
   b7c32:	f7fe b867 	b.w	b5d04 <network_set_listen_timeout>

000b7c36 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7c36:	6840      	ldr	r0, [r0, #4]
   b7c38:	2200      	movs	r2, #0
   b7c3a:	f081 0101 	eor.w	r1, r1, #1
   b7c3e:	f7fe b851 	b.w	b5ce4 <network_listen>

000b7c42 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7c42:	2300      	movs	r3, #0
   b7c44:	6840      	ldr	r0, [r0, #4]
   b7c46:	461a      	mov	r2, r3
   b7c48:	4619      	mov	r1, r3
   b7c4a:	f7fe b843 	b.w	b5cd4 <network_off>

000b7c4e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c4e:	2300      	movs	r3, #0
   b7c50:	6840      	ldr	r0, [r0, #4]
   b7c52:	461a      	mov	r2, r3
   b7c54:	4619      	mov	r1, r3
   b7c56:	f7fe b835 	b.w	b5cc4 <network_on>

000b7c5a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7c5a:	2200      	movs	r2, #0
   b7c5c:	6840      	ldr	r0, [r0, #4]
   b7c5e:	4611      	mov	r1, r2
   b7c60:	f7fe b818 	b.w	b5c94 <network_connecting>

000b7c64 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c64:	6840      	ldr	r0, [r0, #4]
   b7c66:	2200      	movs	r2, #0
   b7c68:	2102      	movs	r1, #2
   b7c6a:	f7fe b81b 	b.w	b5ca4 <network_disconnect>

000b7c6e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c6e:	2300      	movs	r3, #0
   b7c70:	6840      	ldr	r0, [r0, #4]
   b7c72:	461a      	mov	r2, r3
   b7c74:	f7fe b806 	b.w	b5c84 <network_connect>

000b7c78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7c78:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7c7a:	2204      	movs	r2, #4
   b7c7c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7c7e:	4a02      	ldr	r2, [pc, #8]	; (b7c88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7c80:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7c82:	4770      	bx	lr
   b7c84:	2003e718 	.word	0x2003e718
   b7c88:	000b946c 	.word	0x000b946c

000b7c8c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7c8c:	b510      	push	{r4, lr}
   b7c8e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7c90:	f7fc f9ce 	bl	b4030 <strlen>
   b7c94:	3801      	subs	r0, #1
   b7c96:	1823      	adds	r3, r4, r0
   b7c98:	4620      	mov	r0, r4
	while(i<j){
   b7c9a:	4283      	cmp	r3, r0
   b7c9c:	d906      	bls.n	b7cac <_Z11str_reversePc+0x20>
		c = *i;
   b7c9e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7ca0:	7819      	ldrb	r1, [r3, #0]
   b7ca2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7ca6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7caa:	e7f6      	b.n	b7c9a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7cac:	bd10      	pop	{r4, pc}

000b7cae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7cae:	b570      	push	{r4, r5, r6, lr}
   b7cb0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7cb2:	1e91      	subs	r1, r2, #2
   b7cb4:	2922      	cmp	r1, #34	; 0x22
   b7cb6:	d81d      	bhi.n	b7cf4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7cb8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7cba:	b930      	cbnz	r0, b7cca <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7cbc:	4423      	add	r3, r4
            *ptr++ = '0';
   b7cbe:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7cc0:	429d      	cmp	r5, r3
   b7cc2:	d210      	bcs.n	b7ce6 <ultoa+0x38>
            *ptr++ = '0';
   b7cc4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7cc8:	e7fa      	b.n	b7cc0 <ultoa+0x12>
            result.quot = a/radix;
   b7cca:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7cce:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7cd2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7cd4:	2809      	cmp	r0, #9
                *ptr += '0';
   b7cd6:	bf94      	ite	ls
   b7cd8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7cda:	3157      	addhi	r1, #87	; 0x57
   b7cdc:	b2c9      	uxtb	r1, r1
   b7cde:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7ce2:	4630      	mov	r0, r6
	while(a){
   b7ce4:	e7e9      	b.n	b7cba <ultoa+0xc>

	*ptr = '\0';
   b7ce6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7ce8:	4620      	mov	r0, r4
	*ptr = '\0';
   b7cea:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7cec:	f7ff ffce 	bl	b7c8c <_Z11str_reversePc>
	return buffer;
   b7cf0:	4620      	mov	r0, r4
}
   b7cf2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7cf4:	2000      	movs	r0, #0
   b7cf6:	e7fc      	b.n	b7cf2 <ultoa+0x44>

000b7cf8 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b7cf8:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b7cfa:	2301      	movs	r3, #1
   b7cfc:	f7ff ffd7 	bl	b7cae <ultoa>
}
   b7d00:	bd08      	pop	{r3, pc}
	...

000b7d04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7d04:	4b01      	ldr	r3, [pc, #4]	; (b7d0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7d06:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7d08:	4770      	bx	lr
   b7d0a:	bf00      	nop
   b7d0c:	2003e54c 	.word	0x2003e54c

000b7d10 <serialEventRun>:
{
   b7d10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7d12:	4b0b      	ldr	r3, [pc, #44]	; (b7d40 <serialEventRun+0x30>)
   b7d14:	b143      	cbz	r3, b7d28 <serialEventRun+0x18>
   b7d16:	f7ff ff55 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b7d1a:	6803      	ldr	r3, [r0, #0]
   b7d1c:	691b      	ldr	r3, [r3, #16]
   b7d1e:	4798      	blx	r3
   b7d20:	2800      	cmp	r0, #0
   b7d22:	dd01      	ble.n	b7d28 <serialEventRun+0x18>
        serialEvent();
   b7d24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7d28:	4b06      	ldr	r3, [pc, #24]	; (b7d44 <serialEventRun+0x34>)
   b7d2a:	b143      	cbz	r3, b7d3e <serialEventRun+0x2e>
   b7d2c:	f000 f95c 	bl	b7fe8 <_Z22__fetch_global_Serial1v>
   b7d30:	6803      	ldr	r3, [r0, #0]
   b7d32:	691b      	ldr	r3, [r3, #16]
   b7d34:	4798      	blx	r3
   b7d36:	2800      	cmp	r0, #0
   b7d38:	dd01      	ble.n	b7d3e <serialEventRun+0x2e>
        serialEvent1();
   b7d3a:	f3af 8000 	nop.w
}
   b7d3e:	bd08      	pop	{r3, pc}
	...

000b7d48 <_post_loop>:
{
   b7d48:	b508      	push	{r3, lr}
	serialEventRun();
   b7d4a:	f7ff ffe1 	bl	b7d10 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7d4e:	f7fd fddd 	bl	b590c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7d52:	4b01      	ldr	r3, [pc, #4]	; (b7d58 <_post_loop+0x10>)
   b7d54:	6018      	str	r0, [r3, #0]
}
   b7d56:	bd08      	pop	{r3, pc}
   b7d58:	2003e728 	.word	0x2003e728

000b7d5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7d5c:	4805      	ldr	r0, [pc, #20]	; (b7d74 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7d5e:	4a06      	ldr	r2, [pc, #24]	; (b7d78 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7d60:	4906      	ldr	r1, [pc, #24]	; (b7d7c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7d62:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7d64:	1a12      	subs	r2, r2, r0
   b7d66:	f000 fa95 	bl	b8294 <memcpy>
    __backup_sram_signature = signature;
   b7d6a:	4b05      	ldr	r3, [pc, #20]	; (b7d80 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7d6c:	4a05      	ldr	r2, [pc, #20]	; (b7d84 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7d6e:	601a      	str	r2, [r3, #0]
}
   b7d70:	bd08      	pop	{r3, pc}
   b7d72:	bf00      	nop
   b7d74:	2003f400 	.word	0x2003f400
   b7d78:	2003f404 	.word	0x2003f404
   b7d7c:	000b97bc 	.word	0x000b97bc
   b7d80:	2003f400 	.word	0x2003f400
   b7d84:	9a271c1e 	.word	0x9a271c1e

000b7d88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7d88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d8a:	2300      	movs	r3, #0
   b7d8c:	9300      	str	r3, [sp, #0]
   b7d8e:	461a      	mov	r2, r3
   b7d90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d94:	f7fd ff64 	bl	b5c60 <system_ctrl_set_result>
}
   b7d98:	b003      	add	sp, #12
   b7d9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7da0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7da0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7da2:	8843      	ldrh	r3, [r0, #2]
   b7da4:	2b0a      	cmp	r3, #10
   b7da6:	d008      	beq.n	b7dba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7da8:	2b50      	cmp	r3, #80	; 0x50
   b7daa:	d10b      	bne.n	b7dc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7dac:	4b09      	ldr	r3, [pc, #36]	; (b7dd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7dae:	681b      	ldr	r3, [r3, #0]
   b7db0:	b14b      	cbz	r3, b7dc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7db2:	b003      	add	sp, #12
   b7db4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7db8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7dba:	f7ff ffe5 	bl	b7d88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7dbe:	b003      	add	sp, #12
   b7dc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7dc4:	2300      	movs	r3, #0
   b7dc6:	9300      	str	r3, [sp, #0]
   b7dc8:	461a      	mov	r2, r3
   b7dca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7dce:	f7fd ff47 	bl	b5c60 <system_ctrl_set_result>
}
   b7dd2:	e7f4      	b.n	b7dbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7dd4:	2003e724 	.word	0x2003e724

000b7dd8 <module_user_init_hook>:
{
   b7dd8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7dda:	4812      	ldr	r0, [pc, #72]	; (b7e24 <module_user_init_hook+0x4c>)
   b7ddc:	2100      	movs	r1, #0
   b7dde:	f7fd ffe9 	bl	b5db4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7de2:	4b11      	ldr	r3, [pc, #68]	; (b7e28 <module_user_init_hook+0x50>)
   b7de4:	681a      	ldr	r2, [r3, #0]
   b7de6:	4b11      	ldr	r3, [pc, #68]	; (b7e2c <module_user_init_hook+0x54>)
   b7de8:	429a      	cmp	r2, r3
   b7dea:	4b11      	ldr	r3, [pc, #68]	; (b7e30 <module_user_init_hook+0x58>)
   b7dec:	bf0c      	ite	eq
   b7dee:	2201      	moveq	r2, #1
   b7df0:	2200      	movne	r2, #0
   b7df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7df4:	d001      	beq.n	b7dfa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7df6:	f7ff ffb1 	bl	b7d5c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7dfa:	f7fd fd77 	bl	b58ec <HAL_RNG_GetRandomNumber>
   b7dfe:	4604      	mov	r4, r0
    srand(seed);
   b7e00:	f000 fa78 	bl	b82f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7e04:	4b0b      	ldr	r3, [pc, #44]	; (b7e34 <module_user_init_hook+0x5c>)
   b7e06:	b113      	cbz	r3, b7e0e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7e08:	4620      	mov	r0, r4
   b7e0a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7e0e:	2100      	movs	r1, #0
   b7e10:	4808      	ldr	r0, [pc, #32]	; (b7e34 <module_user_init_hook+0x5c>)
   b7e12:	f7fd ff2f 	bl	b5c74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7e1a:	4807      	ldr	r0, [pc, #28]	; (b7e38 <module_user_init_hook+0x60>)
   b7e1c:	2100      	movs	r1, #0
   b7e1e:	f7fd bf15 	b.w	b5c4c <system_ctrl_set_app_request_handler>
   b7e22:	bf00      	nop
   b7e24:	000b7d05 	.word	0x000b7d05
   b7e28:	2003f400 	.word	0x2003f400
   b7e2c:	9a271c1e 	.word	0x9a271c1e
   b7e30:	2003e720 	.word	0x2003e720
   b7e34:	00000000 	.word	0x00000000
   b7e38:	000b7da1 	.word	0x000b7da1

000b7e3c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7e3c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7e3e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7e40:	d902      	bls.n	b7e48 <pinAvailable+0xc>
    return false;
   b7e42:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7e44:	b002      	add	sp, #8
   b7e46:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7e48:	f1a0 030b 	sub.w	r3, r0, #11
   b7e4c:	2b02      	cmp	r3, #2
   b7e4e:	d81a      	bhi.n	b7e86 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7e50:	4c17      	ldr	r4, [pc, #92]	; (b7eb0 <pinAvailable+0x74>)
   b7e52:	7821      	ldrb	r1, [r4, #0]
   b7e54:	f3bf 8f5b 	dmb	ish
   b7e58:	f011 0101 	ands.w	r1, r1, #1
   b7e5c:	d10b      	bne.n	b7e76 <pinAvailable+0x3a>
   b7e5e:	4620      	mov	r0, r4
   b7e60:	9101      	str	r1, [sp, #4]
   b7e62:	f7fc f93b 	bl	b40dc <__cxa_guard_acquire>
   b7e66:	9901      	ldr	r1, [sp, #4]
   b7e68:	b128      	cbz	r0, b7e76 <pinAvailable+0x3a>
   b7e6a:	4812      	ldr	r0, [pc, #72]	; (b7eb4 <pinAvailable+0x78>)
   b7e6c:	f7ff fc6c 	bl	b7748 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7e70:	4620      	mov	r0, r4
   b7e72:	f7fc f938 	bl	b40e6 <__cxa_guard_release>
   b7e76:	4b0f      	ldr	r3, [pc, #60]	; (b7eb4 <pinAvailable+0x78>)
   b7e78:	7818      	ldrb	r0, [r3, #0]
   b7e7a:	f7fd fdf7 	bl	b5a6c <hal_spi_is_enabled>
   b7e7e:	2800      	cmp	r0, #0
   b7e80:	d1df      	bne.n	b7e42 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7e82:	2001      	movs	r0, #1
   b7e84:	e7de      	b.n	b7e44 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7e86:	2801      	cmp	r0, #1
   b7e88:	d809      	bhi.n	b7e9e <pinAvailable+0x62>
   b7e8a:	f000 f86d 	bl	b7f68 <_Z19__fetch_global_Wirev>
   b7e8e:	2100      	movs	r1, #0
   b7e90:	7c00      	ldrb	r0, [r0, #16]
   b7e92:	f7fd fdab 	bl	b59ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7e96:	f080 0001 	eor.w	r0, r0, #1
   b7e9a:	b2c0      	uxtb	r0, r0
   b7e9c:	e7d2      	b.n	b7e44 <pinAvailable+0x8>
   b7e9e:	3809      	subs	r0, #9
   b7ea0:	2801      	cmp	r0, #1
   b7ea2:	d8ee      	bhi.n	b7e82 <pinAvailable+0x46>
   b7ea4:	f000 f8a0 	bl	b7fe8 <_Z22__fetch_global_Serial1v>
   b7ea8:	7c00      	ldrb	r0, [r0, #16]
   b7eaa:	f7fd fe2f 	bl	b5b0c <hal_usart_is_enabled>
   b7eae:	e7f2      	b.n	b7e96 <pinAvailable+0x5a>
   b7eb0:	2003e6ac 	.word	0x2003e6ac
   b7eb4:	2003e6b0 	.word	0x2003e6b0

000b7eb8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7eb8:	2823      	cmp	r0, #35	; 0x23
{
   b7eba:	b538      	push	{r3, r4, r5, lr}
   b7ebc:	4604      	mov	r4, r0
   b7ebe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ec0:	d80a      	bhi.n	b7ed8 <pinMode+0x20>
   b7ec2:	29ff      	cmp	r1, #255	; 0xff
   b7ec4:	d008      	beq.n	b7ed8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7ec6:	f7ff ffb9 	bl	b7e3c <pinAvailable>
   b7eca:	b128      	cbz	r0, b7ed8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7ecc:	4629      	mov	r1, r5
   b7ece:	4620      	mov	r0, r4
}
   b7ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7ed4:	f7fd bd22 	b.w	b591c <hal_gpio_mode>
}
   b7ed8:	bd38      	pop	{r3, r4, r5, pc}

000b7eda <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7eda:	b538      	push	{r3, r4, r5, lr}
   b7edc:	4604      	mov	r4, r0
   b7ede:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7ee0:	f7fd fd24 	bl	b592c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7ee4:	28ff      	cmp	r0, #255	; 0xff
   b7ee6:	d010      	beq.n	b7f0a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7ee8:	2806      	cmp	r0, #6
   b7eea:	d804      	bhi.n	b7ef6 <digitalWrite+0x1c>
   b7eec:	234d      	movs	r3, #77	; 0x4d
   b7eee:	fa23 f000 	lsr.w	r0, r3, r0
   b7ef2:	07c3      	lsls	r3, r0, #31
   b7ef4:	d409      	bmi.n	b7f0a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7ef6:	4620      	mov	r0, r4
   b7ef8:	f7ff ffa0 	bl	b7e3c <pinAvailable>
   b7efc:	b128      	cbz	r0, b7f0a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7efe:	4629      	mov	r1, r5
   b7f00:	4620      	mov	r0, r4
}
   b7f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7f06:	f7fd bd19 	b.w	b593c <hal_gpio_write>
}
   b7f0a:	bd38      	pop	{r3, r4, r5, pc}

000b7f0c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b7f0c:	b510      	push	{r4, lr}
   b7f0e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b7f10:	f7fd fd0c 	bl	b592c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7f14:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7f16:	b2db      	uxtb	r3, r3
   b7f18:	2b01      	cmp	r3, #1
   b7f1a:	d908      	bls.n	b7f2e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7f1c:	4620      	mov	r0, r4
   b7f1e:	f7ff ff8d 	bl	b7e3c <pinAvailable>
   b7f22:	b120      	cbz	r0, b7f2e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7f24:	4620      	mov	r0, r4
}
   b7f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b7f2a:	f7fd bd0f 	b.w	b594c <hal_gpio_read>
}
   b7f2e:	2000      	movs	r0, #0
   b7f30:	bd10      	pop	{r4, pc}

000b7f32 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7f32:	4770      	bx	lr

000b7f34 <_Z17acquireWireBufferv>:
{
   b7f34:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7f36:	4b0a      	ldr	r3, [pc, #40]	; (b7f60 <_Z17acquireWireBufferv+0x2c>)
   b7f38:	6003      	str	r3, [r0, #0]
   b7f3a:	2301      	movs	r3, #1
{
   b7f3c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7f3e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7f40:	4908      	ldr	r1, [pc, #32]	; (b7f64 <_Z17acquireWireBufferv+0x30>)
   b7f42:	2020      	movs	r0, #32
   b7f44:	f000 f874 	bl	b8030 <_ZnajRKSt9nothrow_t>
	};
   b7f48:	2520      	movs	r5, #32
   b7f4a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7f4c:	4905      	ldr	r1, [pc, #20]	; (b7f64 <_Z17acquireWireBufferv+0x30>)
	};
   b7f4e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7f50:	4628      	mov	r0, r5
   b7f52:	f000 f86d 	bl	b8030 <_ZnajRKSt9nothrow_t>
	};
   b7f56:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7f5a:	4620      	mov	r0, r4
   b7f5c:	bd38      	pop	{r3, r4, r5, pc}
   b7f5e:	bf00      	nop
   b7f60:	00010018 	.word	0x00010018
   b7f64:	000b94a0 	.word	0x000b94a0

000b7f68 <_Z19__fetch_global_Wirev>:
{
   b7f68:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7f6a:	4d0e      	ldr	r5, [pc, #56]	; (b7fa4 <_Z19__fetch_global_Wirev+0x3c>)
   b7f6c:	7829      	ldrb	r1, [r5, #0]
   b7f6e:	f3bf 8f5b 	dmb	ish
   b7f72:	f011 0401 	ands.w	r4, r1, #1
{
   b7f76:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7f78:	d111      	bne.n	b7f9e <_Z19__fetch_global_Wirev+0x36>
   b7f7a:	4628      	mov	r0, r5
   b7f7c:	f7fc f8ae 	bl	b40dc <__cxa_guard_acquire>
   b7f80:	b168      	cbz	r0, b7f9e <_Z19__fetch_global_Wirev+0x36>
   b7f82:	4668      	mov	r0, sp
   b7f84:	f7ff ffd6 	bl	b7f34 <_Z17acquireWireBufferv>
   b7f88:	466a      	mov	r2, sp
   b7f8a:	4621      	mov	r1, r4
   b7f8c:	4806      	ldr	r0, [pc, #24]	; (b7fa8 <_Z19__fetch_global_Wirev+0x40>)
   b7f8e:	f7ff f9af 	bl	b72f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7f92:	4628      	mov	r0, r5
   b7f94:	f7fc f8a7 	bl	b40e6 <__cxa_guard_release>
   b7f98:	4804      	ldr	r0, [pc, #16]	; (b7fac <_Z19__fetch_global_Wirev+0x44>)
   b7f9a:	f000 f961 	bl	b8260 <atexit>
	return wire;
}
   b7f9e:	4802      	ldr	r0, [pc, #8]	; (b7fa8 <_Z19__fetch_global_Wirev+0x40>)
   b7fa0:	b007      	add	sp, #28
   b7fa2:	bd30      	pop	{r4, r5, pc}
   b7fa4:	2003e72c 	.word	0x2003e72c
   b7fa8:	2003e730 	.word	0x2003e730
   b7fac:	000b7f33 	.word	0x000b7f33

000b7fb0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7fb0:	4770      	bx	lr
	...

000b7fb4 <_Z20acquireSerial1Bufferv>:
{
   b7fb4:	b538      	push	{r3, r4, r5, lr}
   b7fb6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7fb8:	2514      	movs	r5, #20
   b7fba:	462a      	mov	r2, r5
   b7fbc:	2100      	movs	r1, #0
   b7fbe:	f000 f991 	bl	b82e4 <memset>
   b7fc2:	8025      	strh	r5, [r4, #0]
   b7fc4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7fc6:	4907      	ldr	r1, [pc, #28]	; (b7fe4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7fc8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7fca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7fcc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7fce:	f000 f82f 	bl	b8030 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7fd2:	4904      	ldr	r1, [pc, #16]	; (b7fe4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7fd4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7fd6:	4628      	mov	r0, r5
   b7fd8:	f000 f82a 	bl	b8030 <_ZnajRKSt9nothrow_t>
    };
   b7fdc:	60e0      	str	r0, [r4, #12]
}
   b7fde:	4620      	mov	r0, r4
   b7fe0:	bd38      	pop	{r3, r4, r5, pc}
   b7fe2:	bf00      	nop
   b7fe4:	000b94a0 	.word	0x000b94a0

000b7fe8 <_Z22__fetch_global_Serial1v>:
{
   b7fe8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7fea:	4d0e      	ldr	r5, [pc, #56]	; (b8024 <_Z22__fetch_global_Serial1v+0x3c>)
   b7fec:	7829      	ldrb	r1, [r5, #0]
   b7fee:	f3bf 8f5b 	dmb	ish
   b7ff2:	f011 0401 	ands.w	r4, r1, #1
{
   b7ff6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7ff8:	d111      	bne.n	b801e <_Z22__fetch_global_Serial1v+0x36>
   b7ffa:	4628      	mov	r0, r5
   b7ffc:	f7fc f86e 	bl	b40dc <__cxa_guard_acquire>
   b8000:	b168      	cbz	r0, b801e <_Z22__fetch_global_Serial1v+0x36>
   b8002:	a801      	add	r0, sp, #4
   b8004:	f7ff ffd6 	bl	b7fb4 <_Z20acquireSerial1Bufferv>
   b8008:	aa01      	add	r2, sp, #4
   b800a:	4621      	mov	r1, r4
   b800c:	4806      	ldr	r0, [pc, #24]	; (b8028 <_Z22__fetch_global_Serial1v+0x40>)
   b800e:	f7ff fd67 	bl	b7ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8012:	4628      	mov	r0, r5
   b8014:	f7fc f867 	bl	b40e6 <__cxa_guard_release>
   b8018:	4804      	ldr	r0, [pc, #16]	; (b802c <_Z22__fetch_global_Serial1v+0x44>)
   b801a:	f000 f921 	bl	b8260 <atexit>
    return serial1;
}
   b801e:	4802      	ldr	r0, [pc, #8]	; (b8028 <_Z22__fetch_global_Serial1v+0x40>)
   b8020:	b007      	add	sp, #28
   b8022:	bd30      	pop	{r4, r5, pc}
   b8024:	2003e744 	.word	0x2003e744
   b8028:	2003e748 	.word	0x2003e748
   b802c:	000b7fb1 	.word	0x000b7fb1

000b8030 <_ZnajRKSt9nothrow_t>:
   b8030:	f7fc b843 	b.w	b40ba <_Znaj>

000b8034 <_ZSt25__throw_bad_function_callv>:
   b8034:	b508      	push	{r3, lr}
   b8036:	f7fd fea5 	bl	b5d84 <abort>
	...

000b803c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b803c:	4901      	ldr	r1, [pc, #4]	; (b8044 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b803e:	f000 b8f9 	b.w	b8234 <_ZNKSt9type_infoeqERKS_>
   b8042:	bf00      	nop
   b8044:	000b94bc 	.word	0x000b94bc

000b8048 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b804a:	2400      	movs	r4, #0
   b804c:	2310      	movs	r3, #16
   b804e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8052:	6803      	ldr	r3, [r0, #0]
   b8054:	4615      	mov	r5, r2
   b8056:	699e      	ldr	r6, [r3, #24]
   b8058:	6812      	ldr	r2, [r2, #0]
   b805a:	466b      	mov	r3, sp
   b805c:	e9cd 4400 	strd	r4, r4, [sp]
   b8060:	47b0      	blx	r6
   b8062:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8066:	f003 0306 	and.w	r3, r3, #6
   b806a:	2b06      	cmp	r3, #6
   b806c:	bf03      	ittte	eq
   b806e:	9b00      	ldreq	r3, [sp, #0]
   b8070:	602b      	streq	r3, [r5, #0]
   b8072:	2001      	moveq	r0, #1
   b8074:	4620      	movne	r0, r4
   b8076:	b004      	add	sp, #16
   b8078:	bd70      	pop	{r4, r5, r6, pc}

000b807a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b807a:	9800      	ldr	r0, [sp, #0]
   b807c:	4290      	cmp	r0, r2
   b807e:	bf14      	ite	ne
   b8080:	2001      	movne	r0, #1
   b8082:	2006      	moveq	r0, #6
   b8084:	4770      	bx	lr
	...

000b8088 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8088:	b510      	push	{r4, lr}
   b808a:	4b03      	ldr	r3, [pc, #12]	; (b8098 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b808c:	6003      	str	r3, [r0, #0]
   b808e:	4604      	mov	r4, r0
   b8090:	f000 f8cd 	bl	b822e <_ZNSt9type_infoD1Ev>
   b8094:	4620      	mov	r0, r4
   b8096:	bd10      	pop	{r4, pc}
   b8098:	000b94fc 	.word	0x000b94fc

000b809c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b809c:	b510      	push	{r4, lr}
   b809e:	4604      	mov	r4, r0
   b80a0:	f7ff fff2 	bl	b8088 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b80a4:	4620      	mov	r0, r4
   b80a6:	2108      	movs	r1, #8
   b80a8:	f7fc f809 	bl	b40be <_ZdlPvj>
   b80ac:	4620      	mov	r0, r4
   b80ae:	bd10      	pop	{r4, pc}

000b80b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b80b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b80b4:	461f      	mov	r7, r3
   b80b6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b80ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b80be:	4598      	cmp	r8, r3
   b80c0:	4606      	mov	r6, r0
   b80c2:	4615      	mov	r5, r2
   b80c4:	d107      	bne.n	b80d6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b80c6:	9907      	ldr	r1, [sp, #28]
   b80c8:	f000 f8b4 	bl	b8234 <_ZNKSt9type_infoeqERKS_>
   b80cc:	b118      	cbz	r0, b80d6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b80ce:	7165      	strb	r5, [r4, #5]
   b80d0:	2000      	movs	r0, #0
   b80d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b80d6:	4639      	mov	r1, r7
   b80d8:	4630      	mov	r0, r6
   b80da:	f000 f8ab 	bl	b8234 <_ZNKSt9type_infoeqERKS_>
   b80de:	2800      	cmp	r0, #0
   b80e0:	d0f6      	beq.n	b80d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b80e2:	2301      	movs	r3, #1
   b80e4:	f8c4 8000 	str.w	r8, [r4]
   b80e8:	7125      	strb	r5, [r4, #4]
   b80ea:	71a3      	strb	r3, [r4, #6]
   b80ec:	e7f0      	b.n	b80d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b80ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b80ee:	b538      	push	{r3, r4, r5, lr}
   b80f0:	4615      	mov	r5, r2
   b80f2:	461c      	mov	r4, r3
   b80f4:	f000 f89e 	bl	b8234 <_ZNKSt9type_infoeqERKS_>
   b80f8:	b120      	cbz	r0, b8104 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b80fa:	2308      	movs	r3, #8
   b80fc:	60e3      	str	r3, [r4, #12]
   b80fe:	2306      	movs	r3, #6
   b8100:	6025      	str	r5, [r4, #0]
   b8102:	7123      	strb	r3, [r4, #4]
   b8104:	bd38      	pop	{r3, r4, r5, pc}

000b8106 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8106:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8108:	4605      	mov	r5, r0
   b810a:	460c      	mov	r4, r1
   b810c:	9201      	str	r2, [sp, #4]
   b810e:	461e      	mov	r6, r3
   b8110:	f000 f890 	bl	b8234 <_ZNKSt9type_infoeqERKS_>
   b8114:	b950      	cbnz	r0, b812c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8116:	2e03      	cmp	r6, #3
   b8118:	d808      	bhi.n	b812c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b811a:	6823      	ldr	r3, [r4, #0]
   b811c:	9a01      	ldr	r2, [sp, #4]
   b811e:	695b      	ldr	r3, [r3, #20]
   b8120:	4629      	mov	r1, r5
   b8122:	4620      	mov	r0, r4
   b8124:	b002      	add	sp, #8
   b8126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b812a:	4718      	bx	r3
   b812c:	b002      	add	sp, #8
   b812e:	bd70      	pop	{r4, r5, r6, pc}

000b8130 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8130:	b510      	push	{r4, lr}
   b8132:	4b03      	ldr	r3, [pc, #12]	; (b8140 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8134:	6003      	str	r3, [r0, #0]
   b8136:	4604      	mov	r4, r0
   b8138:	f7ff ffa6 	bl	b8088 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b813c:	4620      	mov	r0, r4
   b813e:	bd10      	pop	{r4, pc}
   b8140:	000b955c 	.word	0x000b955c

000b8144 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8144:	b510      	push	{r4, lr}
   b8146:	4604      	mov	r4, r0
   b8148:	f7ff fff2 	bl	b8130 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b814c:	4620      	mov	r0, r4
   b814e:	210c      	movs	r1, #12
   b8150:	f7fb ffb5 	bl	b40be <_ZdlPvj>
   b8154:	4620      	mov	r0, r4
   b8156:	bd10      	pop	{r4, pc}

000b8158 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b815a:	9f08      	ldr	r7, [sp, #32]
   b815c:	4297      	cmp	r7, r2
   b815e:	4605      	mov	r5, r0
   b8160:	460e      	mov	r6, r1
   b8162:	4614      	mov	r4, r2
   b8164:	d00a      	beq.n	b817c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8166:	68a8      	ldr	r0, [r5, #8]
   b8168:	6802      	ldr	r2, [r0, #0]
   b816a:	9708      	str	r7, [sp, #32]
   b816c:	6a15      	ldr	r5, [r2, #32]
   b816e:	4631      	mov	r1, r6
   b8170:	4622      	mov	r2, r4
   b8172:	46ac      	mov	ip, r5
   b8174:	b003      	add	sp, #12
   b8176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b817a:	4760      	bx	ip
   b817c:	4619      	mov	r1, r3
   b817e:	9301      	str	r3, [sp, #4]
   b8180:	f000 f858 	bl	b8234 <_ZNKSt9type_infoeqERKS_>
   b8184:	9b01      	ldr	r3, [sp, #4]
   b8186:	2800      	cmp	r0, #0
   b8188:	d0ed      	beq.n	b8166 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b818a:	2006      	movs	r0, #6
   b818c:	b003      	add	sp, #12
   b818e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8190 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8190:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8194:	460d      	mov	r5, r1
   b8196:	4619      	mov	r1, r3
   b8198:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b819c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b81a0:	4681      	mov	r9, r0
   b81a2:	4617      	mov	r7, r2
   b81a4:	4698      	mov	r8, r3
   b81a6:	f000 f845 	bl	b8234 <_ZNKSt9type_infoeqERKS_>
   b81aa:	b190      	cbz	r0, b81d2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b81ac:	2d00      	cmp	r5, #0
   b81ae:	6034      	str	r4, [r6, #0]
   b81b0:	7137      	strb	r7, [r6, #4]
   b81b2:	db09      	blt.n	b81c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b81b4:	1961      	adds	r1, r4, r5
   b81b6:	458a      	cmp	sl, r1
   b81b8:	bf0c      	ite	eq
   b81ba:	2106      	moveq	r1, #6
   b81bc:	2101      	movne	r1, #1
   b81be:	71b1      	strb	r1, [r6, #6]
   b81c0:	2000      	movs	r0, #0
   b81c2:	b001      	add	sp, #4
   b81c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b81c8:	3502      	adds	r5, #2
   b81ca:	d1f9      	bne.n	b81c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b81cc:	2301      	movs	r3, #1
   b81ce:	71b3      	strb	r3, [r6, #6]
   b81d0:	e7f6      	b.n	b81c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b81d2:	4554      	cmp	r4, sl
   b81d4:	d106      	bne.n	b81e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b81d6:	4659      	mov	r1, fp
   b81d8:	4648      	mov	r0, r9
   b81da:	f000 f82b 	bl	b8234 <_ZNKSt9type_infoeqERKS_>
   b81de:	b108      	cbz	r0, b81e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b81e0:	7177      	strb	r7, [r6, #5]
   b81e2:	e7ed      	b.n	b81c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b81e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b81e8:	6803      	ldr	r3, [r0, #0]
   b81ea:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b81ee:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b81f2:	69dc      	ldr	r4, [r3, #28]
   b81f4:	463a      	mov	r2, r7
   b81f6:	4643      	mov	r3, r8
   b81f8:	4629      	mov	r1, r5
   b81fa:	46a4      	mov	ip, r4
   b81fc:	b001      	add	sp, #4
   b81fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8202:	4760      	bx	ip

000b8204 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8208:	4607      	mov	r7, r0
   b820a:	460c      	mov	r4, r1
   b820c:	4615      	mov	r5, r2
   b820e:	461e      	mov	r6, r3
   b8210:	f7ff ff6d 	bl	b80ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8214:	b948      	cbnz	r0, b822a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8216:	68b8      	ldr	r0, [r7, #8]
   b8218:	6803      	ldr	r3, [r0, #0]
   b821a:	699f      	ldr	r7, [r3, #24]
   b821c:	462a      	mov	r2, r5
   b821e:	4633      	mov	r3, r6
   b8220:	4621      	mov	r1, r4
   b8222:	46bc      	mov	ip, r7
   b8224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8228:	4760      	bx	ip
   b822a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b822e <_ZNSt9type_infoD1Ev>:
   b822e:	4770      	bx	lr

000b8230 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8230:	2000      	movs	r0, #0
   b8232:	4770      	bx	lr

000b8234 <_ZNKSt9type_infoeqERKS_>:
   b8234:	4281      	cmp	r1, r0
   b8236:	b508      	push	{r3, lr}
   b8238:	d00e      	beq.n	b8258 <_ZNKSt9type_infoeqERKS_+0x24>
   b823a:	6840      	ldr	r0, [r0, #4]
   b823c:	7803      	ldrb	r3, [r0, #0]
   b823e:	2b2a      	cmp	r3, #42	; 0x2a
   b8240:	d00c      	beq.n	b825c <_ZNKSt9type_infoeqERKS_+0x28>
   b8242:	6849      	ldr	r1, [r1, #4]
   b8244:	780b      	ldrb	r3, [r1, #0]
   b8246:	2b2a      	cmp	r3, #42	; 0x2a
   b8248:	bf08      	it	eq
   b824a:	3101      	addeq	r1, #1
   b824c:	f7fb fee6 	bl	b401c <strcmp>
   b8250:	fab0 f080 	clz	r0, r0
   b8254:	0940      	lsrs	r0, r0, #5
   b8256:	bd08      	pop	{r3, pc}
   b8258:	2001      	movs	r0, #1
   b825a:	e7fc      	b.n	b8256 <_ZNKSt9type_infoeqERKS_+0x22>
   b825c:	2000      	movs	r0, #0
   b825e:	e7fa      	b.n	b8256 <_ZNKSt9type_infoeqERKS_+0x22>

000b8260 <atexit>:
   b8260:	2300      	movs	r3, #0
   b8262:	4601      	mov	r1, r0
   b8264:	461a      	mov	r2, r3
   b8266:	4618      	mov	r0, r3
   b8268:	f000 b926 	b.w	b84b8 <__register_exitproc>

000b826c <atol>:
   b826c:	220a      	movs	r2, #10
   b826e:	2100      	movs	r1, #0
   b8270:	f000 b918 	b.w	b84a4 <strtol>

000b8274 <memcmp>:
   b8274:	b510      	push	{r4, lr}
   b8276:	3901      	subs	r1, #1
   b8278:	4402      	add	r2, r0
   b827a:	4290      	cmp	r0, r2
   b827c:	d101      	bne.n	b8282 <memcmp+0xe>
   b827e:	2000      	movs	r0, #0
   b8280:	e005      	b.n	b828e <memcmp+0x1a>
   b8282:	7803      	ldrb	r3, [r0, #0]
   b8284:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8288:	42a3      	cmp	r3, r4
   b828a:	d001      	beq.n	b8290 <memcmp+0x1c>
   b828c:	1b18      	subs	r0, r3, r4
   b828e:	bd10      	pop	{r4, pc}
   b8290:	3001      	adds	r0, #1
   b8292:	e7f2      	b.n	b827a <memcmp+0x6>

000b8294 <memcpy>:
   b8294:	440a      	add	r2, r1
   b8296:	4291      	cmp	r1, r2
   b8298:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b829c:	d100      	bne.n	b82a0 <memcpy+0xc>
   b829e:	4770      	bx	lr
   b82a0:	b510      	push	{r4, lr}
   b82a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b82a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b82aa:	4291      	cmp	r1, r2
   b82ac:	d1f9      	bne.n	b82a2 <memcpy+0xe>
   b82ae:	bd10      	pop	{r4, pc}

000b82b0 <memmove>:
   b82b0:	4288      	cmp	r0, r1
   b82b2:	b510      	push	{r4, lr}
   b82b4:	eb01 0402 	add.w	r4, r1, r2
   b82b8:	d902      	bls.n	b82c0 <memmove+0x10>
   b82ba:	4284      	cmp	r4, r0
   b82bc:	4623      	mov	r3, r4
   b82be:	d807      	bhi.n	b82d0 <memmove+0x20>
   b82c0:	1e43      	subs	r3, r0, #1
   b82c2:	42a1      	cmp	r1, r4
   b82c4:	d008      	beq.n	b82d8 <memmove+0x28>
   b82c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b82ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   b82ce:	e7f8      	b.n	b82c2 <memmove+0x12>
   b82d0:	4402      	add	r2, r0
   b82d2:	4601      	mov	r1, r0
   b82d4:	428a      	cmp	r2, r1
   b82d6:	d100      	bne.n	b82da <memmove+0x2a>
   b82d8:	bd10      	pop	{r4, pc}
   b82da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b82de:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b82e2:	e7f7      	b.n	b82d4 <memmove+0x24>

000b82e4 <memset>:
   b82e4:	4402      	add	r2, r0
   b82e6:	4603      	mov	r3, r0
   b82e8:	4293      	cmp	r3, r2
   b82ea:	d100      	bne.n	b82ee <memset+0xa>
   b82ec:	4770      	bx	lr
   b82ee:	f803 1b01 	strb.w	r1, [r3], #1
   b82f2:	e7f9      	b.n	b82e8 <memset+0x4>

000b82f4 <srand>:
   b82f4:	b538      	push	{r3, r4, r5, lr}
   b82f6:	4b10      	ldr	r3, [pc, #64]	; (b8338 <srand+0x44>)
   b82f8:	681d      	ldr	r5, [r3, #0]
   b82fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b82fc:	4604      	mov	r4, r0
   b82fe:	b9b3      	cbnz	r3, b832e <srand+0x3a>
   b8300:	2018      	movs	r0, #24
   b8302:	f7fd fd1f 	bl	b5d44 <malloc>
   b8306:	4602      	mov	r2, r0
   b8308:	63a8      	str	r0, [r5, #56]	; 0x38
   b830a:	b920      	cbnz	r0, b8316 <srand+0x22>
   b830c:	4b0b      	ldr	r3, [pc, #44]	; (b833c <srand+0x48>)
   b830e:	480c      	ldr	r0, [pc, #48]	; (b8340 <srand+0x4c>)
   b8310:	2142      	movs	r1, #66	; 0x42
   b8312:	f7fd fd47 	bl	b5da4 <__assert_func>
   b8316:	490b      	ldr	r1, [pc, #44]	; (b8344 <srand+0x50>)
   b8318:	4b0b      	ldr	r3, [pc, #44]	; (b8348 <srand+0x54>)
   b831a:	e9c0 1300 	strd	r1, r3, [r0]
   b831e:	4b0b      	ldr	r3, [pc, #44]	; (b834c <srand+0x58>)
   b8320:	6083      	str	r3, [r0, #8]
   b8322:	230b      	movs	r3, #11
   b8324:	8183      	strh	r3, [r0, #12]
   b8326:	2100      	movs	r1, #0
   b8328:	2001      	movs	r0, #1
   b832a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b832e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8330:	2200      	movs	r2, #0
   b8332:	611c      	str	r4, [r3, #16]
   b8334:	615a      	str	r2, [r3, #20]
   b8336:	bd38      	pop	{r3, r4, r5, pc}
   b8338:	2003e54c 	.word	0x2003e54c
   b833c:	000b9595 	.word	0x000b9595
   b8340:	000b95ac 	.word	0x000b95ac
   b8344:	abcd330e 	.word	0xabcd330e
   b8348:	e66d1234 	.word	0xe66d1234
   b834c:	0005deec 	.word	0x0005deec

000b8350 <strcpy>:
   b8350:	4603      	mov	r3, r0
   b8352:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8356:	f803 2b01 	strb.w	r2, [r3], #1
   b835a:	2a00      	cmp	r2, #0
   b835c:	d1f9      	bne.n	b8352 <strcpy+0x2>
   b835e:	4770      	bx	lr

000b8360 <strncpy>:
   b8360:	b510      	push	{r4, lr}
   b8362:	3901      	subs	r1, #1
   b8364:	4603      	mov	r3, r0
   b8366:	b132      	cbz	r2, b8376 <strncpy+0x16>
   b8368:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b836c:	f803 4b01 	strb.w	r4, [r3], #1
   b8370:	3a01      	subs	r2, #1
   b8372:	2c00      	cmp	r4, #0
   b8374:	d1f7      	bne.n	b8366 <strncpy+0x6>
   b8376:	441a      	add	r2, r3
   b8378:	2100      	movs	r1, #0
   b837a:	4293      	cmp	r3, r2
   b837c:	d100      	bne.n	b8380 <strncpy+0x20>
   b837e:	bd10      	pop	{r4, pc}
   b8380:	f803 1b01 	strb.w	r1, [r3], #1
   b8384:	e7f9      	b.n	b837a <strncpy+0x1a>

000b8386 <strnlen>:
   b8386:	b510      	push	{r4, lr}
   b8388:	4602      	mov	r2, r0
   b838a:	4401      	add	r1, r0
   b838c:	428a      	cmp	r2, r1
   b838e:	4613      	mov	r3, r2
   b8390:	d003      	beq.n	b839a <strnlen+0x14>
   b8392:	781c      	ldrb	r4, [r3, #0]
   b8394:	3201      	adds	r2, #1
   b8396:	2c00      	cmp	r4, #0
   b8398:	d1f8      	bne.n	b838c <strnlen+0x6>
   b839a:	1a18      	subs	r0, r3, r0
   b839c:	bd10      	pop	{r4, pc}
	...

000b83a0 <_strtol_l.constprop.0>:
   b83a0:	2b01      	cmp	r3, #1
   b83a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b83a6:	d001      	beq.n	b83ac <_strtol_l.constprop.0+0xc>
   b83a8:	2b24      	cmp	r3, #36	; 0x24
   b83aa:	d906      	bls.n	b83ba <_strtol_l.constprop.0+0x1a>
   b83ac:	f7fd fcf2 	bl	b5d94 <__errno>
   b83b0:	2316      	movs	r3, #22
   b83b2:	6003      	str	r3, [r0, #0]
   b83b4:	2000      	movs	r0, #0
   b83b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b83ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b84a0 <_strtol_l.constprop.0+0x100>
   b83be:	460d      	mov	r5, r1
   b83c0:	462e      	mov	r6, r5
   b83c2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b83c6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b83ca:	f017 0708 	ands.w	r7, r7, #8
   b83ce:	d1f7      	bne.n	b83c0 <_strtol_l.constprop.0+0x20>
   b83d0:	2c2d      	cmp	r4, #45	; 0x2d
   b83d2:	d132      	bne.n	b843a <_strtol_l.constprop.0+0x9a>
   b83d4:	782c      	ldrb	r4, [r5, #0]
   b83d6:	2701      	movs	r7, #1
   b83d8:	1cb5      	adds	r5, r6, #2
   b83da:	2b00      	cmp	r3, #0
   b83dc:	d05b      	beq.n	b8496 <_strtol_l.constprop.0+0xf6>
   b83de:	2b10      	cmp	r3, #16
   b83e0:	d109      	bne.n	b83f6 <_strtol_l.constprop.0+0x56>
   b83e2:	2c30      	cmp	r4, #48	; 0x30
   b83e4:	d107      	bne.n	b83f6 <_strtol_l.constprop.0+0x56>
   b83e6:	782c      	ldrb	r4, [r5, #0]
   b83e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b83ec:	2c58      	cmp	r4, #88	; 0x58
   b83ee:	d14d      	bne.n	b848c <_strtol_l.constprop.0+0xec>
   b83f0:	786c      	ldrb	r4, [r5, #1]
   b83f2:	2310      	movs	r3, #16
   b83f4:	3502      	adds	r5, #2
   b83f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b83fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b83fe:	f04f 0c00 	mov.w	ip, #0
   b8402:	fbb8 f9f3 	udiv	r9, r8, r3
   b8406:	4666      	mov	r6, ip
   b8408:	fb03 8a19 	mls	sl, r3, r9, r8
   b840c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8410:	f1be 0f09 	cmp.w	lr, #9
   b8414:	d816      	bhi.n	b8444 <_strtol_l.constprop.0+0xa4>
   b8416:	4674      	mov	r4, lr
   b8418:	42a3      	cmp	r3, r4
   b841a:	dd24      	ble.n	b8466 <_strtol_l.constprop.0+0xc6>
   b841c:	f1bc 0f00 	cmp.w	ip, #0
   b8420:	db1e      	blt.n	b8460 <_strtol_l.constprop.0+0xc0>
   b8422:	45b1      	cmp	r9, r6
   b8424:	d31c      	bcc.n	b8460 <_strtol_l.constprop.0+0xc0>
   b8426:	d101      	bne.n	b842c <_strtol_l.constprop.0+0x8c>
   b8428:	45a2      	cmp	sl, r4
   b842a:	db19      	blt.n	b8460 <_strtol_l.constprop.0+0xc0>
   b842c:	fb06 4603 	mla	r6, r6, r3, r4
   b8430:	f04f 0c01 	mov.w	ip, #1
   b8434:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8438:	e7e8      	b.n	b840c <_strtol_l.constprop.0+0x6c>
   b843a:	2c2b      	cmp	r4, #43	; 0x2b
   b843c:	bf04      	itt	eq
   b843e:	782c      	ldrbeq	r4, [r5, #0]
   b8440:	1cb5      	addeq	r5, r6, #2
   b8442:	e7ca      	b.n	b83da <_strtol_l.constprop.0+0x3a>
   b8444:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8448:	f1be 0f19 	cmp.w	lr, #25
   b844c:	d801      	bhi.n	b8452 <_strtol_l.constprop.0+0xb2>
   b844e:	3c37      	subs	r4, #55	; 0x37
   b8450:	e7e2      	b.n	b8418 <_strtol_l.constprop.0+0x78>
   b8452:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8456:	f1be 0f19 	cmp.w	lr, #25
   b845a:	d804      	bhi.n	b8466 <_strtol_l.constprop.0+0xc6>
   b845c:	3c57      	subs	r4, #87	; 0x57
   b845e:	e7db      	b.n	b8418 <_strtol_l.constprop.0+0x78>
   b8460:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8464:	e7e6      	b.n	b8434 <_strtol_l.constprop.0+0x94>
   b8466:	f1bc 0f00 	cmp.w	ip, #0
   b846a:	da05      	bge.n	b8478 <_strtol_l.constprop.0+0xd8>
   b846c:	2322      	movs	r3, #34	; 0x22
   b846e:	6003      	str	r3, [r0, #0]
   b8470:	4646      	mov	r6, r8
   b8472:	b942      	cbnz	r2, b8486 <_strtol_l.constprop.0+0xe6>
   b8474:	4630      	mov	r0, r6
   b8476:	e79e      	b.n	b83b6 <_strtol_l.constprop.0+0x16>
   b8478:	b107      	cbz	r7, b847c <_strtol_l.constprop.0+0xdc>
   b847a:	4276      	negs	r6, r6
   b847c:	2a00      	cmp	r2, #0
   b847e:	d0f9      	beq.n	b8474 <_strtol_l.constprop.0+0xd4>
   b8480:	f1bc 0f00 	cmp.w	ip, #0
   b8484:	d000      	beq.n	b8488 <_strtol_l.constprop.0+0xe8>
   b8486:	1e69      	subs	r1, r5, #1
   b8488:	6011      	str	r1, [r2, #0]
   b848a:	e7f3      	b.n	b8474 <_strtol_l.constprop.0+0xd4>
   b848c:	2430      	movs	r4, #48	; 0x30
   b848e:	2b00      	cmp	r3, #0
   b8490:	d1b1      	bne.n	b83f6 <_strtol_l.constprop.0+0x56>
   b8492:	2308      	movs	r3, #8
   b8494:	e7af      	b.n	b83f6 <_strtol_l.constprop.0+0x56>
   b8496:	2c30      	cmp	r4, #48	; 0x30
   b8498:	d0a5      	beq.n	b83e6 <_strtol_l.constprop.0+0x46>
   b849a:	230a      	movs	r3, #10
   b849c:	e7ab      	b.n	b83f6 <_strtol_l.constprop.0+0x56>
   b849e:	bf00      	nop
   b84a0:	000b9606 	.word	0x000b9606

000b84a4 <strtol>:
   b84a4:	4613      	mov	r3, r2
   b84a6:	460a      	mov	r2, r1
   b84a8:	4601      	mov	r1, r0
   b84aa:	4802      	ldr	r0, [pc, #8]	; (b84b4 <strtol+0x10>)
   b84ac:	6800      	ldr	r0, [r0, #0]
   b84ae:	f7ff bf77 	b.w	b83a0 <_strtol_l.constprop.0>
   b84b2:	bf00      	nop
   b84b4:	2003e54c 	.word	0x2003e54c

000b84b8 <__register_exitproc>:
   b84b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b84bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8578 <__register_exitproc+0xc0>
   b84c0:	4606      	mov	r6, r0
   b84c2:	f8d8 0000 	ldr.w	r0, [r8]
   b84c6:	461f      	mov	r7, r3
   b84c8:	460d      	mov	r5, r1
   b84ca:	4691      	mov	r9, r2
   b84cc:	f000 f856 	bl	b857c <__retarget_lock_acquire_recursive>
   b84d0:	4b25      	ldr	r3, [pc, #148]	; (b8568 <__register_exitproc+0xb0>)
   b84d2:	681c      	ldr	r4, [r3, #0]
   b84d4:	b934      	cbnz	r4, b84e4 <__register_exitproc+0x2c>
   b84d6:	4c25      	ldr	r4, [pc, #148]	; (b856c <__register_exitproc+0xb4>)
   b84d8:	601c      	str	r4, [r3, #0]
   b84da:	4b25      	ldr	r3, [pc, #148]	; (b8570 <__register_exitproc+0xb8>)
   b84dc:	b113      	cbz	r3, b84e4 <__register_exitproc+0x2c>
   b84de:	681b      	ldr	r3, [r3, #0]
   b84e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b84e4:	6863      	ldr	r3, [r4, #4]
   b84e6:	2b1f      	cmp	r3, #31
   b84e8:	dd07      	ble.n	b84fa <__register_exitproc+0x42>
   b84ea:	f8d8 0000 	ldr.w	r0, [r8]
   b84ee:	f000 f847 	bl	b8580 <__retarget_lock_release_recursive>
   b84f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b84f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b84fa:	b34e      	cbz	r6, b8550 <__register_exitproc+0x98>
   b84fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8500:	b988      	cbnz	r0, b8526 <__register_exitproc+0x6e>
   b8502:	4b1c      	ldr	r3, [pc, #112]	; (b8574 <__register_exitproc+0xbc>)
   b8504:	b923      	cbnz	r3, b8510 <__register_exitproc+0x58>
   b8506:	f8d8 0000 	ldr.w	r0, [r8]
   b850a:	f000 f838 	bl	b857e <__retarget_lock_release>
   b850e:	e7f0      	b.n	b84f2 <__register_exitproc+0x3a>
   b8510:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8514:	f7fd fc16 	bl	b5d44 <malloc>
   b8518:	2800      	cmp	r0, #0
   b851a:	d0f4      	beq.n	b8506 <__register_exitproc+0x4e>
   b851c:	2300      	movs	r3, #0
   b851e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8522:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8526:	6863      	ldr	r3, [r4, #4]
   b8528:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b852c:	2201      	movs	r2, #1
   b852e:	409a      	lsls	r2, r3
   b8530:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8534:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8538:	4313      	orrs	r3, r2
   b853a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b853e:	2e02      	cmp	r6, #2
   b8540:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8544:	bf02      	ittt	eq
   b8546:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b854a:	4313      	orreq	r3, r2
   b854c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8550:	6863      	ldr	r3, [r4, #4]
   b8552:	f8d8 0000 	ldr.w	r0, [r8]
   b8556:	1c5a      	adds	r2, r3, #1
   b8558:	3302      	adds	r3, #2
   b855a:	6062      	str	r2, [r4, #4]
   b855c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8560:	f000 f80e 	bl	b8580 <__retarget_lock_release_recursive>
   b8564:	2000      	movs	r0, #0
   b8566:	e7c6      	b.n	b84f6 <__register_exitproc+0x3e>
   b8568:	2003e7e8 	.word	0x2003e7e8
   b856c:	2003e75c 	.word	0x2003e75c
   b8570:	00000000 	.word	0x00000000
   b8574:	000b5d45 	.word	0x000b5d45
   b8578:	2003e5b0 	.word	0x2003e5b0

000b857c <__retarget_lock_acquire_recursive>:
   b857c:	4770      	bx	lr

000b857e <__retarget_lock_release>:
   b857e:	4770      	bx	lr

000b8580 <__retarget_lock_release_recursive>:
   b8580:	4770      	bx	lr

000b8582 <link_code_end>:
	...

000b8584 <link_const_data_start>:
   b8584:	00000000 	.word	0x00000000
   b8588:	34fb0000 	.word	0x34fb0000
   b858c:	00805f9b 	.word	0x00805f9b
   b8590:	10008000 	.word	0x10008000
	...

000b859c <dynalib_user>:
   b859c:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b85ac:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b85bc:	72697620 6c617574 216f5900 6944000a      virtual.Yo!..Di
   b85cc:	6e6f6373 7463656e 31006465 68530021     sconnected.1!.Sh
   b85dc:	6862756f 00217469 30344536 31303030     oubhit!.6E400001
   b85ec:	4135422d 33462d33 452d3339 2d394130     -B5A3-F393-E0A9-
   b85fc:	45303545 43443432 45394143 34453600     E50E24DCCA9E.6E4
   b860c:	30303030 35422d32 462d3341 2d333933     00002-B5A3-F393-
   b861c:	39413045 3035452d 44343245 39414343     E0A9-E50E24DCCA9
   b862c:	78720045 34453600 30303030 35422d33     E.rx.6E400003-B5
   b863c:	462d3341 2d333933 39413045 3035452d     A3-F393-E0A9-E50
   b864c:	44343245 39414343 78740045               E24DCCA9E.tx.

000b8659 <_ZL4font>:
   b8659:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   b8669:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   b8679:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   b8689:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   b8699:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   b86a9:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   b86b9:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   b86c9:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   b86d9:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   b86e9:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   b86f9:	00000000 5f000000 07000000 14000700     ......._........
   b8709:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   b8719:	00502056 00030708 41221c00 22410000     V P......."A..A"
   b8729:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   b8739:	08080800 00000808 20006060 02040810     ........``. ....
   b8749:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   b8759:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   b8769:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   b8779:	00001e29 00000014 00003440 22140800     ).......@4....."
   b8789:	14141441 41001414 02081422 06095901     A......A"....Y..
   b8799:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   b87a9:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   b87b9:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   b87c9:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   b87d9:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   b87e9:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   b87f9:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   b8809:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   b8819:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   b8829:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   b8839:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   b8849:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   b8859:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   b8869:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   b8879:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   b8889:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   b8899:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   b88a9:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   b88b9:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   b88c9:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   b88d9:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   b88e9:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   b88f9:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   b8909:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   b8919:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   b8929:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   b8939:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   b8949:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   b8959:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   b8969:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   b8979:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   b8989:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   b8999:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   b89a9:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   b89b9:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   b89c9:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   b89d9:	00ff0000 ff101010 14141400 101000ff     ................
   b89e9:	10ff00ff f010f010 fc141414 f7141400     ................
   b89f9:	0000ff00 14ff00ff fc04f414 10171414     ................
   b8a09:	1f10101f 14141f10 10001f14 00f01010     ................
   b8a19:	1f000000 10101010 1010101f 0010f010     ................
   b8a29:	10ff0000 10101010 10101010 000010ff     ................
   b8a39:	0014ff00 ff00ff00 101f0000 fc000017     ................
   b8a49:	1414f404 14171017 f404f414 00ff0000     ................
   b8a59:	141414f7 14141414 14f700f7 14171414     ................
   b8a69:	101f1010 1414141f 101014f4 00f010f0     ................
   b8a79:	1f101f00 1f000000 00000014 000014fc     ................
   b8a89:	10f010f0 ff10ff10 ff141414 10101014     ................
   b8a99:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   b8aa9:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   b8ab9:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   b8ac9:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   b8ad9:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   b8ae9:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   b8af9:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   b8b09:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   b8b19:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   b8b29:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   b8b39:	00000018 30001010 0101ff40 01011f00     .......0@.......
   b8b49:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
   b8b59:	                                         ...

000b8b5c <_ZTV12Adafruit_GFX>:
	...
   b8b6c:	000b4b49 000b75c1 000b40c5 000b454f     IK...u...@..OE..
   b8b7c:	000b4551 000b4583 000b455f 000b4571     QE...E.._E..qE..
   b8b8c:	000b4491 000b454f 000b477b 000b4779     .D..OE..{G..yG..
   b8b9c:	000b459b 000b45d9 000b4613 000b4659     .E...E...F..YF..
   b8bac:	000b4675 000b46f9 61666564 20746c75     uF...F..default 
   b8bbc:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   b8bcc:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   b8bdc:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   b8bec:	20732520 45444f4d 003e7525               %s MODE%u>.

000b8bf8 <_ZTVN8particle11SPISettingsE>:
	...
   b8c00:	000b4c85 000b4c57 000b4c59              .L..WL..YL..

000b8c0c <_ZL12splash1_data>:
   b8c0c:	00000000 00800100 00000000 00000000     ................
   b8c1c:	00008003 00000000 07000000 000000c0     ................
   b8c2c:	00000000 c0070000 00000000 00000000     ................
   b8c3c:	00c00f00 00000000 00000000 0000e01f     ................
   b8c4c:	00000000 1f000000 000000e0 00000000     ................
   b8c5c:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   b8c74:	0000f07f 00000000 7ff81f00 000000f0     ................
   b8c84:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   b8c94:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   b8ca4:	00000000 f9ff0f00 0000c0ff 00000000     ................
   b8cb4:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   b8cc4:	00000000 fc030000 80ffff73 00000000     ........s.......
   b8cd4:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   b8ce4:	000000ff 00000000 fc1ffe7f 00000000     ................
   b8cf4:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   b8d04:	0000e0ff 00000000 ff191f00 000000c0     ................
   b8d14:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   b8d24:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   b8d34:	00000000 fcffff00 00000000 00000000     ................
   b8d44:	00feffff 00000000 ff000000 0000feff     ................
   b8d54:	00000000 efff0100 000000fe 00000000     ................
   b8d64:	fecfff01 00000000 03000000 00fe07ff     ................
   b8d74:	00000000 fc030000 0000fe07 00000000     ................
   b8d84:	03f00300 000000fe 00000000 fe008001     ................
	...
   b8d9c:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   b8db4:	0000000c 07000000 00fc0080 00c00300     ................
   b8dc4:	80070000 0000fc01 0000c003 01800700     ................
   b8dd4:	030000fc 000000c0 e0018007 1e000000     ................
   b8de4:	07000000 00e00180 001e0000 9ff7e37f     ................
   b8df4:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   b8e04:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   b8e14:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   b8e24:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   b8e34:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   b8e44:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   b8e54:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   b8e64:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   b8e74:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   b8e84:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   b8e94:	ffffff00 ffffffff c0ffffff ffffffff     ................
   b8ea4:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   b8eb4:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   b8ec4:	5b6bfdff c0fd6adb                       ..k[.j..

000b8ecc <_ZL12splash2_data>:
   b8ecc:	00600000 00000000 00000000 00000000     ..`.............
   b8edc:	0000e000 00000000 00000000 01000000     ................
   b8eec:	000000e0 00000000 00000000 f0010000     ................
	...
   b8f08:	00f00300 00000000 00000000 00000000     ................
   b8f18:	0000f007 00000000 00000000 07000000     ................
   b8f28:	000000f8 00000000 00000000 f80f0000     ................
   b8f38:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   b8f48:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   b8f58:	00c00300 010000fe ffff00e0 000000f8     ................
   b8f68:	f000c003 0f000000 7ffe7f00 030000c0     ................
   b8f78:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   b8f88:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   b8f98:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   b8fa8:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   b8fb8:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   b8fc8:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   b8fd8:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   b8fe8:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   b8ff8:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   b9008:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   b9018:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   b9028:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   b9038:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   b9048:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   b9060:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   b9070:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   b9080:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   b9090:	ff7f000f a5feffff 198d9dad 060000e0     ................
   b90a0:	ffff7f00 adb5feff e07eb5ed              ..........~.

000b90ac <_ZTV16Adafruit_SSD1306>:
	...
   b90b4:	000b4cd9 000b4cf1 000b4b49 000b75c1     .L...L..IK...u..
   b90c4:	000b4d05 000b454f 000b4551 000b4583     .M..OE..QE...E..
   b90d4:	000b455f 000b4571 000b4491 000b454f     _E..qE...D..OE..
   b90e4:	000b477b 000b4ea3 000b544b 000b53fd     {G...N..KT...S..
   b90f4:	000b4613 000b4659 000b4675 000b46f9     .F..YF..uF...F..

000b9104 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9104:	e0c08000 fefcf8f0                       ........

000b910c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b910c:	07030100 7f3f1f0f                       ......?.

000b9114 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9114:	a880d5ae                                ....

000b9118 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9118:	8d4000d3                                ..@.

000b911c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b911c:	c8a10020                                 ...

000b9120 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9120:	a6a440db                                 .@....

000b9126 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9126:	8f8102da                                ....

000b912a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b912a:	                                         ...

000b912d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b912d:	                                         ...

000b9130 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9130:	21ff0022 00000000                       "..!....

000b9138 <_ZTV16OledWingAdafruit>:
	...
   b9140:	000b5671 000b5691 000b4b49 000b75c1     qV...V..IK...u..
   b9150:	000b4d05 000b454f 000b4551 000b4583     .M..OE..QE...E..
   b9160:	000b455f 000b4571 000b4491 000b454f     _E..qE...D..OE..
   b9170:	000b477b 000b4ea3 000b544b 000b53fd     {G...N..KT...S..
   b9180:	000b4613 000b4659 000b4675 000b46f9     .F..YF..uF...F..
   b9190:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   b91a0:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   b91b0:	74530065 20747261 63736964 7265766f     e.Start discover
   b91c0:	20676e69 76726573 73656369 7341002e     ing services..As
   b91d0:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   b91e0:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   b91f0:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   b9200:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   b9210:	72656550 76656420 20656369 6d207369     Peer device is m
   b9220:	69737369 0021676e 6c696146 74206465     issing!.Failed t
   b9230:	7061206f 646e6570 65657020 65432072     o append peer Ce
   b9240:	6172746e 6564206c 65636976 6f43002e     ntral device..Co
   b9250:	63656e6e 00646574 6c707544 74616369     nnected.Duplicat
   b9260:	63206465 61726168 72657463 69747369     ed characteristi
   b9270:	61632063 746f6e6e 20656220 65646461     c cannot be adde
   b9280:	46002e64 656c6961 6f742064 70706120     d..Failed to app
   b9290:	20646e65 61636f6c 6863206c 63617261     end local charac
   b92a0:	69726574 63697473 0000002e              teristic....

000b92ac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b92b4:	000b5dd1 000b5e35 000b5f1b 000b5e5f     .]..5^..._.._^..
   b92c4:	000b5dd5                                .]..

000b92c8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b92d0:	000b5dcd 000b5e43 000b5dcf 000b5e65     .]..C^...]..e^..
   b92e0:	000b5df5                                .]..

000b92e4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b92ec:	000b5dcb 000b5e51 000b66fd 000b5e6b     .]..Q^...f..k^..
   b92fc:	000b5e15                                .^..

000b9300 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9308 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b9308:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000b9318 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b9318:	5f9b34fb 80000080 00001000 00000000     .4._............

000b9328 <_ZTVN5spark13EthernetClassE>:
	...
   b9330:	000b727b 000b7271 000b7267 000b725d     {r..qr..gr..]r..
   b9340:	000b7251 000b7245 000b749d 000b74a5     Qr..Er...t...t..
   b9350:	000b7239 000b7231 000b7227 000b721d     9r..1r..'r...r..
   b9360:	000b74d5                                .t..

000b9364 <_ZTV7TwoWire>:
	...
   b936c:	000b7299 000b72e3 000b72bb 000b729b     .r...r...r...r..
   b937c:	000b72c3 000b72cb 000b72d3 000b72db     .r...r...r...r..

000b938c <_ZTV9IPAddress>:
	...
   b9394:	000b736d 000b735d 000b735f 00707061     ms..]s.._s..app.

000b93a4 <_ZTVN5spark12NetworkClassE>:
	...
   b93ac:	000b745d 000b7467 000b7471 000b747b     ]t..gt..qt..{t..
   b93bc:	000b7485 000b7491 000b749d 000b74a5     .t...t...t...t..
   b93cc:	000b74ad 000b74b9 000b74c1 000b74cb     .t...t...t...t..
   b93dc:	000b74d5                                .t..

000b93e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b93e0:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
   b93f0:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   b9400:	00656d69                                ime.

000b9404 <_ZTV11USARTSerial>:
	...
   b940c:	000b7a65 000b7ad1 000b7aa9 000b75c1     ez...z...z...u..
   b941c:	000b7a79 000b7a95 000b7a87 000b7aa3     yz...z...z...z..
   b942c:	000b7a67 000b7a6b                       gz..kz..

000b9434 <_ZTV9USBSerial>:
	...
   b943c:	000b7b0f 000b7b77 000b7b4d 000b75c1     .{..w{..M{...u..
   b944c:	000b7b3f 000b7b11 000b7b21 000b7b71     ?{...{..!{..q{..
   b945c:	000b7b31 000b7b09                       1{...{..

000b9464 <_ZTVN5spark9WiFiClassE>:
	...
   b946c:	000b7c6f 000b7c65 000b7c5b 000b7c11     o|..e|..[|...|..
   b947c:	000b7c4f 000b7c43 000b749d 000b74a5     O|..C|...t...t..
   b948c:	000b7c37 000b7c2f 000b7c25 000b7c1b     7|../|..%|...|..
   b949c:	000b74d5                                .t..

000b94a0 <_ZSt7nothrow>:
	...

000b94a1 <_ZTSSt19_Sp_make_shared_tag>:
   b94a1:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b94b1:	5f646572 00676174                        red_tag....

000b94bc <_ZTISt19_Sp_make_shared_tag>:
   b94bc:	000b94fc 000b94a1                       ........

000b94c4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b94c4:	000b955c 000b94d0 000b9580              \...........

000b94d0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b94d0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b94e0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b94f0:	00000045                                E...

000b94f4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b94f4:	00000000 000b94c4 000b8089 000b809d     ................
   b9504:	000b8231 000b8231 000b8107 000b8049     1...1.......I...
   b9514:	000b80ef 000b80b1 000b807b              ........{...

000b9520 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9520:	000b955c 000b952c 000b94c4              \...,.......

000b952c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b952c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b953c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b954c:	456f666e 00000000                       nfoE....

000b9554 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9554:	00000000 000b9520 000b8131 000b8145     .... ...1...E...
   b9564:	000b8231 000b8231 000b8107 000b8049     1...1.......I...
   b9574:	000b8205 000b8191 000b8159              ........Y...

000b9580 <_ZTISt9type_info>:
   b9580:	000b94fc 000b9588                       ........

000b9588 <_ZTSSt9type_info>:
   b9588:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b9598:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b95a8:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b95b8:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b95c8:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b95d8:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b95e8:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b95f8:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b9605 <_ctype_>:
   b9605:	20202000 20202020 28282020 20282828     .         ((((( 
   b9615:	20202020 20202020 20202020 20202020                     
   b9625:	10108820 10101010 10101010 10101010      ...............
   b9635:	04040410 04040404 10040404 10101010     ................
   b9645:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b9655:	01010101 01010101 01010101 10101010     ................
   b9665:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b9675:	02020202 02020202 02020202 10101010     ................
   b9685:	00000020 00000000 00000000 00000000      ...............
	...

000b9706 <link_const_data_end>:
	...

000b9708 <link_constructors_location>:
   b9708:	000b4345 	.word	0x000b4345
   b970c:	000b720d 	.word	0x000b720d
   b9710:	000b7285 	.word	0x000b7285
   b9714:	000b744d 	.word	0x000b744d
   b9718:	000b75ad 	.word	0x000b75ad
   b971c:	000b7731 	.word	0x000b7731
   b9720:	000b7a2d 	.word	0x000b7a2d
   b9724:	000b7a51 	.word	0x000b7a51
   b9728:	000b7c79 	.word	0x000b7c79
